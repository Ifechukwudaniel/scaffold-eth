{
  "address": "0x3dd4b25C28640CA79c09A0d6e84a07425095Eddf",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recipient",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "renderTokenById",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xedea6bad070ce0a3be77f30d64fd2469725dd8add2e58ee3be93af5b4347fb1d",
  "receipt": {
    "to": null,
    "from": "0x162B12a38ad616e222Beeb82e426219C005c0907",
    "contractAddress": "0x3dd4b25C28640CA79c09A0d6e84a07425095Eddf",
    "transactionIndex": 103,
    "gasUsed": "2974774",
    "logsBloom": "0x0000000000000000000000000000000002000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000100000000000000000000000000000000000002000000000000000c000800000000000000000000000000000000400020000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x816d611bf1cc7264f6baa808ec85db55e7ab49146a4418cb7532943ead9aae91",
    "transactionHash": "0xedea6bad070ce0a3be77f30d64fd2469725dd8add2e58ee3be93af5b4347fb1d",
    "logs": [
      {
        "transactionIndex": 103,
        "blockNumber": 8434932,
        "transactionHash": "0xedea6bad070ce0a3be77f30d64fd2469725dd8add2e58ee3be93af5b4347fb1d",
        "address": "0x3dd4b25C28640CA79c09A0d6e84a07425095Eddf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000162b12a38ad616e222beeb82e426219c005c0907"
        ],
        "data": "0x",
        "logIndex": 143,
        "blockHash": "0x816d611bf1cc7264f6baa808ec85db55e7ab49146a4418cb7532943ead9aae91"
      }
    ],
    "blockNumber": 8434932,
    "cumulativeGasUsed": "20548172",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e367f7a616e6f77df90e062ab14d8d09",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"renderTokenById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ThisSocks.sol\":\"ThisSocks\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/SockBackground/AdditionalBackgrounds/FlowerBackground.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\nlibrary FlowerBackground  {\\n      function background(string memory backgroundColor) public pure returns(string memory){\\n        return  string(abi.encodePacked(\\n            '<rect width=\\\"1080\\\" height=\\\"1080\\\" '\\n            ' fill=\\\"',backgroundColor,'\\\"',\\n            ' />',\\n            '     <g transform=\\\"translate(100,90)\\\">', \\n            '         <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\"', \\n            '             d=\\\"M182.952 71.5976C191.989 71.5976 199.315 78.9529 199.315 88.0261C199.315 97.0993 185.99 113.953 182.952 113.953C179.914 113.953 166.589 97.0993 166.589 88.0261C166.589 78.9529 173.915 71.5976 182.952 71.5976ZM155.616 155.967C148.305 150.634 146.684 140.36 151.996 133.02C157.308 125.68 178.472 120.984 181.585 122.885C183.725 126.182 183.783 144.992 178.472 152.333C173.16 159.673 162.927 161.3 155.616 155.967ZM213.961 133.02C219.273 140.36 217.652 150.634 210.341 155.967C203.03 161.3 192.797 159.673 187.485 152.333C182.173 144.992 181.585 125.729 185.484 122.885C189.878 119.68 208.649 125.68 213.961 133.02ZM138.698 103.799C141.49 95.17 150.721 90.4476 159.316 93.2514C167.911 96.0552 181.585 113.953 178.472 118.818C175.252 123.848 157.798 127.304 149.203 124.5C140.609 121.696 135.905 112.428 138.698 103.799ZM206.576 93.2514C215.171 90.4476 224.402 95.17 227.195 103.799C229.987 112.428 225.284 121.696 216.689 124.5C208.095 127.304 188.393 121.537 187.485 118.818C185.484 112.823 197.982 96.0552 206.576 93.2514Z\\\"', \\n            '             fill=\\\"white\\\" />', \\n            '         <circle cx=\\\"182.513\\\" cy=\\\"118.818\\\" r=\\\"16.8952\\\" fill=\\\"#FDFFBC\\\" />', \\n            '         <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\"', \\n            '             d=\\\"M140.76 894.958C133.558 900.417 123.277 898.98 117.797 891.749C112.316 884.518 112.755 863.038 115.176 861.203C117.597 859.368 138.397 864.751 143.877 871.981C149.358 879.212 147.963 889.499 140.76 894.958ZM111.583 811.207C120.631 811.041 128.128 818.25 128.329 827.309C128.53 836.367 114.5 852.893 110.869 853.259C107.173 851.924 95.7642 836.968 95.5633 827.91C95.3627 818.851 102.535 811.373 111.583 811.207ZM78.946 864.738C70.2788 862.097 65.3644 852.93 67.9697 844.264C70.5748 835.597 79.7128 830.713 88.3798 833.354C97.047 835.996 109.152 850.993 107.762 855.614C106.197 860.822 87.613 867.38 78.946 864.738ZM156.578 842.564C159.565 851.127 155.06 860.467 146.517 863.424C137.974 866.381 116.265 860.378 115.808 854.62C115.335 848.666 127.158 835.369 135.701 832.412C144.244 829.455 153.591 834 156.578 842.564ZM108.853 891.971C103.697 899.397 93.4876 901.21 86.0498 896.02C78.6117 890.829 76.762 880.602 81.9178 873.176C87.0739 865.75 106.258 858.445 108.625 860.064C113.84 863.633 114.009 884.545 108.853 891.971Z\\\"', \\n            '             fill=\\\"white\\\" />', \\n            '         <circle cx=\\\"112.587\\\" cy=\\\"857.061\\\" r=\\\"16.8952\\\" transform=\\\"rotate(142.84 112.587 857.061)\\\" fill=\\\"#FDFFBC\\\" />', \\n            '         <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\"', \\n            '             d=\\\"M68.9543 -9.10414e-05C82.7837 -9.10414e-05 93.9944 11.2557 93.9944 25.1405C93.9944 39.0252 73.603 64.8158 68.9543 64.8158C64.3055 64.8158 43.9142 39.0252 43.9142 25.1405C43.9142 11.2557 55.1249 -9.10414e-05 68.9543 -9.10414e-05ZM27.1219 129.111C15.9338 120.95 13.4536 105.228 21.5822 93.9948C29.7108 82.7617 62.0982 75.5755 66.8634 78.4853C70.1373 83.5308 70.2265 112.316 62.0982 123.549C53.9693 134.782 38.31 137.272 27.1219 129.111ZM116.407 93.9948C124.536 105.228 122.056 120.95 110.868 129.111C99.6798 137.272 84.0203 134.782 75.892 123.549C67.7632 112.316 66.8634 82.8374 72.8299 78.4853C79.5532 73.5812 108.279 82.7617 116.407 93.9948ZM1.23201 49.2779C5.50549 36.0729 19.6319 28.8462 32.7844 33.1368C45.9368 37.4274 66.8634 64.8158 62.0982 72.2607C57.1708 79.959 30.4611 85.2475 17.3087 80.9568C4.15631 76.6662 -3.04147 62.4834 1.23201 49.2779ZM105.107 33.1368C118.26 28.8462 132.386 36.0729 136.66 49.2779C140.933 62.4834 133.735 76.6662 120.583 80.9568C107.43 85.2475 77.2813 76.4227 75.892 72.2607C72.8299 63.0873 91.955 37.4274 105.107 33.1368Z\\\"', \\n            '             fill=\\\"white\\\" />', \\n            '         <circle cx=\\\"68.283\\\" cy=\\\"72.261\\\" r=\\\"25.8548\\\" fill=\\\"#FDFFBC\\\" />', \\n            '         <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\"', \\n            '             d=\\\"M861.953 845.744C850.932 854.097 835.198 851.899 826.811 840.833C818.424 829.768 819.097 796.897 822.802 794.089C826.506 791.281 858.336 799.517 866.723 810.583C875.11 821.648 872.974 837.39 861.953 845.744ZM817.303 717.58C831.149 717.326 842.622 728.357 842.929 742.22C843.237 756.082 821.766 781.372 816.211 781.932C810.554 779.888 793.095 757.001 792.788 743.139C792.481 729.277 803.457 717.834 817.303 717.58ZM767.358 799.498C754.095 795.456 746.574 781.428 750.561 768.166C754.548 754.904 768.532 747.429 781.795 751.471C795.058 755.514 813.582 778.463 811.456 785.536C809.06 793.505 780.621 803.541 767.358 799.498ZM886.158 765.564C890.729 778.669 883.836 792.962 870.763 797.487C857.689 802.012 824.468 792.826 823.768 784.014C823.045 774.902 841.137 754.554 854.211 750.029C867.284 745.504 881.587 752.459 886.158 765.564ZM813.125 841.173C805.234 852.537 789.611 855.311 778.229 847.369C766.847 839.426 764.016 823.775 771.906 812.411C779.796 801.047 809.154 789.868 812.775 792.346C820.757 797.807 821.015 829.809 813.125 841.173Z\\\"', \\n            '             fill=\\\"white\\\" />', \\n            '         <circle cx=\\\"818.839\\\" cy=\\\"787.75\\\" r=\\\"25.8548\\\" transform=\\\"rotate(142.84 818.839 787.75)\\\" fill=\\\"#FDFFBC\\\" />', \\n            '     </g>'\\n        ));\\n      }\\n}\",\"keccak256\":\"0x570ef3049eb669bc054d009a6263daf0417d5cf0aa2830489a6aa843f780658f\",\"license\":\"MIT\"},\"contracts/SockBackground/AdditionalBackgrounds/LeavesBackground.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\nlibrary LeavesBackground  {\\n      function background(string memory backgroundColor) public pure returns(string memory){\\n        return  string(abi.encodePacked(\\n            '<rect width=\\\"1080\\\" height=\\\"1080\\\" '\\n            ' fill=\\\"',backgroundColor,'\\\"',\\n            ' />',\\n            '     <g transform=\\\"translate(-140,-260)\\\">', \\n            '         <path', \\n            '             d=\\\"M361.609 834.4C113.609 788.8 69.9421 657.733 79.1088 597.9V537.9C79.1088 508.067 111.209 461.4 239.609 513.4C368.009 565.4 374.442 749.067 361.609 834.4Z\\\"', \\n            '             fill=\\\"#A5F7C6\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" />', \\n            '         <path d=\\\"M362.5 833.5C334.5 760.167 239.2 605.2 82 572\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" fill-opacity=\\\"0\\\" />', \\n            '         <path', \\n            '             d=\\\"M361.534 547.349C110.067 565.995 34.6525 450.245 28.3788 390.04L13.1947 331.993C5.6448 303.131 24.89 249.859 162.27 267.673C299.65 285.486 352.354 461.546 361.534 547.349Z\\\"', \\n            '             fill=\\\"#A5F7C6\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" />', \\n            '         <path d=\\\"M362.168 546.253C316.521 482.393 185.106 356.588 24.6216 364.251\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\"', \\n            '             fill-opacity=\\\"0\\\" />', \\n            '         <path', \\n            '             d=\\\"M316.844 414.967C94.9138 295.257 93.7028 157.113 120.839 103.004L139.304 45.9164C148.485 17.531 193.389 -16.9918 299.554 72.0001C405.719 160.992 355.316 337.724 316.844 414.967Z\\\"', \\n            '             fill=\\\"#A5F7C6\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" />', \\n            '         <path d=\\\"M317.968 414.384C313.896 335.993 270.913 159.219 131.56 79.251\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\"', \\n            '             fill-opacity=\\\"0\\\" />', \\n            '         <path', \\n            '             d=\\\"M421.931 463.847C292.298 247.563 361.828 128.186 412.797 95.5332L457.834 55.8894C480.228 36.1776 536.467 29.4386 582.272 160.177C628.077 290.915 494.463 417.098 421.931 463.847Z\\\"', \\n            '             fill=\\\"#A5F7C6\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" />', \\n            '         <path d=\\\"M423.195 463.921C459.74 394.45 513.094 220.525 434.148 80.5903\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\"', \\n            '             fill-opacity=\\\"0\\\" />', \\n            '         <path', \\n            '             d=\\\"M1097.45 939.763C1337.87 1015.8 1364.93 1151.27 1348.4 1209.5L1340.95 1269.04C1337.25 1298.64 1299.61 1340.96 1178.65 1273.43C1057.7 1205.89 1074.12 1022.84 1097.45 939.763Z\\\"', \\n            '             fill=\\\"#A5F7C6\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" />', \\n            '         <path d=\\\"M1096.45 940.545C1115.13 1016.79 1190.46 1182.39 1342.32 1234.84\\\" stroke=\\\"white\\\" fill-opacity=\\\"0\\\"', \\n            '             stroke-width=\\\"2\\\" />', \\n            '         <path', \\n            '             d=\\\"M951.379 1117.05C1203.17 1103.52 1276.22 1220.78 1281.27 1281.1L1295.27 1339.45C1302.23 1368.46 1281.9 1421.32 1144.91 1400.72C1007.92 1380.12 958.811 1203.02 951.379 1117.05Z\\\"', \\n            '             fill=\\\"#A5F7C6\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" />', \\n            '         <path d=\\\"M950.722 1118.13C995.061 1182.91 1123.89 1311.36 1284.5 1306.96\\\" stroke=\\\"white\\\" fill-opacity=\\\"0\\\"', \\n            '             stroke-width=\\\"2\\\" />', \\n            '     </g>'\\n        ));\\n      }\\n}\",\"keccak256\":\"0x9e7b1099f096471e62dbe85ef17a825cb4db033592a566c4e4b1a1534c0f22aa\",\"license\":\"MIT\"},\"contracts/SockBackground/AdditionalBackgrounds/PillowBackground.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\nlibrary PillowBackground  {\\n      function background(string memory backgroundColor) public pure returns(string memory){\\n        return  string(abi.encodePacked(\\n            '<rect width=\\\"1080\\\" height=\\\"1080\\\" '\\n            ' fill=\\\"',backgroundColor,'\\\"',\\n            ' />',\\n            '     <g transform=\\\"translate(-800,-500)\\\">', \\n            '         <path d=\\\" M1222.76 840.56C1201.95 876.491 1159.78 939.711 1157.68 905.141C1156.71 889.119 1153.92 880.59 1149.1', \\n            '             877.937C1146.7 878.039 1143.92 878.048 1140.92 877.928C1132.6 881.021 1121.07 891.81 1105.94 907.315C1072.66', \\n            '             941.412 1094.33 980.187 1041.65 1001.01C1006.22 1015.01 953.564 1041.33 934.676 1060.04C936.394 1067.48 937.024', \\n            '             1074.41 936.972 1079.66C975.716 1089.45 847.017 1176.73 811.562 1159.08C776.107 1141.44 767.058 1222.41 701.087', \\n            '             1214.4C635.115 1206.38 601.825 1290.29 569.345 1195.68C536.865 1101.07 471.767 1117.42 457.802 1051.57C443.836', \\n            '             985.716 401.408 949.297 385.39 991.578C367.675 985.284 327.987 952.23 310.957 870.359C293.928 788.489 215.06', \\n            '             753.118 177.754 745.667C149.197 744.892 97.1284 732.418 117.312 688.717C142.542 634.092 231.402 624.923 250.409', \\n            '             563.872C269.417 502.821 288.48 408.721 345.399 379.747C402.318 350.773 459.884 350.432 451.835 319.941C445.395', \\n            '             295.549 528.675 261.611 571.121 247.691C627.626 237.898 746.608 203.005 770.489 141.779C800.339 65.2466 889.068', \\n            '             93.8699 901.708 133.923C914.348 173.975 934.003 279.45 989.291 253.613C1044.58 227.776 1101.37 324.675 1081.34', \\n            '             370.845C1061.31 417.015 1155.35 499.015 1187.77 488.782C1220.19 478.549 1251.6 551.479 1237.89 577.826C1224.19', \\n            '             604.172 1324.41 596.135 1321.07 637.038C1317.72 677.941 1344.97 734.358 1310.68 751.993C1283.26 766.101 1240.64', \\n            '             816.916 1222.76 840.56Z\\\" fill=\\\"#E8C2FF\\\" />', \\n            '         <path', \\n            '             d=\\\"M936.972 1079.66C898.228 1069.86 988.978 1021.82 1041.65 1001.01C1094.33 980.187 1072.66 941.412 1105.94 907.315C1126.88 885.86 1140.91 873.435 1149.1 877.937M936.972 1079.66C975.716 1089.45 847.017 1176.73 811.562 1159.08M936.972 1079.66C937.154 1061.22 928.938 1022.07 894.622 1013.02M811.562 1159.08C776.107 1141.44 767.058 1222.41 701.087 1214.4M811.562 1159.08L776.964 1102.05M701.087 1214.4C635.115 1206.38 601.825 1290.29 569.345 1195.68C536.865 1101.07 471.767 1117.42 457.802 1051.57C443.836 985.716 401.408 949.297 385.39 991.578C367.675 985.284 327.987 952.23 310.957 870.359C293.928 788.489 215.06 753.118 177.754 745.667C149.197 744.892 97.1285 732.418 117.312 688.717C142.542 634.092 231.402 624.923 250.409 563.872C269.417 502.821 288.48 408.721 345.399 379.747C402.318 350.773 459.884 350.432 451.835 319.941C445.395 295.549 528.675 261.611 571.121 247.691C627.626 237.898 746.608 203.005 770.489 141.779C800.339 65.2466 889.068 93.8699 901.708 133.923C914.348 173.975 934.003 279.45 989.291 253.613C1044.58 227.776 1101.37 324.675 1081.34 370.845C1061.31 417.015 1155.35 499.015 1187.77 488.782C1220.19 478.549 1251.6 551.479 1237.89 577.826C1224.19 604.172 1324.41 596.135 1321.07 637.038C1317.72 677.941 1344.97 734.358 1310.68 751.993C1283.26 766.101 1240.64 816.916 1222.76 840.56C1201.95 876.491 1159.78 939.711 1157.68 905.141C1156.71 889.119 1153.92 880.59 1149.1 877.937M701.087 1214.4L705.756 1124.53M1149.1 877.937C1131.85 878.67 1095.61 874.605 1088.63 852.481\\\"', \\n            '             stroke=\\\"#B794CC\\\" fill-opacity=\\\"0\\\" stroke-width=\\\"8\\\" />', \\n            '         <path', \\n            '             d=\\\"M718.994 1037.83C715.45 1054.01 697.362 1097.64 653.361 1142.75C598.361 1199.14 578.093 1027.62 608.369 1012.14C513.886 950.477 370.7 839.373 334.731 706.437C305.575 708.615 242.779 708.897 224.844 692.602C206.91 676.307 289.626 630.936 333.225 610.288C376.556 445.847 642.56 301.577 766.117 280.205C787.731 244.585 835.483 179.281 853.575 203.027C871.667 226.773 863.875 279.808 857.718 303.356C946.532 360.094 1080.35 491.531 1119.94 622.372C1156.02 637.427 1222.95 675.523 1202.03 707.467C1181.12 739.411 1131.76 736.57 1109.7 731.157C1044.54 833.164 905.6 989.385 718.994 1037.83Z\\\"', \\n            '             fill=\\\"#FFD6F1\\\" />', \\n            '         <path', \\n            '             d=\\\"M666.915 1048.26C684.656 1045.75 702.022 1042.24 718.994 1037.83M718.994 1037.83C715.45 1054.01 697.362 1097.64 653.361 1142.75C598.361 1199.14 578.093 1027.62 608.369 1012.14C513.886 950.477 370.7 839.373 334.731 706.437M718.994 1037.83C905.6 989.385 1044.54 833.164 1109.7 731.157M1109.7 731.157C1131.76 736.57 1181.12 739.411 1202.03 707.467C1222.95 675.523 1156.02 637.427 1119.94 622.372C1080.35 491.531 946.532 360.094 857.718 303.356M1109.7 731.157C1116.33 721.026 1119.03 706.583 1119.55 700.628M857.718 303.356C842.363 293.548 828.354 285.971 816.41 281.017C805.497 276.49 788.052 276.411 766.117 280.205M857.718 303.356C863.875 279.808 871.667 226.773 853.575 203.027C835.483 179.281 787.731 244.585 766.117 280.205M766.117 280.205C642.56 301.577 376.556 445.847 333.225 610.288M334.731 706.437C332.473 698.092 330.638 689.661 329.263 681.151C325.415 657.32 327.082 633.601 333.225 610.288M334.731 706.437C305.575 708.615 242.779 708.897 224.844 692.602C206.91 676.307 289.626 630.936 333.225 610.288\\\"', \\n            '             stroke=\\\"#E1BDCA\\\" fill-opacity=\\\"0\\\" stroke-width=\\\"8\\\" />', \\n            '     </g>'\\n        ));\\n      }\\n}\",\"keccak256\":\"0xfc72f277e720524fb1e7e0dfa6d928a9cbb80f50b2e277bf21abdb53dcca3a53\",\"license\":\"MIT\"},\"contracts/SockBackground/AdditionalBackgrounds/RugBackground.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\nlibrary RugBackground  {\\n      function background(string memory backgroundColor) public pure returns(string memory){\\n        return  string(abi.encodePacked(\\n            '<rect width=\\\"1080\\\" height=\\\"1080\\\" '\\n            ' fill=\\\"',backgroundColor,'\\\"',\\n            ' />',\\n            '     <g transform=\\\"translate(470,0)\\\">', \\n            '         <path', \\n            '             d=\\\"M514.609 575.5C505.009 625.9 585.109 651.5 597.609 600H607.109V4H7.10938C-5.69061 34 24.1094 47.5 40.6094 50.5C6.20935 107.7 54.9427 126.333 83.6094 128.5C58.0094 170.9 85.9427 189.167 103.109 193C90.3094 234.6 121.443 241 138.609 239C127.009 307.4 182.443 329.5 211.609 332C207.209 394.8 265.443 408.5 295.109 407.5C312.709 467.9 359.443 462 380.609 451.5C361.409 504.3 404.943 525.5 429.109 529.5C444.709 589.9 492.609 585.333 514.609 575.5Z\\\"', \\n            '             fill=\\\"#FFD6F1\\\" />', \\n            '         <path', \\n            '             d=\\\"M166.5 58.5C166.5 36 228.5 40 228.5 71C238.297 61.6667 261.613 50.6 276.5 81M429.109 239C431.24 223.667 444.9 198.4 482.5 220C493.5 203.5 521.9 180.4 547.5 220M597.609 600C585.109 651.5 505.009 625.9 514.609 575.5C492.609 585.333 444.709 589.9 429.109 529.5C404.943 525.5 361.409 504.3 380.609 451.5C359.443 462 312.709 467.9 295.109 407.5C265.443 408.5 207.209 394.8 211.609 332C182.443 329.5 127.009 307.4 138.609 239C121.443 241 90.3094 234.6 103.109 193C85.9427 189.167 58.0094 170.9 83.6094 128.5C54.9427 126.333 6.20937 107.7 40.6094 50.5C24.1094 47.5 -5.69063 34 7.10938 4H607.109V600H597.609Z\\\"', \\n            '             stroke=\\\"#FDA2F4\\\" fill-opacity=\\\"0\\\" stroke-width=\\\"8\\\" />', \\n            '     </g>'\\n        ));\\n      }\\n}\",\"keccak256\":\"0x6bebba4a470bd3b133209b0fb11fb587ebee13566879c2ddb4ba1b8200e4ad76\",\"license\":\"MIT\"},\"contracts/SockBackground/AdditionalBackgrounds/WaterBackground.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\nlibrary WaterBackground  {\\n      function background(string memory backgroundColor) public pure returns(string memory){\\n        return  string(abi.encodePacked(\\n             '<rect width=\\\"1080\\\" height=\\\"1080\\\" '\\n            ' fill=\\\"',backgroundColor,'\\\"',\\n            ' />',\\n            '     <g>', \\n            '         <g filter=\\\"url(#filter0_d_33_140)\\\">', \\n            '             <path', \\n            '                 d=\\\"M360.5 397C256.9 597 79.6667 570.667 4 532.5V0H826.5C837.167 8.66667 845.8 53.6 795 164C731.5 302 490 147 360.5 397Z\\\"', \\n            '                 fill=\\\"#98C1FF\\\" fill-opacity=\\\"0.8\\\" />', \\n            '             <circle cx=\\\"896.5\\\" cy=\\\"141.5\\\" r=\\\"43.5\\\" fill=\\\"#98C1FF\\\" fill-opacity=\\\"0.5\\\" />', \\n            '             <circle cx=\\\"64.5\\\" cy=\\\"608.5\\\" r=\\\"21.5\\\" fill=\\\"#98C1FF\\\" fill-opacity=\\\"0.5\\\" />', \\n            '             <circle cx=\\\"961.5\\\" cy=\\\"76.5\\\" r=\\\"21.5\\\" fill=\\\"#98C1FF\\\" fill-opacity=\\\"0.5\\\" />', \\n            '         </g>', \\n            '         <defs>', \\n            '             <filter id=\\\"filter0_d_33_140\\\" x=\\\"0\\\" y=\\\"0\\\" width=\\\"987\\\" height=\\\"638\\\" filterUnits=\\\"userSpaceOnUse\\\"', \\n            '                 color-interpolation-filters=\\\"sRGB\\\">', \\n            '                 <feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\" />', \\n            '                 <feColorMatrix in=\\\"SourceAlpha\\\" type=\\\"matrix\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\"', \\n            '                     result=\\\"hardAlpha\\\" />', \\n            '                 <feOffset dy=\\\"4\\\" />', \\n            '                 <feGaussianBlur stdDeviation=\\\"2\\\" />', \\n            '                 <feComposite in2=\\\"hardAlpha\\\" operator=\\\"out\\\" />', \\n            '                 <feColorMatrix type=\\\"matrix\\\" values=\\\"0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.25 0\\\" />', \\n            '                 <feBlend mode=\\\"normal\\\" in2=\\\"BackgroundImageFix\\\" result=\\\"effect1_dropShadow_33_140\\\" />', \\n            '                 <feBlend mode=\\\"normal\\\" in=\\\"SourceGraphic\\\" in2=\\\"effect1_dropShadow_33_140\\\" result=\\\"shape\\\" />', \\n            '             </filter>', \\n            '         </defs>', \\n            '     </g>'\\n        ));\\n      }\\n}\",\"keccak256\":\"0xfb88005d52cdd34a4bb841bcda40593c86bbede43ad17aae38f368904cf1755d\",\"license\":\"MIT\"},\"contracts/SockBackground/BackgroundLibrary.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"./AdditionalBackgrounds/FlowerBackground.sol\\\";\\nimport \\\"./AdditionalBackgrounds/LeavesBackground.sol\\\";\\nimport \\\"./AdditionalBackgrounds/PillowBackground.sol\\\";\\nimport \\\"./AdditionalBackgrounds/RugBackground.sol\\\";\\nimport \\\"./AdditionalBackgrounds/WaterBackground.sol\\\";\\n\\nlibrary BackgroundLibrary {\\n     function GetBackgroundColor(uint256 colorInt) public pure returns(string memory){ \\n       if(colorInt == 0 ) {\\n            // WHITE\\n           return \\\"#F5F5F5\\\";\\n       }\\n       else if (colorInt == 1) {\\n            // GRAY\\n            return \\\"#DCDCDC\\\";\\n       }\\n       else if(colorInt == 2) {\\n          //Orange\\n          return\\\"#FDB0B0\\\";\\n       } \\n       else if(colorInt == 3) {\\n         //Pink\\n         return \\\"#FFD6F1\\\";\\n       }\\n       else if(colorInt == 4) {\\n         //YELLOW\\n         return \\\"#FCDFB4\\\";\\n       }\\n       else if(colorInt == 5) {\\n         //BRIGHT YELLOW\\n         return \\\"#FDFFBC\\\";\\n       }\\n       else if(colorInt == 6) {\\n         //Green\\n         return \\\"#A5F7C6\\\";\\n       }\\n       else if(colorInt == 7) {\\n         //Blue\\n         return \\\"#D6E4FF\\\";\\n       }\\n       else if(colorInt == 8) {\\n         //Dark Blue\\n         return \\\"#A5BCF7\\\";\\n       }\\n       else if(colorInt == 9) {\\n         //Dark PinK\\n         return \\\"#E8C2FF\\\";\\n       }\\n       else {\\n         // Black\\n         return\\\"#282828\\\";\\n       }\\n     }\\n\\n     function GetBackground(uint256 backgroundType,string memory backgroundColor) public pure returns(string memory){   \\n      // NATURAL WOOD\\n      if (backgroundType == 10) {\\n        return string(abi.encodePacked(\\n              '<g clip-path=\\\"url(#clip0_104_1281)\\\">', \\n              '<rect width=\\\"1080\\\" height=\\\"1080\\\" fill=\\\"#FCDFB4\\\"/>', \\n              '<rect x=\\\"-24\\\" y=\\\"90\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#FCDFB4\\\" stroke=\\\"#D2B17F\\\" stroke-width=\\\"4\\\"/>', \\n              '<rect x=\\\"-297\\\" y=\\\"729\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#FCDFB4\\\" stroke=\\\"#D2B17F\\\" stroke-width=\\\"4\\\"/>', \\n              '<rect x=\\\"836\\\" y=\\\"730\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#FCDFB4\\\" stroke=\\\"#D2B17F\\\" stroke-width=\\\"4\\\"/>', \\n              '<rect x=\\\"289\\\" y=\\\"304\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#FCDFB4\\\" stroke=\\\"#D2B17F\\\" stroke-width=\\\"4\\\"/>', \\n              '<rect x=\\\"-848\\\" y=\\\"304\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#FCDFB4\\\" stroke=\\\"#D2B17F\\\" stroke-width=\\\"4\\\"/>', \\n              '<rect x=\\\"-24\\\" y=\\\"943\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#FCDFB4\\\" stroke=\\\"#D2B17F\\\" stroke-width=\\\"4\\\"/>', \\n              '<rect x=\\\"-21\\\" y=\\\"517\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#FCDFB4\\\" stroke=\\\"#D2B17F\\\" stroke-width=\\\"4\\\"/>', \\n              '<circle cx=\\\"250.5\\\" cy=\\\"330.5\\\" r=\\\"9.5\\\" fill=\\\"#C5B093\\\"/>', \\n              '<circle cx=\\\"323.5\\\" cy=\\\"330.5\\\" r=\\\"9.5\\\" fill=\\\"#C5B093\\\"/>', \\n              '<circle cx=\\\"863.5\\\" cy=\\\"755.5\\\" r=\\\"9.5\\\" fill=\\\"#C5B093\\\"/>', \\n              '<circle cx=\\\"798.5\\\" cy=\\\"755.5\\\" r=\\\"9.5\\\" fill=\\\"#C5B093\\\"/>', \\n              '<circle cx=\\\"1059.5\\\" cy=\\\"115.5\\\" r=\\\"9.5\\\" fill=\\\"#C5B093\\\"/>', \\n              '<circle cx=\\\"250.5\\\" cy=\\\"485.5\\\" r=\\\"9.5\\\" fill=\\\"#C5B093\\\"/>', \\n              '<circle cx=\\\"323.5\\\" cy=\\\"485.5\\\" r=\\\"9.5\\\" fill=\\\"#C5B093\\\"/>', \\n              '<circle cx=\\\"863.5\\\" cy=\\\"910.5\\\" r=\\\"9.5\\\" fill=\\\"#C5B093\\\"/>', \\n              '<circle cx=\\\"798.5\\\" cy=\\\"910.5\\\" r=\\\"9.5\\\" fill=\\\"#C5B093\\\"/>', \\n              '<circle cx=\\\"1059.5\\\" cy=\\\"270.5\\\" r=\\\"9.5\\\" fill=\\\"#C5B093\\\"/>', \\n              '<rect x=\\\"-24\\\" y=\\\"-124\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#FCDFB4\\\" stroke=\\\"#D2B17F\\\" stroke-width=\\\"4\\\"/>', \\n              '</g>', \\n              '<defs>', \\n              '<clipPath id=\\\"clip0_104_1281\\\">', \\n              '<rect width=\\\"1080\\\" height=\\\"1080\\\" fill=\\\"white\\\"/>', \\n              '</clipPath>', \\n              '</defs>'\\n        ));\\n     }\\n      else if (backgroundType == 15) {\\n        //Grey Wood\\n        return string(abi.encodePacked(\\n            '<g clip-path=\\\"url(#clip0_104_1261)\\\">', \\n            '<rect width=\\\"1080\\\" height=\\\"1080\\\" fill=\\\"#818181\\\"/>', \\n            '<rect x=\\\"-24\\\" y=\\\"90\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#818181\\\" stroke=\\\"#DCDCDC\\\" stroke-width=\\\"4\\\"/>', \\n            '<rect x=\\\"-297\\\" y=\\\"729\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#818181\\\" stroke=\\\"#DCDCDC\\\" stroke-width=\\\"4\\\"/>', \\n            '<rect x=\\\"836\\\" y=\\\"730\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#818181\\\" stroke=\\\"#DCDCDC\\\" stroke-width=\\\"4\\\"/>', \\n            '<rect x=\\\"289\\\" y=\\\"304\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#818181\\\" stroke=\\\"#DCDCDC\\\" stroke-width=\\\"4\\\"/>', \\n            '<rect x=\\\"-848\\\" y=\\\"304\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#818181\\\" stroke=\\\"#DCDCDC\\\" stroke-width=\\\"4\\\"/>', \\n            '<rect x=\\\"-24\\\" y=\\\"943\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#818181\\\" stroke=\\\"#DCDCDC\\\" stroke-width=\\\"4\\\"/>', \\n            '<rect x=\\\"-21\\\" y=\\\"517\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#818181\\\" stroke=\\\"#DCDCDC\\\" stroke-width=\\\"4\\\"/>', \\n            '<circle cx=\\\"250.5\\\" cy=\\\"330.5\\\" r=\\\"9.5\\\" fill=\\\"#D6E4FF\\\"/>', \\n            '<circle cx=\\\"323.5\\\" cy=\\\"330.5\\\" r=\\\"9.5\\\" fill=\\\"#D6E4FF\\\"/>', \\n            '<circle cx=\\\"863.5\\\" cy=\\\"755.5\\\" r=\\\"9.5\\\" fill=\\\"#D6E4FF\\\"/>', \\n            '<circle cx=\\\"798.5\\\" cy=\\\"755.5\\\" r=\\\"9.5\\\" fill=\\\"#D6E4FF\\\"/>', \\n            '<circle cx=\\\"1059.5\\\" cy=\\\"115.5\\\" r=\\\"9.5\\\" fill=\\\"#D6E4FF\\\"/>', \\n            '<circle cx=\\\"250.5\\\" cy=\\\"485.5\\\" r=\\\"9.5\\\" fill=\\\"#D6E4FF\\\"/>', \\n            '<circle cx=\\\"323.5\\\" cy=\\\"485.5\\\" r=\\\"9.5\\\" fill=\\\"#D6E4FF\\\"/>', \\n            '<circle cx=\\\"863.5\\\" cy=\\\"910.5\\\" r=\\\"9.5\\\" fill=\\\"#D6E4FF\\\"/>', \\n            '<circle cx=\\\"798.5\\\" cy=\\\"910.5\\\" r=\\\"9.5\\\" fill=\\\"#D6E4FF\\\"/>', \\n            '<circle cx=\\\"1059.5\\\" cy=\\\"270.5\\\" r=\\\"9.5\\\" fill=\\\"#D6E4FF\\\"/>', \\n            '<rect x=\\\"-13\\\" y=\\\"-123\\\" width=\\\"1128\\\" height=\\\"205\\\" fill=\\\"#818181\\\" stroke=\\\"#DCDCDC\\\" stroke-width=\\\"4\\\"/>', \\n            '</g>', \\n            '<defs>', \\n            '<clipPath id=\\\"clip0_104_1261\\\">', \\n            '<rect width=\\\"1080\\\" height=\\\"1080\\\" fill=\\\"white\\\"/>', \\n            '</clipPath>', \\n            '</defs>'\\n        ));\\n     }\\n        else if (backgroundType == 20) {\\n        return string(abi.encodePacked(\\n          // Basic  Tile\\n            '<g clip-path=\\\"url(#clip0_33_78)\\\">', \\n            '<rect width=\\\"1080\\\" height=\\\"1080\\\" fill=\\\"#DCDCDC\\\"/>', \\n            '<rect x=\\\"106\\\" y=\\\"99\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"1008\\\" y=\\\"99\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"408\\\" y=\\\"99\\\" width=\\\"264\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"-193\\\" y=\\\"99\\\" width=\\\"264\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"711\\\" y=\\\"99\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"110\\\" y=\\\"99\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"106\\\" y=\\\"408\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"1008\\\" y=\\\"408\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"408\\\" y=\\\"408\\\" width=\\\"264\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"-193\\\" y=\\\"408\\\" width=\\\"264\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"711\\\" y=\\\"408\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"110\\\" y=\\\"408\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"106\\\" y=\\\"717\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"106\\\" y=\\\"-211\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"-191\\\" y=\\\"-211\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"1008\\\" y=\\\"-211\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"1008\\\" y=\\\"717\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"408\\\" y=\\\"717\\\" width=\\\"264\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"408\\\" y=\\\"1020\\\" width=\\\"264\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"408\\\" y=\\\"-211\\\" width=\\\"264\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"-193\\\" y=\\\"717\\\" width=\\\"264\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"711\\\" y=\\\"717\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"711\\\" y=\\\"1020\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"1013\\\" y=\\\"1020\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"711\\\" y=\\\"-211\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"110\\\" y=\\\"717\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"110\\\" y=\\\"1020\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '<rect x=\\\"-192\\\" y=\\\"1020\\\" width=\\\"263\\\" height=\\\"263\\\" rx=\\\"12\\\" fill=\\\"#F5F5F5\\\"/>', \\n            '</g>', \\n            '<defs>', \\n            '<clipPath id=\\\"clip0_33_78\\\">', \\n            '<rect width=\\\"1080\\\" height=\\\"1080\\\" fill=\\\"white\\\"/>', \\n            '</clipPath>', \\n            '</defs>'\\n        ));\\n     }\\n     else  if (backgroundType == 25) {\\n          // Cold Alps\\n      return string(abi.encodePacked(\\n            '     <g clip-path=\\\"url(#clip0_437_30)\\\">', \\n            '     <rect width=\\\"1080\\\" height=\\\"1080\\\" fill=\\\"#98C1FF\\\"/>', \\n            '     <path d=\\\"M186.568 389.823L-83.4749 816.49C-95.3412 835.239 -89.7553 860.208 -69.2738 868.742C137.861 955.05 578.622 856.314 784.028 789.583C807.348 782.007 817.344 755.12 805.531 733.635L702.514 546.272C687.432 518.841 648.107 518.584 632.667 545.815L535.545 717.103C520.73 743.231 483.477 744.318 467.163 719.098L253.953 389.489C238.099 364.979 202.179 365.157 186.568 389.823Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M1018.24 333.751L1323.81 887.306C1333.61 905.067 1328.74 927.565 1310.75 936.945C1083.89 1055.25 578.474 923.349 353.972 838.119C332.571 829.994 323.302 805.317 333.2 784.676L455.434 529.776C469.854 499.707 512.575 499.448 527.357 529.34L638.867 754.83C653.108 783.628 693.774 784.734 709.561 756.753L948.386 333.427C963.772 306.155 1003.11 306.337 1018.24 333.751Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M497.986 423.351C478.812 434.63 480.771 449.198 488.76 455.073C478.715 491.73 515.723 488.809 530.87 482.767C546.922 504.922 568.399 491.998 577.131 482.767C615.923 493.643 634.239 468.836 635.725 455.073C642.859 434.529 618.19 425.365 607.786 423.351C591.734 388.305 564.312 408.748 552.607 423.351C529.421 388.305 506.532 408.748 497.986 423.351Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M407.194 800.613C263.129 695.274 54.2008 718.071 -21 751.972V1090H1081V688.101C979.754 688.101 934.1 763.109 923.929 800.613C862.401 714.141 767.358 680.24 610.286 688.101C484.629 694.39 422.535 765.729 407.194 800.613Z\\\" fill=\\\"white\\\" stroke=\\\"#98C1FF\\\" stroke-width=\\\"8\\\"/>', \\n            '     <path d=\\\"M722 935.5C724.4 913.1 752.333 920.5 766 927L783 962.5C761.667 962.833 719.6 957.9 722 935.5Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M783 1014C771.8 1010.8 783.667 992.667 791 978.5H803.5C801.333 995.333 794.2 1017.2 783 1014Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M856 1014C846.4 1012.4 841.333 989.667 840 978.5L848.5 973.5C855 987.667 865.6 1015.6 856 1014Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M297.864 953.731C294.541 922.96 255.864 933.126 236.942 942.055L213.404 990.821C242.942 991.279 301.187 984.503 297.864 953.731Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M213.404 1061.57C228.911 1057.17 212.481 1032.26 202.327 1012.8H185.019C188.019 1035.93 197.896 1065.96 213.404 1061.57Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M112.329 1061.57C125.621 1059.37 132.636 1028.14 134.482 1012.8L122.713 1005.93C113.713 1025.39 99.0365 1063.77 112.329 1061.57Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M773 919.5C755.8 930.7 765.833 945.167 773 951C763.989 987.4 788.912 984.5 802.5 978.5C816.9 1000.5 836.167 987.667 844 978.5C878.8 989.3 890.167 964.667 891.5 951C897.9 930.6 880.833 921.5 871.5 919.5C857.1 884.7 832.5 905 822 919.5C801.2 884.7 780.667 905 773 919.5Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n            '     <path d=\\\"M237.064 954.115C256.87 967.005 245.317 983.655 237.064 990.369C247.44 1032.26 218.742 1028.92 203.096 1022.02C186.514 1047.34 164.329 1032.57 155.309 1022.02C115.238 1034.45 102.149 1006.1 100.614 990.369C93.2443 966.89 112.896 956.417 123.643 954.115C140.225 914.063 168.551 937.426 180.642 954.115C204.593 914.063 228.236 937.426 237.064 954.115Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n            '     <path d=\\\"M370.064 73.1146C389.869 86.005 391.252 102.655 383 109.369C393.375 151.262 351.741 147.925 336.095 141.019C319.514 166.339 297.329 151.569 288.309 141.019C248.237 153.449 235.149 125.098 233.613 109.369C226.244 85.8899 245.896 75.4165 256.643 73.1146C273.224 33.0625 300.409 45.3114 312.5 61.9998C336.45 21.9476 361.236 56.4262 370.064 73.1146Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M871.066 976.964C872.666 962.175 891.296 967.06 900.41 971.352L911.748 994.79C897.52 995.01 869.465 991.753 871.066 976.964Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M911.748 1028.79C904.278 1026.68 912.193 1014.71 917.083 1005.35H925.42C923.975 1016.47 919.218 1030.9 911.748 1028.79Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M960.433 1028.79C954.031 1027.74 950.652 1012.73 949.763 1005.35L955.431 1002.05C959.766 1011.41 966.836 1029.85 960.433 1028.79Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M476.931 893.446C475.261 877.941 455.822 883.063 446.311 887.562L434.48 912.135C449.327 912.366 478.602 908.951 476.931 893.446Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M434.48 947.782C442.275 945.567 434.016 933.016 428.913 923.21H420.214C421.722 934.861 426.686 949.997 434.48 947.782Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M383.678 947.782C390.359 946.675 393.885 930.939 394.813 923.21L388.898 919.749C384.374 929.555 376.997 948.89 383.678 947.782Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M896.367 137.989C881.214 128.073 890.053 115.265 896.367 110.101C888.428 77.8749 910.385 80.4424 922.356 85.7544C935.043 66.2772 952.017 77.6389 958.918 85.7544C989.577 76.1928 999.825 98.0014 1001 110.101C1006.64 128.161 991.368 136.218 983.145 137.989C970.459 168.798 953.75 150.826 944.5 137.989C926.175 168.798 903.121 150.826 896.367 137.989Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M63.9449 274.845C53.1781 281.166 59.4587 289.331 63.9449 292.623C58.3043 313.167 73.9055 311.53 82.4111 308.144C91.4251 320.561 103.486 313.318 108.389 308.144C130.173 314.24 137.288 300.337 138.123 292.623C142.129 281.11 131.446 275.974 125.603 274.845C116.589 255.204 101.19 266.661 94.6176 274.845C81.5974 255.204 68.744 266.661 63.9449 274.845Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M950.945 460.845C940.178 467.166 946.459 475.331 950.945 478.623C945.304 499.167 960.905 497.53 969.411 494.144C978.425 506.561 990.486 499.318 995.389 494.144C1017.17 500.24 1024.29 486.337 1025.12 478.623C1029.13 467.11 1018.45 461.974 1012.6 460.845C1003.59 441.204 988.19 452.661 981.618 460.845C968.597 441.204 955.744 452.661 950.945 460.845Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M445.862 893.42C455.167 899.493 449.739 907.338 445.862 910.501C450.737 930.239 437.255 928.667 429.904 925.413C422.114 937.343 411.692 930.384 407.454 925.413C388.628 931.269 382.479 917.912 381.758 910.501C378.296 899.439 387.528 894.504 392.577 893.42C400.367 874.549 413.675 885.557 419.355 893.42C430.607 874.549 441.715 885.557 445.862 893.42Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n            '     <path d=\\\"M957.862 976.42C967.167 982.493 961.739 990.338 957.862 993.501C962.737 1013.24 949.255 1011.67 941.904 1008.41C934.114 1020.34 923.692 1013.38 919.454 1008.41C900.628 1014.27 894.479 1000.91 893.758 993.501C890.296 982.439 899.528 977.504 904.577 976.42C912.367 957.549 925.675 968.557 931.355 976.42C942.607 957.549 953.715 968.557 957.862 976.42Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n            '     </g>', \\n            '     <defs>', \\n            '     <clipPath id=\\\"clip0_437_30\\\">', \\n            '     <rect width=\\\"1080\\\" height=\\\"1080\\\" fill=\\\"white\\\"/>', \\n            '     </clipPath>', \\n            '     </defs>'\\n      ));\\n     }\\n     else if(backgroundType == 30 ){\\n       // Alps\\n      return  string(abi.encodePacked(            \\n            '     <g clip-path=\\\"url(#clip0_33_53)\\\">', \\n            '     <rect width=\\\"1080\\\" height=\\\"1080\\\" fill=\\\"#98C1FF\\\"/>', \\n            '     <path d=\\\"M186.568 389.823L-83.4749 816.49C-95.3412 835.239 -89.7553 860.208 -69.2738 868.742C137.861 955.05 578.622 856.314 784.028 789.583C807.348 782.007 817.344 755.12 805.531 733.635L702.514 546.272C687.432 518.841 648.107 518.584 632.667 545.815L535.545 717.103C520.73 743.231 483.477 744.318 467.163 719.098L253.953 389.489C238.099 364.979 202.179 365.157 186.568 389.823Z\\\" fill=\\\"#70AE3F\\\"/>', \\n            '     <path d=\\\"M1018.24 333.751L1323.81 887.306C1333.61 905.067 1328.74 927.565 1310.75 936.945C1083.89 1055.25 578.474 923.349 353.972 838.119C332.571 829.994 323.302 805.317 333.2 784.676L455.434 529.776C469.854 499.707 512.575 499.448 527.357 529.34L638.867 754.83C653.108 783.628 693.774 784.734 709.561 756.753L948.386 333.427C963.772 306.155 1003.11 306.337 1018.24 333.751Z\\\" fill=\\\"#70AE3F\\\"/>', \\n            '     <path d=\\\"M497.986 423.351C478.812 434.63 480.771 449.198 488.76 455.073C478.715 491.73 515.723 488.809 530.87 482.767C546.922 504.922 568.399 491.998 577.131 482.767C615.923 493.643 634.239 468.836 635.725 455.073C642.859 434.529 618.19 425.365 607.786 423.351C591.734 388.305 564.312 408.748 552.607 423.351C529.421 388.305 506.532 408.748 497.986 423.351Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M407.194 800.613C263.129 695.274 54.2008 718.071 -21 751.972V1090H1081V688.101C979.754 688.101 934.1 763.109 923.929 800.613C862.401 714.141 767.358 680.24 610.286 688.101C484.629 694.39 422.535 765.729 407.194 800.613Z\\\" fill=\\\"#387607\\\"/>', \\n            '     <path d=\\\"M722 935.5C724.4 913.1 752.333 920.5 766 927L783 962.5C761.667 962.833 719.6 957.9 722 935.5Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M783 1014C771.8 1010.8 783.667 992.667 791 978.5H803.5C801.333 995.333 794.2 1017.2 783 1014Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M856 1014C846.4 1012.4 841.333 989.667 840 978.5L848.5 973.5C855 987.667 865.6 1015.6 856 1014Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M297.864 953.731C294.541 922.96 255.864 933.126 236.942 942.055L213.404 990.821C242.942 991.279 301.187 984.503 297.864 953.731Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M213.404 1061.57C228.911 1057.17 212.481 1032.26 202.327 1012.8H185.019C188.019 1035.93 197.896 1065.96 213.404 1061.57Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M112.329 1061.57C125.621 1059.37 132.636 1028.14 134.482 1012.8L122.713 1005.93C113.713 1025.39 99.0365 1063.77 112.329 1061.57Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M773 919.5C755.8 930.7 765.833 945.167 773 951C763.989 987.4 788.912 984.5 802.5 978.5C816.9 1000.5 836.167 987.667 844 978.5C878.8 989.3 890.167 964.667 891.5 951C897.9 930.6 880.833 921.5 871.5 919.5C857.1 884.7 832.5 905 822 919.5C801.2 884.7 780.667 905 773 919.5Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M237.064 954.115C256.87 967.005 245.317 983.655 237.064 990.369C247.44 1032.26 218.742 1028.92 203.096 1022.02C186.514 1047.34 164.329 1032.57 155.309 1022.02C115.238 1034.45 102.149 1006.1 100.614 990.369C93.2443 966.89 112.896 956.417 123.643 954.115C140.225 914.063 168.551 937.426 180.642 954.115C204.593 914.063 228.236 937.426 237.064 954.115Z\\\" fill=\\\"white\\\" stroke=\\\"white\\\" stroke-width=\\\"8\\\"/>', \\n            '     <path d=\\\"M370.064 73.1149C389.869 86.0052 391.252 102.655 383 109.369C393.375 151.263 351.741 147.925 336.095 141.019C319.514 166.34 297.329 151.569 288.309 141.019C248.237 153.449 235.149 125.098 233.613 109.369C226.244 85.8902 245.896 75.4167 256.643 73.1149C273.224 33.0627 300.409 45.3116 312.5 62C336.45 21.9479 361.236 56.4265 370.064 73.1149Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M871.066 976.964C872.666 962.175 891.296 967.06 900.41 971.352L911.748 994.79C897.52 995.01 869.465 991.753 871.066 976.964Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M911.748 1028.79C904.278 1026.68 912.193 1014.71 917.083 1005.35H925.42C923.975 1016.47 919.218 1030.9 911.748 1028.79Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M960.433 1028.79C954.031 1027.74 950.652 1012.73 949.763 1005.35L955.431 1002.05C959.766 1011.41 966.836 1029.85 960.433 1028.79Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M476.931 893.446C475.261 877.941 455.822 883.063 446.311 887.562L434.48 912.135C449.327 912.366 478.602 908.951 476.931 893.446Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M434.48 947.782C442.275 945.567 434.016 933.016 428.913 923.21H420.214C421.722 934.861 426.686 949.997 434.48 947.782Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M383.678 947.782C390.359 946.675 393.885 930.939 394.813 923.21L388.898 919.749C384.374 929.555 376.997 948.89 383.678 947.782Z\\\" fill=\\\"black\\\"/>', \\n            '     <path d=\\\"M896.367 137.989C881.214 128.073 890.053 115.265 896.367 110.101C888.428 77.8749 910.385 80.4424 922.356 85.7544C935.043 66.2772 952.017 77.6389 958.918 85.7544C989.577 76.1928 999.825 98.0014 1001 110.101C1006.64 128.161 991.368 136.218 983.145 137.989C970.459 168.798 953.75 150.826 944.5 137.989C926.175 168.798 903.121 150.826 896.367 137.989Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M63.9449 274.845C53.1781 281.166 59.4587 289.331 63.9449 292.623C58.3043 313.167 73.9055 311.53 82.4111 308.144C91.4251 320.561 103.486 313.318 108.389 308.144C130.173 314.24 137.288 300.337 138.123 292.623C142.129 281.11 131.446 275.974 125.603 274.845C116.589 255.204 101.19 266.661 94.6176 274.845C81.5974 255.204 68.744 266.661 63.9449 274.845Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M950.945 460.845C940.178 467.166 946.459 475.331 950.945 478.623C945.304 499.167 960.905 497.53 969.411 494.144C978.425 506.561 990.486 499.318 995.389 494.144C1017.17 500.24 1024.29 486.337 1025.12 478.623C1029.13 467.11 1018.45 461.974 1012.6 460.845C1003.59 441.204 988.19 452.661 981.618 460.845C968.597 441.204 955.744 452.661 950.945 460.845Z\\\" fill=\\\"white\\\"/>', \\n            '     <path d=\\\"M445.862 893.42C455.167 899.493 449.739 907.338 445.862 910.501C450.737 930.239 437.255 928.667 429.904 925.413C422.114 937.343 411.692 930.384 407.454 925.413C388.628 931.269 382.479 917.912 381.758 910.501C378.296 899.439 387.528 894.504 392.577 893.42C400.367 874.549 413.675 885.557 419.355 893.42C430.607 874.549 441.715 885.557 445.862 893.42Z\\\" fill=\\\"white\\\" stroke=\\\"white\\\" stroke-width=\\\"8\\\"/>', \\n            '     <path d=\\\"M957.862 976.42C967.167 982.493 961.739 990.338 957.862 993.501C962.737 1013.24 949.255 1011.67 941.904 1008.41C934.114 1020.34 923.692 1013.38 919.454 1008.41C900.628 1014.27 894.479 1000.91 893.758 993.501C890.296 982.439 899.528 977.504 904.577 976.42C912.367 957.549 925.675 968.557 931.355 976.42C942.607 957.549 953.715 968.557 957.862 976.42Z\\\" fill=\\\"white\\\" stroke=\\\"white\\\" stroke-width=\\\"8\\\"/>', \\n            '     </g>', \\n            '     <defs>', \\n            '     <clipPath id=\\\"clip0_33_53\\\">', \\n            '     <rect width=\\\"1080\\\" height=\\\"1080\\\" fill=\\\"white\\\"/>', \\n            '     </clipPath>', \\n            '     </defs>'));\\n     }\\n    else if(backgroundType == 3) {\\n       return FlowerBackground.background(backgroundColor);\\n    }\\n    else if(backgroundType == 6) {\\n       return LeavesBackground.background(backgroundColor);\\n    }\\n     else if(backgroundType == 12) {\\n       return PillowBackground.background(backgroundColor);\\n    }\\n    else if(backgroundType == 18) {\\n       return RugBackground.background(backgroundColor);\\n    }\\n     else if(backgroundType == 24) {\\n       return WaterBackground.background(backgroundColor);\\n    }\\n     else {\\n        return  string(abi.encodePacked(\\n          // Plane\\n          '<rect width=\\\"1080\\\" height=\\\"1080\\\" '\\n          ' fill=\\\"',backgroundColor,'\\\"',\\n          ' />'\\n          ));\\n     } \\n     }\\n    \\n    function BackClip(uint256 backgroundType)  public pure returns(string memory){\\n         if (backgroundType == 25 || backgroundType == 30){\\n           return  string(abi.encodePacked(\\n            '     <path class=\\\"backClip\\\" transform=\\\"translate(-190, -10)\\\"', \\n            '         d=\\\"M761.642 191.423L784.803 24.2317L858.721 20.7567L805.328 204.142L761.642 191.423Z\\\" fill=\\\"#FDA2F4\\\" stroke=\\\"black\\\"', \\n            '         stroke-width=\\\"8\\\" />'\\n            ));\\n         }\\n         return \\\"\\\";\\n    }\\n\\n    function FrontClip(uint256 backgroundType)  public pure returns(string memory){\\n          if (backgroundType == 25 || backgroundType == 30){\\n            return string(abi.encodePacked(\\n                '     <g transform=\\\"translate(-2, 120)\\\">', \\n                '         <path d=\\\"M2 39.0845C228.167 107.918 761.8 212.984 1087 82.5845\\\" fill-opacity=\\\"0\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n                '         <path d=\\\"M746.993 192.52L747.585 23.7335L820.375 10.4036L791.988 199.282L746.993 192.52Z\\\" fill=\\\"#FDA2F4\\\"', \\n                '             stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n                '     </g>'\\n            ));\\n          }\\n         return \\\"\\\";\\n    }\\n} \",\"keccak256\":\"0xd47707a70f6033b13b1bad7f4ea6fb88ac20ed82ef6610732405265b439f4222\",\"license\":\"MIT\"},\"contracts/SockBackground/BackgroundMetadataLibrary.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n//SPDX-License-Identifier: MIT\\n\\nlibrary BackgroundMetadataLibrary {\\n    function GetBackgroundColorMetadata(\\n        uint256 colorInt\\n    ) public pure returns (string memory) {\\n        string\\n            memory colorProperty = '{\\\"trait_type\\\":\\\"Background Color\\\", \\\"value\\\":\\\"';\\n        if (colorInt == 0) {\\n            // WHITE\\n            return string(abi.encodePacked(colorProperty, 'White\\\"}'));\\n        } else if (colorInt == 1) {\\n            // GRAY\\n            return string(abi.encodePacked(colorProperty, 'Gray\\\"}'));\\n        } else if (colorInt == 2) {\\n            //Orange\\n            return string(abi.encodePacked(colorProperty, 'Orange\\\"}'));\\n        } else if (colorInt == 3) {\\n            //Pink\\n            return string(abi.encodePacked(colorProperty, 'Pink\\\"}'));\\n        } else if (colorInt == 4) {\\n            //YELLOW\\n            return string(abi.encodePacked(colorProperty, 'Yellow\\\"}'));\\n        } else if (colorInt == 5) {\\n            //BRIGHT YELLOW\\n            return string(abi.encodePacked(colorProperty, 'Bright Yellow\\\"}'));\\n        } else if (colorInt == 6) {\\n            //Green\\n            return string(abi.encodePacked(colorProperty, 'Green\\\"}'));\\n        } else if (colorInt == 7) {\\n            //Blue\\n            return string(abi.encodePacked(colorProperty, 'Blue\\\"}'));\\n        } else if (colorInt == 8) {\\n            //Dark Blue\\n            return string(abi.encodePacked(colorProperty, 'Dark Blue\\\"}'));\\n        } else if (colorInt == 9) {\\n            //Dark Pink\\n            return string(abi.encodePacked(colorProperty, 'Dark Pink\\\"}'));\\n        } else if (colorInt == 10) {\\n            // Black\\n            return string(abi.encodePacked(colorProperty, 'Black\\\"}'));\\n        }\\n\\n        return string(abi.encodePacked(colorProperty, 'None\\\"}'));\\n    }\\n\\n    function GetBackgroundColorText(\\n        uint256 colorInt\\n    ) public pure returns (string memory) {\\n        if (colorInt == 0) {\\n            // WHITE\\n            return \\\"White\\\";\\n        } else if (colorInt == 1) {\\n            // GRAY\\n            return \\\"Gray\\\";\\n        } else if (colorInt == 2) {\\n            //Orange\\n            return \\\"Orange\\\";\\n        } else if (colorInt == 3) {\\n            //Pink\\n            return \\\"Pink\\\";\\n        } else if (colorInt == 4) {\\n            //YELLOW\\n            return \\\"Yellow\\\";\\n        } else if (colorInt == 5) {\\n            //BRIGHT YELLOW\\n            return \\\"Bright Yellow\\\";\\n        } else if (colorInt == 6) {\\n            //Green\\n            return \\\"Green\\\";\\n        } else if (colorInt == 7) {\\n            //Blue\\n            return \\\"Blue\\\";\\n        } else if (colorInt == 8) {\\n            //Dark Blue\\n            return \\\"Dark Blue\\\";\\n        } else if (colorInt == 9) {\\n            //Dark Pink\\n            return \\\"Dark Pink\\\";\\n        } else if (colorInt == 10) {\\n            // Black\\n            return \\\"Black\\\";\\n        }\\n\\n        return \\\"No\\\";\\n    }\\n\\n    function GetBackgroundTypeMetadata(\\n        uint256 backgroundType\\n    ) public pure returns (string memory) {\\n        string\\n            memory backgroundTypeProperty = '{\\\"trait_type\\\": \\\"Background Type\\\", \\\"value\\\":\\\"';\\n        // NATURAL WOOD\\n        if (backgroundType == 10) {\\n            return\\n                string(\\n                    abi.encodePacked(backgroundTypeProperty, 'Natural Wood\\\"}')\\n                );\\n        } else if (backgroundType == 15) {\\n            //Grey Wood\\n            return\\n                string(abi.encodePacked(backgroundTypeProperty, 'Gray Wood\\\"}'));\\n        } else if (backgroundType == 20) {\\n            // Basic  Tile\\n            return\\n                string(\\n                    abi.encodePacked(backgroundTypeProperty, 'Basic Tile\\\"}')\\n                );\\n        } else if (backgroundType == 25) {\\n            // Cold Alps\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        backgroundTypeProperty,\\n                        'Cold Alps\\\"}',\\n                        ',{\\\"trait_type\\\": \\\"Hanged\\\", \\\"value\\\":\\\"True\\\"}'\\n                    )\\n                );\\n        } else if (backgroundType == 30) {\\n            // Alps\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        backgroundTypeProperty,\\n                        'Alps\\\"}',\\n                        ',{\\\"trait_type\\\": \\\"Hanged\\\", \\\"value\\\":\\\"True\\\"}'\\n                    )\\n                );\\n        } else if (backgroundType == 3) {\\n            return string(abi.encodePacked(backgroundTypeProperty, 'Flower\\\"}'));\\n        } else if (backgroundType == 6) {\\n            return string(abi.encodePacked(backgroundTypeProperty, 'Leaves\\\"}'));\\n        } else if (backgroundType == 12) {\\n            return string(abi.encodePacked(backgroundTypeProperty, 'Pillow\\\"}'));\\n        } else if (backgroundType == 18) {\\n            return string(abi.encodePacked(backgroundTypeProperty, 'Rug\\\"}'));\\n        } else if (backgroundType == 24) {\\n            return string(abi.encodePacked(backgroundTypeProperty, 'Water\\\"}'));\\n        }\\n\\n        return string(abi.encodePacked(backgroundTypeProperty, 'Plain\\\"}'));\\n    }\\n\\n    function GetBackgroundTypeText(\\n        uint256 backgroundType\\n    ) public pure returns (string memory) {\\n        // NATURAL WOOD\\n        if (backgroundType == 10) {\\n            return \\\"Natural Wood\\\";\\n        } else if (backgroundType == 15) {\\n            //Grey Wood\\n            return \\\"Gray Wood\\\";\\n        } else if (backgroundType == 20) {\\n            // Basic  Tile\\n            return \\\"Basic Tile\\\";\\n        } else if (backgroundType == 25) {\\n            // Cold Alps\\n            return \\\"Cold Alps\\\";\\n        } else if (backgroundType == 30) {\\n            // Alps\\n            return \\\"Alps\\\";\\n        } else if (backgroundType == 3) {\\n            return \\\"Flower\\\";\\n        } else if (backgroundType == 6) {\\n            return \\\"Leaves\\\";\\n        } else if (backgroundType == 12) {\\n            return \\\"Pillow\\\";\\n        } else if (backgroundType == 18) {\\n            return \\\"Rug\\\";\\n        } else if (backgroundType == 24) {\\n            return \\\"Water\\\";\\n        }\\n        return \\\"Plain\\\";\\n    }\\n}\\n\",\"keccak256\":\"0xdba78dd74e71e0590aa02da079a96d1e9cbe62e556a629e605d1ba4deab1e263\",\"license\":\"MIT\"},\"contracts/SockLayoutLibrary.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\n// GET LISTED ON OPENSEA: https://testnets.opensea.io/get-listed/step-two\\n\\n// Defining Library\\n\\nlibrary SockLayoutLibrary {\\n    function GetColor(uint256 colorInt) public pure returns(string memory){ \\n       string memory color ; \\n       if(colorInt == 0 ) {\\n            // RED\\n           color = \\\"#EB4545\\\";\\n       }\\n       else if (colorInt == 1) {\\n            // Pink\\n            color = \\\"#FDA2F4\\\";\\n       }\\n       else if(colorInt == 2) {\\n          //Orange\\n          color =\\\"#FF8A01\\\";\\n       } \\n       else if(colorInt == 3) {\\n         //Yellow\\n         color = \\\"#FDED5E\\\";\\n       }\\n       else if(colorInt == 4) {\\n         //Green\\n         color = \\\"#B4E847\\\";\\n       }\\n       else if(colorInt == 5) {\\n         //Dark Green\\n         color = \\\"#70AE3F\\\";\\n       }\\n       else if(colorInt == 6) {\\n         //Blue\\n         color = \\\"#98C1FF\\\";\\n       }\\n       else if(colorInt == 7) {\\n         //Dark Blue\\n         color = \\\"#3E3BD3\\\";\\n       }\\n       else if(colorInt == 8) {\\n         //Purple\\n         color = \\\"#CF81FF\\\";\\n       }\\n       else if(colorInt == 9) {\\n         //Gray\\n         color = \\\"#D9D9D9\\\";\\n       }\\n       else if(colorInt == 10) {\\n         //White\\n         color = \\\"#FFFFFF\\\";\\n       }\\n       else {\\n         // Black\\n         color =\\\"#000000\\\";\\n       }\\n      return color;\\n     }\\n\\n     function GetColorName(uint256 colorInt) public pure returns(string memory){ \\n       string memory color ; \\n       if(colorInt == 0 ) {\\n            // RED\\n           color = \\\"Red\\\";\\n       }\\n       else if (colorInt == 1) {\\n            // Pink\\n            color = \\\"Pink\\\";\\n       }\\n       else if(colorInt == 2) {\\n          //Orange\\n          color =\\\"Orange\\\";\\n       } \\n       else if(colorInt == 3) {\\n         //Yellow\\n         color = \\\"Yellow\\\";\\n       }\\n       else if(colorInt == 4) {\\n         //Green\\n         color = \\\"Green\\\";\\n       }\\n       else if(colorInt == 5) {\\n         //Dark Green\\n         color = \\\"Dark Green\\\";\\n       }\\n       else if(colorInt == 6) {\\n         //Blue\\n         color = \\\"Blue\\\";\\n       }\\n       else if(colorInt == 7) {\\n         //Dark Blue\\n         color = \\\"Dark Blue\\\";\\n       }\\n       else if(colorInt == 8) {\\n         //Purple\\n         color = \\\"Purple\\\";\\n       }\\n       else if(colorInt == 9) {\\n         //Gray\\n         color = \\\"Gray\\\";\\n       }\\n       else if(colorInt == 10) {\\n         //White\\n         color = \\\"White\\\";\\n       }\\n       else {\\n         // Black\\n         color =\\\"Black\\\";\\n       }\\n      return color;\\n     }\\n\\n      function GetLayoutMetadata(uint256 towAndHeelColor, uint256 cuffColor,  uint256 color) public pure returns(string memory){ \\n         return string(abi.encodePacked(\\n          '{\\\"trait_type\\\": \\\"Tow Color\\\", \\\"value\\\":\\\"',\\n           GetColorName(towAndHeelColor),\\n          '\\\"},',\\n          '{\\\"trait_type\\\": \\\"Cuff Color\\\", \\\"value\\\":\\\"',\\n           GetColorName(cuffColor),\\n          '\\\"},',\\n           '{\\\"trait_type\\\": \\\"Color\\\", \\\"value\\\":\\\"',\\n           GetColorName(color),\\n          '\\\"}'\\n          ));\\n     }\\n\\n    function GetLayout(string memory towAndHeelColor , string memory cuffColor, string memory color) public pure returns(string memory){\\n      string memory sockLayout;\\n      sockLayout =  string(abi.encodePacked(\\n            '<g transform=\\\"translate(-140 -100)\\\">', \\n            '   <path', \\n            '        d=\\\"M785.9 275.626C725.097 247.898 669.212 239.882 661.077 257.721L611.495 366.449C635.241 404.755 712.524 478.465 831.681 466.859L881.263 358.13C889.398 340.292 846.702 303.353 785.9 275.626Z\\\"', \\n            '     ', \\n            '   fill=\\\"', cuffColor, '\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />'\\n      ));\\n       sockLayout = string(abi.encodePacked(\\n             sockLayout,\\n            '    ', \\n            '  <path', \\n            '      d=\\\"M881.497 358.237C873.362 376.076 817.477 368.06 756.674 340.332C695.871 312.605 653.176 275.666 661.311 257.827C669.445 239.989 725.33 248.005 786.133 275.732C846.936 303.46 889.632 340.398 881.497 358.237Z\\\"', \\n            '            fill=\\\"black\\\" />', \\n            '  <path', \\n            '      d=\\\"M168.509 667.263C175.832 606.857 230.421 582.109 256.8 577.286C290.206 612.486 334.446 699.85 244.153 767.703C232.038 760.529 159.354 742.771 168.509 667.263Z\\\"', \\n            '     ', \\n            ' fill=\\\"',towAndHeelColor,'\\\"  stroke=\\\"black\\\" stroke-width=\\\"8\\\" />'\\n            '     '\\n            ));\\n         sockLayout = string(abi.encodePacked(\\n            sockLayout,\\n            ' <path', \\n            '   d=\\\"M604.34 791.275C737.081 797.037 736.069 677.143 736.069 677.143C698.338 671.111 619.168 685.492 604.34 791.275Z\\\"', \\n            '   fill=\\\"', towAndHeelColor,'\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            ' <path', \\n            '    d=\\\"M256.592 577.74L474.708 564.611C504.256 562.832 530.407 544.882 542.689 517.949L611.728 366.555C635.475 404.861 712.757 478.571 831.914 466.965L735.861 677.597C698.13 671.565 618.96 685.946 604.133 791.729C471.392 785.967 253.638 773.896 243.946 768.157C334.238 700.305 289.999 612.941 256.592 577.74Z\\\"', \\n            ' fill=\\\"',color ,'\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" /> ', \\n            '</g>'\\n      ));\\n      return sockLayout;\\n    }\\n}\\n\",\"keccak256\":\"0x882a29eade762206403eceef605c7eb56ca90b0e3cd06062c7b7c9c086b42c7c\",\"license\":\"MIT\"},\"contracts/SockPattern/PatternLibrary.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"./Patterns/BonePattern.sol\\\";\\nimport \\\"./Patterns/ChilliPattern.sol\\\";\\nimport \\\"./Patterns/CloudPattern.sol\\\";\\nimport \\\"./Patterns/FirePattern.sol\\\";\\nimport \\\"./Patterns/HeartBreakPattern.sol\\\";\\nimport \\\"./Patterns/HeartPattern.sol\\\";\\nimport \\\"./Patterns/LemonPattern.sol\\\";\\nimport \\\"./Patterns/LightingPattern.sol\\\";\\nimport \\\"./Patterns/MultiplePattern.sol\\\";\\nimport \\\"./Patterns/StarPattern.sol\\\";\\nimport \\\"./Patterns/StripePattern.sol\\\";\\nimport \\\"./Patterns/UfoPattern.sol\\\";\\n\\nlibrary PatternLibrary {\\n\\n    function GetPattern(uint256 currentPattern) public pure returns(string memory){\\n      if (currentPattern == 0) {\\n         return BonePattern.pattern();\\n      }\\n      else if (currentPattern == 1) {\\n         return ChilliPattern.pattern();\\n      }\\n      else if (currentPattern == 2) {\\n         return CloudPattern.pattern();\\n      }\\n      else if(currentPattern == 3) {\\n        return FirePattern.pattern();\\n      }\\n      else if(currentPattern == 4){\\n         return HeartBreakPattern.pattern();\\n      }\\n      else if(currentPattern == 5) {\\n          return HeartPattern.pattern();\\n      }\\n      else if(currentPattern == 6){\\n         return LemonPattern.pattern();\\n      }\\n      else if(currentPattern == 7){\\n        return LightingPattern.pattern();\\n      }\\n      else if(currentPattern == 8){\\n        return MultiplePattern.pattern();\\n      }\\n      else if(currentPattern == 9) {\\n        return StarPattern.pattern();\\n      }\\n      else if((currentPattern == 10)) {\\n        return StripePattern.pattern();\\n      }\\n      else if(currentPattern == 11){\\n        return  UfoPattern.pattern();\\n      }\\n      else {\\n         return \\\"\\\";\\n      }\\n    }\\n}\\n\",\"keccak256\":\"0xbd04d84e438f6eab6f3669649c862b516f3e2559b9cd86dc7ebab1a25285ae7b\",\"license\":\"MIT\"},\"contracts/SockPattern/PatternMetadataLibrary.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"./Patterns/BonePattern.sol\\\";\\nimport \\\"./Patterns/ChilliPattern.sol\\\";\\nimport \\\"./Patterns/CloudPattern.sol\\\";\\nimport \\\"./Patterns/FirePattern.sol\\\";\\nimport \\\"./Patterns/HeartBreakPattern.sol\\\";\\nimport \\\"./Patterns/HeartPattern.sol\\\";\\nimport \\\"./Patterns/LemonPattern.sol\\\";\\nimport \\\"./Patterns/LightingPattern.sol\\\";\\nimport \\\"./Patterns/MultiplePattern.sol\\\";\\nimport \\\"./Patterns/StarPattern.sol\\\";\\nimport \\\"./Patterns/StripePattern.sol\\\";\\nimport \\\"./Patterns/UfoPattern.sol\\\";\\n\\nlibrary PatternMetadataLibrary {\\n    function GetPatternMetadata(\\n        uint256 currentPattern\\n    ) public pure returns (string memory) {\\n        if (currentPattern == 0) {\\n            return '{\\\"trait_type\\\":\\\"Pattern\\\", \\\"value\\\":\\\"Bones\\\"}';\\n        } else if (currentPattern == 1) {\\n            return '{\\\"trait_type\\\":\\\"Pattern\\\", \\\"value\\\":\\\"Chilli Paper\\\"}';\\n        } else if (currentPattern == 2) {\\n            return '{\\\"trait_type\\\":\\\"Pattern\\\", \\\"value\\\":\\\"Clouds\\\"}';\\n        } else if (currentPattern == 3) {\\n            return '{\\\"trait_type\\\":\\\"Pattern\\\", \\\"value\\\":\\\"Fire\\\"}';\\n        } else if (currentPattern == 4) {\\n            return '{\\\"trait_type\\\":\\\"Pattern\\\", \\\"value\\\":\\\"HeartBreaks\\\"}';\\n        } else if (currentPattern == 5) {\\n            return '{\\\"trait_type\\\":\\\"Pattern\\\", \\\"value\\\":\\\"Hearts\\\"}';\\n        } else if (currentPattern == 6) {\\n            return '{\\\"trait_type\\\":\\\"Pattern\\\", \\\"value\\\":\\\"Lemons\\\"}';\\n        } else if (currentPattern == 7) {\\n            return '{\\\"trait_type\\\":\\\"Pattern\\\", \\\"value\\\":\\\"Lighting\\\"}';\\n        } else if (currentPattern == 8) {\\n            return '{\\\"trait_type\\\":\\\"Pattern\\\", \\\"value\\\":\\\"Rainbows\\\"}';\\n        } else if (currentPattern == 9) {\\n            return '{\\\"trait_type\\\":\\\"Pattern\\\", \\\"value\\\":\\\"Stars\\\"}';\\n        } else if ((currentPattern == 10)) {\\n            return '{\\\"trait_type\\\":\\\"Pattern\\\", \\\"value\\\":\\\"Stripes\\\"}';\\n        } else if (currentPattern == 11) {\\n            return '{\\\"trait_type\\\":\\\"Pattern\\\", \\\"value\\\":\\\"Ufos\\\"}';\\n        } else {\\n            return '{\\\"trait_type\\\":\\\"Pattern\\\", \\\"value\\\":\\\"None\\\"}';\\n        }\\n    }\\n\\n    function GetPatternText(\\n        uint256 currentPattern\\n    ) public pure returns (string memory) {\\n        if (currentPattern == 0) {\\n            return \\\"Bones\\\";\\n        } else if (currentPattern == 1) {\\n            return \\\"Chilli Paper\\\";\\n        } else if (currentPattern == 2) {\\n            return \\\"Clouds\\\";\\n        } else if (currentPattern == 3) {\\n            return \\\"Fire\\\";\\n        } else if (currentPattern == 4) {\\n            return \\\"HeartBreaks\\\";\\n        } else if (currentPattern == 5) {\\n            return \\\"Hearts\\\";\\n        } else if (currentPattern == 6) {\\n            return \\\"Lemons\\\";\\n        } else if (currentPattern == 7) {\\n            return \\\"Lighting\\\";\\n        } else if (currentPattern == 8) {\\n            return \\\"Rainbows\\\";\\n        } else if (currentPattern == 9) {\\n            return \\\"Stars\\\";\\n        } else if ((currentPattern == 10)) {\\n            return \\\"Stripes\\\";\\n        } else if (currentPattern == 11) {\\n            return \\\"Ufos\\\";\\n        } else {\\n            return \\\"No\\\";\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x270a33a24959e16e3efd8b4cc2fe38ed8fe2bf4d56831c61afeb1b5508cb03d4\",\"license\":\"MIT\"},\"contracts/SockPattern/Patterns/BonePattern.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\nlibrary BonePattern {\\n      function pattern() public pure returns(string memory){\\n        return  string(abi.encodePacked(\\n            '     <g transform=\\\"translate(230, 310)\\\">', \\n            '         <mask id=\\\"mask0_109_8\\\" style=\\\"mask-type:alpha\\\" maskUnits=\\\"userSpaceOnUse\\\" x=\\\"60\\\" y=\\\"95\\\" width=\\\"576\\\" height=\\\"417\\\">', \\n            '             <path', \\n            '                 d=\\\"M412.599 511.123C427.084 407.789 504.42 393.741 541.278 399.634L598.118 274.99L635.107 193.878C518.709 205.216 443.215 133.212 420.018 95.7931L407.793 122.602L353.106 242.524C340.789 269.533 314.529 287.502 284.892 289.2L157.513 296.497L115.02 298.931L74.6788 301.242C73.8289 301.29 73.4002 302.291 73.9757 302.918C106.421 338.282 147.654 422.791 60.7515 488.097C65.5206 490.92 121.854 495.313 193.167 499.698C263.434 504.018 348.245 508.329 412.599 511.123Z\\\"', \\n            '                 fill=\\\"black\\\" />', \\n            '         </mask>', \\n            '         <g mask=\\\"url(#mask0_109_8)\\\">', \\n            '             <path', \\n            '                 d=\\\"M377.825 197.403L379.205 196L377.825 194.597C374.838 191.56 373 187.407 373 182.824C373 173.539 380.555 166 389.889 166C399.223 166 406.778 173.539 406.778 182.824C406.778 184.431 406.552 185.982 406.132 187.449L405.401 190H408.055H452.945H455.599L454.868 187.449C454.448 185.982 454.222 184.431 454.222 182.824C454.222 173.539 461.777 166 471.111 166C480.445 166 488 173.539 488 182.824C488 187.407 486.162 191.56 483.175 194.597L481.795 196L483.175 197.403C486.162 200.44 488 204.593 488 209.176C488 218.461 480.445 226 471.111 226C461.777 226 454.222 218.461 454.222 209.176C454.222 208.111 454.321 207.071 454.51 206.063L454.955 203.694H452.545H408.455H406.045L406.49 206.063C406.679 207.071 406.778 208.111 406.778 209.176C406.778 218.461 399.223 226 389.889 226C380.555 226 373 218.461 373 209.176C373 204.593 374.838 200.44 377.825 197.403Z\\\"', \\n            '                 fill=\\\"#FDFFBC\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\" />', \\n            '             <path', \\n            '                 d=\\\"M556.321 284.246L558.033 285.215L559.03 283.519C561.19 279.847 564.725 276.996 569.152 275.808C578.12 273.403 587.359 278.747 589.777 287.762C592.195 296.777 586.871 306.027 577.903 308.433C576.351 308.849 574.794 309.033 573.268 309.007L570.615 308.963L571.303 311.525L582.933 354.884L583.62 357.446L585.894 356.08C587.203 355.294 588.643 354.674 590.195 354.257C599.163 351.852 608.401 357.196 610.819 366.211C613.238 375.227 607.914 384.477 598.946 386.882C594.519 388.069 590.031 387.371 586.324 385.272L584.612 384.303L583.614 385.999C581.455 389.671 577.92 392.522 573.493 393.709C564.525 396.115 555.286 390.771 552.868 381.756C550.45 372.74 555.774 363.49 564.742 361.085C565.771 360.809 566.801 360.635 567.823 360.557L570.227 360.372L569.602 358.044L558.18 315.46L557.555 313.132L555.382 314.175C554.458 314.619 553.479 314.984 552.45 315.26C543.482 317.666 534.244 312.322 531.825 303.307C529.407 294.291 534.731 285.041 543.699 282.636C548.126 281.448 552.614 282.147 556.321 284.246Z\\\"', \\n            '                 fill=\\\"#FDFFBC\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\" />', \\n            '             <path', \\n            '                 d=\\\"M373.549 319.095L375.512 319.213L375.663 317.251C375.989 313.004 377.912 308.889 381.367 305.877C388.366 299.776 399.013 300.516 405.146 307.552C411.28 314.588 410.562 325.236 403.564 331.338C402.352 332.394 401.035 333.243 399.652 333.891L397.25 335.016L398.993 337.016L428.493 370.854L430.236 372.853L431.679 370.627C432.509 369.346 433.53 368.156 434.741 367.1C441.74 360.999 452.387 361.739 458.521 368.775C464.654 375.811 463.936 386.459 456.938 392.561C453.483 395.573 449.145 396.917 444.892 396.661L442.928 396.542L442.778 398.504C442.452 402.752 440.529 406.866 437.074 409.878C430.075 415.98 419.428 415.239 413.294 408.203C407.161 401.168 407.878 390.519 414.877 384.418C415.68 383.717 416.53 383.108 417.413 382.589L419.491 381.367L417.907 379.551L388.934 346.317L387.35 344.5L385.857 346.392C385.222 347.197 384.503 347.955 383.7 348.655C376.701 354.757 366.054 354.016 359.92 346.98C353.786 339.945 354.504 329.296 361.503 323.195C364.958 320.183 369.296 318.839 373.549 319.095Z\\\"', \\n            '                 fill=\\\"#FDFFBC\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\" />', \\n            '             <path', \\n            '                 d=\\\"M138.549 282.095L140.512 282.213L140.663 280.251C140.989 276.004 142.912 271.889 146.367 268.877C153.366 262.776 164.013 263.516 170.146 270.552C176.28 277.588 175.562 288.236 168.564 294.338C167.352 295.394 166.035 296.243 164.652 296.891L162.25 298.016L163.993 300.016L193.493 333.854L195.236 335.853L196.679 333.627C197.509 332.346 198.53 331.156 199.741 330.1C206.74 323.999 217.387 324.739 223.521 331.775C229.654 338.811 228.936 349.459 221.938 355.561C218.483 358.573 214.145 359.917 209.892 359.661L207.928 359.542L207.778 361.504C207.452 365.752 205.529 369.866 202.074 372.878C195.075 378.98 184.428 378.239 178.294 371.203C172.161 364.168 172.878 353.519 179.877 347.418C180.68 346.717 181.53 346.108 182.413 345.589L184.491 344.367L182.907 342.551L153.934 309.317L152.35 307.5L150.857 309.392C150.222 310.197 149.503 310.955 148.7 311.655C141.701 317.757 131.054 317.016 124.92 309.98C118.786 302.945 119.504 292.296 126.503 286.195C129.958 283.183 134.296 281.839 138.549 282.095Z\\\"', \\n            '                 fill=\\\"#FDFFBC\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\" />', \\n            '             <path', \\n            '                 d=\\\"M206.063 491.915L206.737 490.066L204.9 489.362C200.922 487.838 197.527 484.821 195.626 480.65C191.776 472.201 195.524 462.208 204.017 458.337C212.511 454.466 222.512 458.193 226.362 466.642C227.029 468.104 227.467 469.609 227.693 471.119L228.086 473.743L230.5 472.642L271.349 454.025L273.763 452.925L272.041 450.907C271.05 449.746 270.201 448.428 269.535 446.966C265.684 438.517 269.432 428.524 277.926 424.653C286.419 420.782 296.42 424.509 300.271 432.958C302.172 437.128 302.222 441.67 300.763 445.672L300.089 447.521L301.926 448.225C305.904 449.75 309.299 452.767 311.2 456.938C315.05 465.386 311.302 475.379 302.809 479.25C294.315 483.121 284.314 479.394 280.464 470.946C280.022 469.976 279.68 468.988 279.435 467.993L278.857 465.653L276.664 466.653L236.544 484.937L234.351 485.937L235.738 487.908C236.328 488.746 236.85 489.652 237.291 490.621C241.142 499.07 237.394 509.063 228.9 512.934C220.407 516.805 210.406 513.078 206.555 504.63C204.654 500.459 204.604 495.917 206.063 491.915Z\\\"', \\n            '                 fill=\\\"#FDFFBC\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\" />', \\n            '         </g>', \\n            '     </g>'\\n        ));\\n      }\\n}\",\"keccak256\":\"0x77277a7d499442ef53a7fc8e3315e22c7355855b6e94aaf56e430aea47163123\",\"license\":\"MIT\"},\"contracts/SockPattern/Patterns/ChilliPattern.sol\":{\"content\":\"\\npragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\nlibrary ChilliPattern {\\n      function pattern() public pure returns(string memory){\\n        return  string(abi.encodePacked(\\n            '     <g transform=\\\"translate(230, 310)\\\">', \\n            '         <mask id=\\\"mask0_109_16\\\" style=\\\"mask-type:alpha\\\" maskUnits=\\\"userSpaceOnUse\\\" x=\\\"60\\\" y=\\\"95\\\" width=\\\"576\\\" height=\\\"417\\\">', \\n            '             <path', \\n            '                 d=\\\"M412.599 511.123C427.083 407.789 504.42 393.741 541.277 399.634L598.118 274.99L635.106 193.878C518.709 205.216 443.215 133.212 420.018 95.7931L407.793 122.602L353.106 242.524C340.789 269.533 314.529 287.502 284.892 289.2L157.512 296.497L115.019 298.931L74.6783 301.242C73.8284 301.29 73.3997 302.291 73.9752 302.918C106.421 338.282 147.654 422.791 60.751 488.097C65.5201 490.92 121.854 495.313 193.167 499.698C263.434 504.018 348.244 508.329 412.599 511.123Z\\\"', \\n            '                 fill=\\\"black\\\" />', \\n            '         </mask>', \\n            '         <g mask=\\\"url(#mask0_109_16)\\\">', \\n            '             <path', \\n            '                 d=\\\"M534.855 253.528C511.368 290.466 483.426 285.088 472.391 277.781C483.376 316.64 556.669 330.77 566.319 292.056C567.149 288.725 567.596 285.664 567.714 282.853C568.387 266.842 558.41 258.967 548.132 255.621C543.441 254.094 538.687 253.511 534.855 253.528Z\\\"', \\n            '                 fill=\\\"#EB4545\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\" />', \\n            '             <path', \\n            '                 d=\\\"M568.395 284.159C564.685 262.034 548.747 254.137 533.706 252.531C541.192 249.785 552.119 248.181 559.92 252.639C567.746 250.304 582.171 242.132 577.262 228.117L586.871 230.679C587.541 235.886 583.856 248.166 563.755 255.627C568.56 260.651 571 269.493 568.395 284.159Z\\\"', \\n            '                 fill=\\\"#B4E847\\\" />', \\n            '             <path', \\n            '                 d=\\\"M559.92 252.639C552.119 248.181 541.192 249.785 533.706 252.531C548.747 254.137 564.685 262.034 568.395 284.159C571 269.493 568.56 260.651 563.755 255.627M559.92 252.639C567.746 250.304 582.171 242.132 577.262 228.117L586.871 230.679C587.541 235.886 583.856 248.166 563.755 255.627M559.92 252.639C561.31 253.433 562.6 254.42 563.755 255.627\\\"', \\n            '                 stroke=\\\"black\\\" stroke-width=\\\"4\\\" />', \\n            '             <path', \\n            '                 d=\\\"M387.706 251.934C369.384 212.181 389.043 191.609 401.163 186.292C362.55 174.472 310.965 228.42 338.275 257.506C340.625 260.009 342.956 262.042 345.255 263.664C358.347 272.905 370.372 268.786 378.753 261.96C382.578 258.844 385.644 255.165 387.706 251.934Z\\\"', \\n            '                 fill=\\\"#EB4545\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\" />', \\n            '             <path', \\n            '                 d=\\\"M343.788 263.529C364.393 272.398 379.667 263.28 389.165 251.508C387.418 259.289 382.845 269.342 374.872 273.483C372.594 281.326 371.648 297.879 386.087 301.346L378.728 308.034C373.988 305.776 365.663 296.025 370.283 275.087C363.457 276.404 354.703 273.665 343.788 263.529Z\\\"', \\n            '                 fill=\\\"#B4E847\\\" />', \\n            '             <path', \\n            '                 d=\\\"M374.872 273.483C382.845 269.342 387.418 259.289 389.165 251.508C379.667 263.28 364.393 272.398 343.788 263.529C354.703 273.665 363.457 276.404 370.283 275.087M374.872 273.483C372.594 281.326 371.648 297.879 386.087 301.346L378.728 308.034C373.988 305.776 365.663 296.025 370.283 275.087M374.872 273.483C373.452 274.221 371.923 274.771 370.283 275.087\\\"', \\n            '                 stroke=\\\"black\\\" stroke-width=\\\"4\\\" />', \\n            '             <path', \\n            '                 d=\\\"M186.487 453.57C170.536 494.332 142.081 494.422 129.847 489.372C148.094 525.397 222.736 525.181 224.768 485.335C224.943 481.906 224.793 478.816 224.369 476.035C221.953 460.193 210.649 454.381 199.919 453.073C195.023 452.475 190.245 452.816 186.487 453.57Z\\\"', \\n            '                 fill=\\\"#EB4545\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\" />', \\n            '             <path', \\n            '                 d=\\\"M225.288 477.186C217.396 456.187 200.238 451.499 185.168 452.813C191.987 448.679 202.403 445.006 210.915 447.882C218.146 444.087 230.733 433.295 223.223 420.485L233.144 421.153C234.802 426.134 233.545 438.894 215.252 450.077C220.933 454.085 225.027 462.293 225.288 477.186Z\\\"', \\n            '                 fill=\\\"#B4E847\\\" />', \\n            '             <path', \\n            '                 d=\\\"M210.915 447.882C202.403 445.006 191.987 448.679 185.168 452.813C200.238 451.499 217.396 456.187 225.288 477.186C225.027 462.293 220.933 454.085 215.252 450.077M210.915 447.882C218.146 444.087 230.733 433.295 223.223 420.485L233.144 421.153C234.802 426.134 233.545 438.894 215.252 450.077M210.915 447.882C212.431 448.395 213.887 449.115 215.252 450.077\\\"', \\n            '                 stroke=\\\"black\\\" stroke-width=\\\"4\\\" />', \\n            '             <path', \\n            '                 d=\\\"M199.238 308.974C161.199 287.317 165.208 259.146 171.968 247.767C133.691 260.634 123.152 334.528 162.29 342.28C165.657 342.946 168.737 343.243 171.55 343.224C187.574 343.116 194.954 332.767 197.795 322.338C199.091 317.578 199.442 312.802 199.238 308.974Z\\\"', \\n            '                 fill=\\\"#EB4545\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\" />', \\n            '             <path', \\n            '                 d=\\\"M170.279 343.968C192.197 339.184 199.307 322.88 200.178 307.778C203.286 315.121 205.421 325.958 201.348 333.966C204.062 341.669 212.928 355.679 226.687 350.093L224.597 359.815C219.428 360.738 206.983 357.656 198.551 337.942C193.767 342.987 185.055 345.855 170.279 343.968Z\\\"', \\n            '                 fill=\\\"#B4E847\\\" />', \\n            '             <path', \\n            '                 d=\\\"M201.348 333.966C205.421 325.958 203.286 315.121 200.178 307.778C199.307 322.88 192.197 339.184 170.279 343.968C185.055 345.855 193.767 342.986 198.551 337.942M201.348 333.966C204.062 341.669 212.928 355.679 226.687 350.093L224.597 359.815C219.428 360.738 206.983 357.656 198.551 337.942M201.348 333.966C200.623 335.393 199.7 336.73 198.551 337.942\\\"', \\n            '                 stroke=\\\"black\\\" stroke-width=\\\"4\\\" />', \\n            '             <path', \\n            '                 d=\\\"M378.731 430.139C373.896 473.644 399.045 486.956 412.224 488.175C379.317 511.581 313.338 476.678 330.069 440.458C331.509 437.341 333.079 434.675 334.747 432.411C344.253 419.51 356.963 419.621 367.071 423.452C371.683 425.201 375.754 427.724 378.731 430.139Z\\\"', \\n            '                 fill=\\\"#EB4545\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\" />', \\n            '             <path', \\n            '                 d=\\\"M333.398 433.002C350.15 418.081 367.521 421.91 380.25 430.082C376.136 423.251 368.623 415.155 359.75 413.743C355.113 407.02 348.989 391.613 361.595 383.765L352.501 379.742C348.716 383.381 343.896 395.262 354.89 413.67C347.997 414.576 340.555 419.938 333.398 433.002Z\\\"', \\n            '                 fill=\\\"#B4E847\\\" />', \\n            '             <path', \\n            '                 d=\\\"M359.75 413.743C368.623 415.155 376.136 423.251 380.25 430.082C367.521 421.91 350.15 418.081 333.398 433.002C340.555 419.938 347.997 414.576 354.89 413.67M359.75 413.743C355.113 407.02 348.989 391.613 361.595 383.765L352.501 379.742C348.716 383.381 343.896 395.262 354.89 413.67M359.75 413.743C358.169 413.492 356.545 413.452 354.89 413.67\\\"', \\n            '                 stroke=\\\"black\\\" stroke-width=\\\"4\\\" />', \\n            '         </g>', \\n            '     </g>'\\n        ));\\n      }\\n}\",\"keccak256\":\"0x689242136262a0aa8e78f742e797d2cb0e41d7fa111860ac847ccb9dcf8545c3\",\"license\":\"MIT\"},\"contracts/SockPattern/Patterns/CloudPattern.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\n\\nlibrary CloudPattern {\\n      function pattern() public pure returns(string memory){\\n        return  string(abi.encodePacked(\\n            '     <g transform=\\\"translate(230, 310)\\\">', \\n            '         <mask id=\\\"mask0_109_169\\\" style=\\\"mask-type:alpha\\\" maskUnits=\\\"userSpaceOnUse\\\" x=\\\"60\\\" y=\\\"95\\\" width=\\\"576\\\" height=\\\"417\\\">', \\n            '             <path', \\n            '                 d=\\\"M412.599 511.123C427.083 407.789 504.42 393.741 541.278 399.634L598.118 274.99L635.107 193.878C518.709 205.216 443.215 133.212 420.018 95.7931L407.793 122.602L353.106 242.524C340.789 269.533 314.529 287.502 284.892 289.2L157.512 296.497L115.019 298.931L74.6785 301.242C73.8286 301.29 73.4 302.291 73.9755 302.918C106.421 338.282 147.654 422.791 60.7513 488.097C65.5203 490.92 121.854 495.313 193.167 499.698C263.434 504.018 348.244 508.329 412.599 511.123Z\\\"', \\n            '                 fill=\\\"black\\\" />', \\n            '         </mask>', \\n            '         <g mask=\\\"url(#mask0_109_169)\\\">', \\n            '             <path', \\n            '                 d=\\\"M192.067 323.332L193.653 327.132L197.405 325.436C203.925 322.49 211.914 324.68 216.069 331.005C220.67 338.006 218.758 347.287 211.945 351.764L165.592 382.221C158.778 386.698 149.501 384.77 144.901 377.768C140.3 370.767 142.212 361.487 149.026 357.009L149.028 357.008L152.319 354.845L150.207 351.52C146.333 345.422 148.033 337.437 153.92 333.569C156.561 331.833 159.608 331.202 162.546 331.566L166.917 332.107L167.036 327.704C167.148 323.573 169.185 319.624 172.824 317.233C178.768 313.327 186.871 315.005 190.893 321.125C191.362 321.84 191.752 322.578 192.067 323.332Z\\\"', \\n            '                 fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M296.757 508.297L300.419 506.414L302.195 510.128C305.282 516.583 312.802 520.056 320.056 517.897C328.085 515.508 332.604 507.179 330.278 499.365L314.459 446.205C312.134 438.391 303.797 433.887 295.768 436.277C287.738 438.666 283.22 446.995 285.545 454.809L285.546 454.811L286.669 458.586L282.911 459.768C276.019 461.935 272.174 469.136 274.183 475.888C275.084 478.917 277.007 481.363 279.488 482.978L283.179 485.381L280.433 488.824C277.857 492.055 276.87 496.387 278.112 500.562C280.14 507.379 287.417 511.317 294.437 509.228C295.256 508.984 296.03 508.671 296.757 508.297Z\\\"', \\n            '                 fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M362.825 312.332L361.239 316.132L357.486 314.436C350.967 311.49 342.978 313.68 338.822 320.005C334.222 327.006 336.134 336.287 342.947 340.764L389.3 371.221C396.114 375.698 405.391 373.77 409.991 366.768C414.592 359.767 412.68 350.487 405.866 346.009L405.864 346.008L402.572 343.845L404.685 340.52C408.559 334.422 406.859 326.437 400.972 322.569C398.331 320.833 395.284 320.202 392.346 320.566L387.975 321.107L387.856 316.704C387.744 312.573 385.707 308.624 382.067 306.233C376.124 302.327 368.021 304.005 363.999 310.125C363.53 310.84 363.14 311.578 362.825 312.332Z\\\"', \\n            '                 fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M563.067 270.332L564.653 274.132L568.405 272.436C574.925 269.49 582.914 271.68 587.069 278.005C591.67 285.006 589.758 294.287 582.945 298.764L536.592 329.221C529.778 333.698 520.501 331.77 515.901 324.768C511.3 317.767 513.212 308.487 520.026 304.009L520.028 304.008L523.319 301.845L521.207 298.52C517.333 292.422 519.033 284.437 524.92 280.569C527.561 278.833 530.608 278.202 533.546 278.566L537.917 279.107L538.036 274.704C538.148 270.573 540.185 266.624 543.824 264.233C549.768 260.327 557.871 262.005 561.893 268.125C562.362 268.84 562.752 269.578 563.067 270.332Z\\\"', \\n            '                 fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M469.703 171.532L468.283 175.397L472.187 176.705C478.972 178.977 483.34 186.015 482.087 193.479C480.699 201.741 472.987 207.246 464.947 205.896L410.249 196.712C402.209 195.362 396.718 187.64 398.105 179.378C399.492 171.116 407.204 165.611 415.244 166.961L415.246 166.961L419.131 167.613L419.843 163.739C421.149 156.633 427.825 151.934 434.771 153.101C437.888 153.624 440.551 155.232 442.459 157.497L445.296 160.865L448.376 157.718C451.267 154.765 455.446 153.255 459.741 153.976C466.755 155.153 471.556 161.893 470.343 169.115C470.201 169.958 469.985 170.765 469.703 171.532Z\\\"', \\n            '                 fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '         </g>', \\n            '     </g>'\\n        ));\\n      }\\n}\",\"keccak256\":\"0x29685ad3d3896078a08e72efeb1abd01cde177bcb8617691020b2cc0ccffb19b\",\"license\":\"MIT\"},\"contracts/SockPattern/Patterns/FirePattern.sol\":{\"content\":\"\\npragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\nlibrary FirePattern {\\n      function pattern() public pure returns(string memory){\\n        return  string(abi.encodePacked(\\n                      '     <g transform=\\\"translate(230, 310)\\\">', \\n            '         <mask id=\\\"mask0_109_39\\\" style=\\\"mask-type:alpha\\\" maskUnits=\\\"userSpaceOnUse\\\" x=\\\"60\\\" y=\\\"95\\\" width=\\\"576\\\" height=\\\"417\\\">', \\n            '             <path', \\n            '                 d=\\\"M412.599 511.123C427.083 407.789 504.42 393.741 541.277 399.634L598.118 274.99L635.106 193.878C518.709 205.216 443.215 133.212 420.018 95.7931L407.793 122.602L353.106 242.524C340.789 269.533 314.529 287.502 284.892 289.2L157.512 296.497L115.019 298.931L74.6783 301.242C73.8284 301.29 73.3997 302.291 73.9752 302.918C106.421 338.282 147.654 422.791 60.751 488.097C65.5201 490.92 121.854 495.313 193.167 499.698C263.434 504.018 348.244 508.329 412.599 511.123Z\\\"', \\n            '                 fill=\\\"black\\\" />', \\n            '         </mask>', \\n            '         <g mask=\\\"url(#mask0_109_39)\\\">', \\n            '             <path', \\n            '                 d=\\\"M424.644 161.189C389.227 164.421 377.082 185.311 376.133 207.329C378.381 227.034 396.735 240.063 404.556 242.73C453.92 256.98 474.057 215.931 465.57 173.717C453.207 192.245 437.033 204.648 421.903 193.128C409.799 183.912 418.687 167.995 424.644 161.189Z\\\"', \\n            '                 fill=\\\"#FF8A01\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M407.04 198.135C387.987 198.277 382.321 208.715 382.774 220.237C384.858 230.685 395.378 238.334 399.734 240.078C427.115 249.73 436.226 229.055 429.772 206.511C423.886 215.7 415.664 221.503 406.958 214.788C399.993 209.416 404.111 201.448 407.04 198.135Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\" />', \\n            '             <path', \\n            '                 d=\\\"M318.722 347.908C299.027 377.52 307.68 400.081 324.236 414.63C340.993 425.237 362.651 419.113 369.634 414.694C411.693 385.182 392.35 343.753 354.147 323.888C360.825 345.138 360.341 365.514 341.88 370.073C327.11 373.721 320.287 356.816 318.722 347.908Z\\\"', \\n            '                 fill=\\\"#FF8A01\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M336.457 384.79C324.618 399.719 329.195 410.678 338.453 417.552C347.898 422.482 360.453 419.085 364.544 416.786C389.234 401.513 378.845 381.45 357.238 372.338C360.703 382.685 360.067 392.729 349.377 395.299C340.824 397.355 337.2 389.149 336.457 384.79Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\" />', \\n            '             <path', \\n            '                 d=\\\"M240.178 456.375C224.219 424.593 200.336 420.927 179.495 428.095C161.977 437.392 156.561 459.239 156.938 467.494C161.725 518.65 207.295 522.383 243.482 499.048C221.717 494.316 204.259 483.797 209.449 465.503C213.601 450.867 231.665 453.319 240.178 456.375Z\\\"', \\n            '                 fill=\\\"#FF8A01\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M199.355 453.5C192.256 435.817 180.469 434.361 169.91 438.996C160.948 444.755 157.675 457.343 157.645 462.036C158.673 491.05 181.248 491.971 199.87 477.721C189.166 475.601 180.758 470.071 183.824 459.512C186.277 451.065 195.2 451.984 199.355 453.5Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\" />', \\n            '             <path', \\n            '                 d=\\\"M161.861 265.126C126.319 266.371 113.024 286.547 110.844 308.479C111.985 328.278 129.581 342.314 137.241 345.414C185.73 362.405 208.133 322.547 202.022 279.924C188.641 297.732 171.799 309.21 157.337 296.861C145.768 286.982 155.533 271.588 161.861 265.126Z\\\"', \\n            '                 fill=\\\"#FF8A01\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M142.217 301.027C123.185 300.103 116.945 310.207 116.752 321.737C118.247 332.285 128.322 340.51 132.574 342.496C159.372 353.665 169.627 333.533 164.445 310.663C158.053 319.507 149.519 324.842 141.202 317.65C134.549 311.897 139.107 304.171 142.217 301.027Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\" />', \\n            '             <path', \\n            '                 d=\\\"M567.347 364.066C580.837 331.16 567.919 310.74 548.827 299.729C530.312 292.622 510.28 302.883 504.302 308.589C468.863 345.791 495.972 382.611 537.334 394.58C526.61 375.057 523.079 354.983 540.285 346.884C554.049 340.405 564.061 355.639 567.347 364.066Z\\\"', \\n            '                 fill=\\\"#FF8A01\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M542.709 331.39C551.383 314.424 544.742 304.579 534.313 299.659C524.084 296.681 512.441 302.479 508.882 305.537C487.675 325.365 501.804 342.996 524.78 347.683C519.35 338.218 517.999 328.246 527.976 323.625C535.958 319.928 541.124 327.261 542.709 331.39Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\" />', \\n            '         </g>', \\n            '     </g>'\\n        ));\\n      }\\n}\",\"keccak256\":\"0x5d4159df84f7cab9135d187f3f2cdd4f4cab20d1796ce8c2d2c2ca4ed169ea69\",\"license\":\"MIT\"},\"contracts/SockPattern/Patterns/HeartBreakPattern.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\nlibrary HeartBreakPattern {\\n      function pattern() public pure returns(string memory){\\n        return  string(abi.encodePacked(\\n            '     <g transform=\\\"translate(230, 310)\\\">', \\n            '         <mask id=\\\"mask0_445_1877\\\" style=\\\"mask-type:alpha\\\" maskUnits=\\\"userSpaceOnUse\\\" x=\\\"60\\\" y=\\\"95\\\" width=\\\"576\\\" height=\\\"417\\\">', \\n            '             <path', \\n            '                 d=\\\"M412.599 511.123C427.083 407.789 504.42 393.741 541.278 399.634L598.118 274.99L635.107 193.878C518.709 205.216 443.215 133.212 420.018 95.793L407.793 122.602L353.106 242.524C340.789 269.533 314.529 287.502 284.892 289.2L157.512 296.497L115.02 298.931L74.6782 301.242C73.8284 301.29 73.3997 302.291 73.9752 302.918C106.421 338.282 147.654 422.791 60.751 488.097C65.52 490.92 121.854 495.313 193.167 499.698C263.434 504.018 348.244 508.329 412.599 511.123Z\\\"', \\n            '                 fill=\\\"black\\\" />', \\n            '         </mask>', \\n            '         <g mask=\\\"url(#mask0_445_1877)\\\">', \\n            '             <path', \\n            '                 d=\\\"M411.548 171.671C412.6 163.02 420.463 156.852 429.372 157.936C433.865 158.482 436.799 160.658 439.848 163.956L463.438 193.103L446.155 196.457L439.905 188.405L429.959 197.285L421.053 187.965C414.795 185.15 410.699 178.656 411.548 171.671Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M408.904 220.941C409.753 213.956 415.119 208.612 421.869 207.377L430.775 216.697L440.721 207.817L446.97 215.869L464.254 212.515L434.363 235.19C430.613 237.66 427.218 239.065 422.721 238.518C413.809 237.434 407.852 229.593 408.904 220.941Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M254.525 298.18C263.238 298.311 270.202 305.478 270.068 314.451C269.999 318.978 268.146 322.125 265.188 325.506L238.699 352.046L233.537 335.213L240.883 328.148L231.001 319.197L239.327 309.355C241.464 302.834 247.489 298.074 254.525 298.18Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M205.25 300.761C212.286 300.867 218.167 305.637 220.109 312.219L211.783 322.061L221.665 331.012L214.319 338.077L219.481 354.91L193.773 327.585C190.921 324.116 189.165 320.889 189.233 316.36C189.368 307.383 196.535 300.63 205.25 300.761Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M405.023 453.471C406.062 462.123 399.894 469.986 390.983 471.056C386.489 471.596 383.121 470.181 379.374 467.704L349.521 445.016L365.508 437.641L373.496 443.973L381.04 432.979L391.91 439.91C398.659 441.153 404.184 446.485 405.023 453.471Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M395.855 404.989C396.694 411.976 392.755 418.444 386.493 421.251L375.624 414.321L368.079 425.314L360.092 418.982L344.105 426.356L367.734 397.214C370.788 393.923 373.751 391.75 378.248 391.21C387.162 390.139 394.816 396.336 395.855 404.989Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M553.565 307.866C561.192 303.651 570.797 306.41 575.138 314.265C577.328 318.227 577.283 321.879 576.396 326.282L566.595 362.476L553.751 350.433L556.616 340.651L543.592 337.793L545.928 325.115C544.543 318.394 547.407 311.27 553.565 307.866Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M512.086 334.588C518.244 331.184 525.719 332.402 530.674 337.149L528.338 349.827L541.362 352.685L538.497 362.467L551.341 374.509L515.453 363.569C511.255 361.976 508.128 360.048 505.936 356.083C501.593 348.226 504.458 338.804 512.086 334.588Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M156.565 436.866C164.192 432.651 173.797 435.41 178.138 443.265C180.328 447.227 180.283 450.879 179.396 455.282L169.594 491.476L156.751 479.433L159.616 469.651L146.592 466.793L148.928 454.115C147.543 447.394 150.407 440.27 156.565 436.866Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M115.086 463.588C121.244 460.184 128.719 461.402 133.674 466.149L131.338 478.827L144.362 481.685L141.497 491.467L154.341 503.509L118.453 492.569C114.255 490.976 111.128 489.048 108.936 485.083C104.593 477.226 107.458 467.804 115.086 463.588Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '         </g>', \\n            '     </g>'\\n        ));\\n      }\\n}\",\"keccak256\":\"0x1a1a5cfe24cd9db186ed945e6f2530992e135f927d8605b261481b8ddeb025c6\",\"license\":\"MIT\"},\"contracts/SockPattern/Patterns/HeartPattern.sol\":{\"content\":\"\\npragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\n// GET LISTED ON OPENSEA: https://testnets.opensea.io/get-listed/step-two\\n\\n// Defining Library\\n\\nlibrary HeartPattern {\\n      function pattern() public pure returns(string memory){\\n        return  string(abi.encodePacked(\\n            '     <g transform=\\\"translate(230, 310)\\\">', \\n            '         <mask id=\\\"mask0_109_58\\\" style=\\\"mask-type:alpha\\\" maskUnits=\\\"userSpaceOnUse\\\" x=\\\"60\\\" y=\\\"95\\\" width=\\\"576\\\" height=\\\"417\\\">', \\n            '             <path', \\n            '                 d=\\\"M412.599 511.123C427.084 407.789 504.42 393.741 541.278 399.634L598.118 274.99L635.107 193.878C518.709 205.216 443.215 133.212 420.018 95.7931L407.793 122.602L353.106 242.524C340.789 269.533 314.529 287.502 284.892 289.2L157.513 296.497L115.02 298.931L74.6788 301.242C73.8289 301.29 73.4002 302.291 73.9757 302.918C106.421 338.282 147.654 422.791 60.7515 488.097C65.5205 490.92 121.854 495.313 193.167 499.698C263.434 504.018 348.245 508.329 412.599 511.123Z\\\"', \\n            '                 fill=\\\"black\\\" />', \\n            '         </mask>', \\n            '         <g mask=\\\"url(#mask0_109_58)\\\">', \\n            '             <path', \\n            '                 d=\\\"M287.378 287.513C280.189 281.629 269.881 282.684 264.149 289.687C259.521 295.343 259.491 303.306 263.399 309.241C256.808 306.586 249.143 308.301 244.515 313.956C238.782 320.962 239.631 331.137 246.823 337.023C250.452 339.993 254.203 340.641 258.857 340.552L297.613 337.22L293.192 298.594C292.36 294.013 291.005 290.48 287.378 287.513Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M193.644 414.455C190.254 405.806 180.749 401.68 172.323 404.982C165.519 407.649 161.595 414.579 162.099 421.667C157.651 416.126 150.127 413.869 143.323 416.536C134.895 419.839 130.655 429.128 134.046 437.781C135.757 442.147 138.711 444.548 142.813 446.748L178.24 462.811L193.29 426.965C194.807 422.562 195.354 418.818 193.644 414.455Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M394.492 420.513C401.681 414.629 411.99 415.684 417.721 422.687C422.349 428.343 422.379 436.306 418.471 442.241C425.062 439.586 432.727 441.301 437.356 446.956C443.088 453.962 442.239 464.137 435.047 470.023C431.418 472.993 427.667 473.641 423.013 473.552L384.257 470.22L388.678 431.594C389.51 427.013 390.865 423.48 394.492 420.513Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M467.174 267.593C462.745 259.426 452.805 256.501 444.849 260.815C438.425 264.299 435.383 271.659 436.755 278.631C431.659 273.679 423.915 272.366 417.491 275.849C409.533 280.164 406.468 289.904 410.898 298.074C413.134 302.196 416.36 304.215 420.701 305.894L457.836 317.476L468.362 280.051C469.325 275.495 469.407 271.712 467.174 267.593Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M616.174 201.593C611.745 193.426 601.805 190.501 593.849 194.815C587.425 198.299 584.383 205.659 585.755 212.631C580.659 207.679 572.915 206.366 566.491 209.849C558.533 214.164 555.468 223.904 559.898 232.074C562.134 236.196 565.36 238.215 569.701 239.894L606.836 251.476L617.362 214.051C618.325 209.495 618.407 205.712 616.174 201.593Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M444.957 161.821C450.502 154.367 448.972 144.119 441.71 138.717C435.847 134.356 427.89 134.694 422.143 138.873C424.49 132.166 422.423 124.588 416.559 120.226C409.296 114.824 399.171 116.143 393.624 123.6C390.825 127.362 390.351 131.139 390.655 135.784L395.777 174.344L434.156 168.142C438.694 167.098 442.161 165.581 444.957 161.821Z\\\"', \\n            '                 fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '         </g>', \\n            '     </g>'\\n        ));\\n      }\\n}\",\"keccak256\":\"0x4b725cf91239d00d371c5a5d8800d117ec45ea5b993d448917415dab21ab4506\",\"license\":\"MIT\"},\"contracts/SockPattern/Patterns/LemonPattern.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\n// GET LISTED ON OPENSEA: https://testnets.opensea.io/get-listed/step-two\\n\\n// Defining Library\\n\\nlibrary LemonPattern {\\n      function pattern() public pure returns(string memory){\\n        return  string(abi.encodePacked(\\n            '     <g transform=\\\"translate(230, 310)\\\">', \\n            '         <mask id=\\\"mask0_109_84\\\" style=\\\"mask-type:alpha\\\" maskUnits=\\\"userSpaceOnUse\\\" x=\\\"60\\\" y=\\\"95\\\" width=\\\"576\\\" height=\\\"417\\\">', \\n            '             <path', \\n            '                 d=\\\"M412.599 511.123C427.083 407.789 504.42 393.741 541.277 399.634L598.118 274.99L635.106 193.878C518.709 205.216 443.215 133.212 420.018 95.7931L407.793 122.602L353.106 242.524C340.789 269.533 314.529 287.502 284.892 289.2L157.512 296.497L115.019 298.931L74.6783 301.242C73.8284 301.29 73.3997 302.291 73.9752 302.918C106.421 338.282 147.654 422.791 60.751 488.097C65.5201 490.92 121.854 495.313 193.167 499.698C263.434 504.018 348.244 508.329 412.599 511.123Z\\\"', \\n            '                 fill=\\\"#98C1FF\\\" />', \\n            '         </mask>', \\n            '         <g mask=\\\"url(#mask0_109_84)\\\">', \\n            '             <path', \\n            '                 d=\\\"M177.049 338.483C182.347 338.483 186.631 337.156 189.688 334.154C192.679 331.217 193.875 327.272 194.349 323.387C194.823 319.503 194.636 315.107 194.374 310.774C194.322 309.912 194.266 309.05 194.211 308.187C193.98 304.591 193.748 300.989 193.748 297.363C193.748 287.313 189.81 278.174 183.401 271.419C176.536 264.183 166.816 259.662 156.047 259.662C154.165 259.662 152.179 259.573 150.047 259.477C149.516 259.453 148.975 259.428 148.425 259.405C145.731 259.29 142.857 259.199 140.058 259.337C134.614 259.606 128.476 260.766 124.278 265.358C122.587 267.207 121.614 269.569 120.998 271.8C120.37 274.072 120.021 276.556 119.792 278.931C119.599 280.927 119.482 282.971 119.374 284.838C119.354 285.194 119.334 285.543 119.314 285.884C119.183 288.091 119.051 289.926 118.822 291.358C118.508 293.316 118.346 295.322 118.346 297.363C118.346 306.755 121.785 315.353 127.467 321.952C129.626 324.46 133.381 326.599 137.285 328.376C141.355 330.23 146.204 331.958 151.107 333.434C160.78 336.348 171.334 338.483 177.049 338.483Z\\\"', \\n            '                 fill=\\\"#FDED5E\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M287.433 462.543C292.73 462.543 297.015 461.216 300.072 458.214C303.063 455.277 304.259 451.331 304.733 447.447C305.206 443.563 305.02 439.166 304.758 434.833C304.706 433.971 304.65 433.109 304.595 432.247C304.364 428.651 304.132 425.048 304.132 421.423C304.132 411.373 300.194 402.233 293.785 395.478C286.92 388.242 277.2 383.722 266.431 383.722C264.549 383.722 262.563 383.632 260.431 383.536C259.9 383.512 259.359 383.488 258.809 383.464C256.115 383.349 253.241 383.259 250.442 383.397C244.998 383.665 238.86 384.826 234.662 389.418C232.971 391.267 231.998 393.628 231.382 395.859C230.754 398.131 230.404 400.615 230.175 402.991C229.983 404.987 229.866 407.031 229.758 408.898C229.738 409.253 229.718 409.602 229.698 409.943C229.567 412.15 229.435 413.986 229.206 415.418C228.892 417.376 228.729 419.382 228.729 421.423C228.729 430.814 232.169 439.413 237.851 446.012C240.01 448.519 243.765 450.658 247.669 452.436C251.739 454.289 256.588 456.017 261.491 457.494C271.164 460.407 281.718 462.543 287.433 462.543Z\\\"', \\n            '                 fill=\\\"#FDED5E\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M372.418 325.785C377.716 325.785 382.001 324.458 385.057 321.456C388.048 318.519 389.244 314.574 389.718 310.689C390.192 306.805 390.006 302.408 389.743 298.075C389.691 297.214 389.636 296.352 389.58 295.489C389.349 291.893 389.117 288.29 389.117 284.665C389.117 274.615 385.179 265.476 378.77 258.72C371.905 251.484 362.185 246.964 351.416 246.964C349.534 246.964 347.549 246.874 345.416 246.778C344.885 246.754 344.344 246.73 343.794 246.707C341.1 246.592 338.226 246.501 335.427 246.639C329.983 246.907 323.846 248.068 319.647 252.66C317.957 254.509 316.984 256.87 316.367 259.101C315.739 261.373 315.39 263.857 315.161 266.233C314.968 268.229 314.851 270.273 314.744 272.14C314.723 272.495 314.703 272.845 314.683 273.186C314.553 275.392 314.42 277.228 314.191 278.66C313.877 280.618 313.715 282.624 313.715 284.665C313.715 294.057 317.154 302.655 322.836 309.254C324.995 311.762 328.751 313.901 332.654 315.678C336.724 317.532 341.573 319.259 346.476 320.736C356.15 323.65 366.703 325.785 372.418 325.785Z\\\"', \\n            '                 fill=\\\"#FDED5E\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M503.316 267.173C508.613 267.173 512.898 265.847 515.955 262.845C518.946 259.908 520.142 255.962 520.616 252.078C521.089 248.194 520.903 243.797 520.641 239.464C520.588 238.602 520.533 237.74 520.478 236.878C520.246 233.282 520.015 229.679 520.015 226.054C520.015 216.003 516.077 206.864 509.668 200.109C502.803 192.873 493.083 188.353 482.314 188.353C480.432 188.353 478.446 188.263 476.314 188.167C475.782 188.143 475.242 188.119 474.692 188.095C471.998 187.98 469.123 187.89 466.325 188.028C460.881 188.296 454.743 189.457 450.544 194.049C448.854 195.898 447.881 198.259 447.265 200.49C446.637 202.762 446.287 205.246 446.058 207.622C445.866 209.618 445.748 211.661 445.641 213.529C445.621 213.884 445.6 214.233 445.58 214.574C445.45 216.781 445.318 218.617 445.089 220.048C444.775 222.006 444.612 224.013 444.612 226.054C444.612 235.445 448.051 244.044 453.734 250.643C455.893 253.15 459.648 255.289 463.552 257.067C467.622 258.92 472.471 260.648 477.374 262.125C487.047 265.038 497.6 267.173 503.316 267.173Z\\\"', \\n            '                 fill=\\\"#FDED5E\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M570.719 397.094C576.016 397.094 580.301 395.767 583.358 392.766C586.349 389.828 587.545 385.883 588.019 381.999C588.493 378.115 588.306 373.718 588.044 369.385C587.992 368.523 587.936 367.661 587.881 366.799C587.65 363.203 587.418 359.6 587.418 355.975C587.418 345.924 583.48 336.785 577.071 330.03C570.206 322.794 560.486 318.273 549.717 318.273C547.835 318.273 545.849 318.184 543.717 318.088C543.186 318.064 542.645 318.04 542.095 318.016C539.401 317.901 536.527 317.811 533.728 317.949C528.284 318.217 522.146 319.378 517.948 323.97C516.257 325.818 515.284 328.18 514.668 330.411C514.04 332.683 513.691 335.167 513.462 337.543C513.269 339.539 513.152 341.582 513.044 343.449C513.024 343.805 513.004 344.154 512.984 344.495C512.853 346.702 512.721 348.538 512.492 349.969C512.178 351.927 512.016 353.933 512.016 355.975C512.016 365.366 515.455 373.965 521.137 380.564C523.296 383.071 527.051 385.21 530.955 386.988C535.025 388.841 539.874 390.569 544.777 392.046C554.45 394.959 565.004 397.094 570.719 397.094Z\\\"', \\n            '                 fill=\\\"#FDED5E\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M434.937 468.404C440.234 468.404 444.519 467.077 447.576 464.075C450.567 461.138 451.763 457.193 452.237 453.308C452.71 449.424 452.524 445.027 452.262 440.695C452.21 439.833 452.154 438.971 452.099 438.108C451.867 434.512 451.636 430.909 451.636 427.284C451.636 417.234 447.698 408.095 441.289 401.339C434.424 394.104 424.704 389.583 413.935 389.583C412.053 389.583 410.067 389.494 407.935 389.397C407.403 389.374 406.863 389.349 406.313 389.326C403.619 389.211 400.745 389.12 397.946 389.258C392.502 389.526 386.364 390.687 382.166 395.279C380.475 397.128 379.502 399.489 378.886 401.721C378.258 403.993 377.908 406.477 377.679 408.852C377.487 410.848 377.369 412.892 377.262 414.759C377.242 415.115 377.222 415.464 377.201 415.805C377.071 418.012 376.939 419.847 376.71 421.279C376.396 423.237 376.233 425.243 376.233 427.284C376.233 436.676 379.673 445.274 385.355 451.873C387.514 454.381 391.269 456.52 395.173 458.297C399.243 460.151 404.092 461.878 408.995 463.355C418.668 466.269 429.221 468.404 434.937 468.404Z\\\"', \\n            '                 fill=\\\"#FDED5E\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             <path', \\n            '                 d=\\\"M142.86 539.713C148.157 539.713 152.442 538.387 155.499 535.385C158.49 532.448 159.686 528.502 160.159 524.618C160.633 520.734 160.447 516.337 160.185 512.004C160.132 511.142 160.077 510.28 160.021 509.418C159.79 505.822 159.559 502.219 159.559 498.594C159.559 488.543 155.621 479.404 149.212 472.649C142.347 465.413 132.627 460.893 121.857 460.893C119.975 460.893 117.99 460.803 115.858 460.707C115.326 460.683 114.786 460.659 114.236 460.635C111.542 460.52 108.667 460.43 105.869 460.568C100.425 460.836 94.287 461.997 90.0884 466.589C88.398 468.438 87.4249 470.799 86.8085 473.03C86.1807 475.302 85.8312 477.786 85.6022 480.162C85.4098 482.158 85.2923 484.201 85.1849 486.069C85.1645 486.424 85.1444 486.773 85.1243 487.114C84.9939 489.321 84.8619 491.157 84.6325 492.588C84.3188 494.546 84.1562 496.553 84.1562 498.594C84.1562 507.985 87.5954 516.584 93.2777 523.183C95.4367 525.69 99.192 527.829 103.096 529.607C107.166 531.46 112.015 533.188 116.918 534.665C126.591 537.578 137.144 539.713 142.86 539.713Z\\\"', \\n            '                 fill=\\\"#FDED5E\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '         </g>', \\n            '     </g>'\\n        ));\\n      }\\n}\",\"keccak256\":\"0x437fa87b363d9d1b4de65d900e31678ff9f4d54b0f806a5d8d1c028a50de7623\",\"license\":\"MIT\"},\"contracts/SockPattern/Patterns/LightingPattern.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\n// GET LISTED ON OPENSEA: https://testnets.opensea.io/get-listed/step-two\\n\\n// Defining Library\\n\\nlibrary LightingPattern {\\n      function pattern() public pure returns(string memory){\\n        return  string(abi.encodePacked(\\n            '     <g transform=\\\"translate(230, 310)\\\">', \\n            '         <mask id=\\\"mask0_109_132\\\" style=\\\"mask-type:alpha\\\" maskUnits=\\\"userSpaceOnUse\\\" x=\\\"60\\\" y=\\\"95\\\" width=\\\"576\\\" height=\\\"417\\\">', \\n            '             <path', \\n            '                 d=\\\"M412.599 511.123C427.083 407.789 504.42 393.741 541.278 399.634L598.118 274.99L635.107 193.878C518.709 205.216 443.215 133.212 420.018 95.7931L407.793 122.602L353.106 242.524C340.789 269.533 314.529 287.502 284.892 289.2L157.512 296.497L115.019 298.931L74.6785 301.242C73.8286 301.29 73.4 302.291 73.9755 302.918C106.421 338.282 147.654 422.791 60.7513 488.097C65.5203 490.92 121.854 495.313 193.167 499.698C263.434 504.018 348.244 508.329 412.599 511.123Z\\\"', \\n            '                 fill=\\\"black\\\" />', \\n            '         </mask>', \\n            '         <g mask=\\\"url(#mask0_109_132)\\\">', \\n            '             <path', \\n            '                 d=\\\"M481.421 183.898L462.356 178.695L444.791 204.173L453.06 206.43L439.378 229.436L472.62 201.677L464.122 199.358L481.421 183.898Z\\\"', \\n            '                 fill=\\\"#FFF066\\\" />', \\n            '             <path', \\n            '                 d=\\\"M364.421 277.898L345.356 272.695L327.791 298.173L336.06 300.43L322.378 323.436L355.62 295.677L347.122 293.358L364.421 277.898Z\\\"', \\n            '                 fill=\\\"#FFF066\\\" />', \\n            '             <path', \\n            '                 d=\\\"M281.421 425.898L262.356 420.695L244.791 446.173L253.06 448.43L239.378 471.436L272.62 443.677L264.122 441.358L281.421 425.898Z\\\"', \\n            '                 fill=\\\"#FFF066\\\" />', \\n            '             <path', \\n            '                 d=\\\"M168.421 330.898L149.356 325.695L131.791 351.173L140.06 353.43L126.378 376.436L159.62 348.677L151.122 346.358L168.421 330.898Z\\\"', \\n            '                 fill=\\\"#FFF066\\\" />', \\n            '             <path', \\n            '                 d=\\\"M510.421 330.898L491.356 325.695L473.791 351.173L482.06 353.43L468.378 376.436L501.62 348.677L493.122 346.358L510.421 330.898Z\\\"', \\n            '                 fill=\\\"#FFF066\\\" />', \\n            '         </g>', \\n            '     </g>'\\n        ));\\n      }\\n}\",\"keccak256\":\"0x2eb90093eec3399faacd7bc457ff8376e80ea278bf2d55ebd6f2e6526c21a31a\",\"license\":\"MIT\"},\"contracts/SockPattern/Patterns/MultiplePattern.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\nlibrary MultiplePattern {\\n      function pattern() public pure returns(string memory){\\n        return  string(abi.encodePacked(\\n            '     <g transform=\\\"translate(225, 300)\\\">', \\n            '         <path', \\n            '             d=\\\"M74.5637 308.897L292.679 295.768C322.227 293.989 348.379 276.04 360.661 249.106L429.699 97.7126C453.446 136.018 530.729 209.728 649.886 198.122L553.833 408.755C516.101 402.722 436.932 417.103 422.104 522.886C289.363 517.124 71.6097 505.053 61.9172 499.314C152.21 431.462 107.97 344.098 74.5637 308.897Z\\\"', \\n            '             stroke=\\\"black\\\" fill-opacity=\\\"0\\\" stroke-width=\\\"8\\\" />', \\n            '         <path', \\n            '             d=\\\"M428.496 100L410.996 133.5C478.196 225.9 585.663 240.667 630.996 236.5L648.496 198.5C532.096 209.3 453.329 137.333 428.496 100Z\\\"', \\n            '             fill=\\\"#FF8A01\\\" stroke=\\\"black\\\" />', \\n            '         <path', \\n            '             d=\\\"M391.996 178L374.496 217.5C441.696 309.9 545.163 327.167 590.496 323L611.996 276.5C495.596 287.3 416.829 215.333 391.996 178Z\\\"', \\n            '             fill=\\\"#B4E847\\\" stroke=\\\"black\\\" />', \\n            '         <path', \\n            '             d=\\\"M370.996 221L353.496 260.5C420.696 352.9 524.663 370.667 569.996 366.5L590.996 319.5C474.596 330.3 395.829 258.333 370.996 221Z\\\"', \\n            '             fill=\\\"#98C1FF\\\" stroke=\\\"black\\\" />', \\n            '         <path', \\n            '             d=\\\"M412.033 133L393.496 178C460.837 276.381 565.067 281.936 610.496 277.5L632.496 237.875C515.851 249.374 436.919 172.75 412.033 133Z\\\"', \\n            '             fill=\\\"#FDED5E\\\" stroke=\\\"black\\\" />', \\n            '         <path', \\n            '             d=\\\"M74.0887 308.74L120.496 305.947C153.902 341.147 200.789 437.209 110.496 505.061C110.496 505.061 71.1348 504.896 61.4422 499.157C151.735 431.305 107.495 343.941 74.0887 308.74Z\\\"', \\n            '             fill=\\\"#FB4A4A\\\" />', \\n            '         <path', \\n            '             d=\\\"M122.772 306.23L170.872 303.335C205.497 339.819 254.093 439.385 160.507 509.713C160.507 509.713 119.71 509.542 109.664 503.594C203.25 433.266 157.396 342.715 122.772 306.23Z\\\"', \\n            '             fill=\\\"#FF8A01\\\" />', \\n            '         <path', \\n            '             d=\\\"M176.287 306.556L224.387 303.66C259.012 340.145 307.609 439.711 214.023 510.038C214.023 510.038 173.225 509.867 163.179 503.919C256.765 433.591 210.912 343.04 176.287 306.556Z\\\"', \\n            '             fill=\\\"#FDED5E\\\" />', \\n            '         <path', \\n            '             d=\\\"M220.921 295.366L274.496 292.141C313.062 332.778 373.394 440.453 269.155 518.786C269.155 518.786 223.714 518.595 212.524 511.97C316.763 433.637 259.487 336.004 220.921 295.366Z\\\"', \\n            '             fill=\\\"#B4E847\\\" />', \\n            '         <path', \\n            '             d=\\\"M280.743 296.895L322.996 288C378.996 322.5 413.496 458 328.978 520.315C328.978 520.315 283.537 520.125 272.347 513.499C376.586 435.166 319.309 337.533 280.743 296.895Z\\\"', \\n            '             fill=\\\"#98C1FF\\\" />', \\n            '         <path', \\n            '             d=\\\"M412.604 134C436.351 172.305 513.634 246.015 632.79 234.409L553.357 408.597C515.626 402.565 436.456 416.946 421.629 522.729C288.888 516.967 71.1342 504.896 61.4417 499.157C151.734 431.305 107.494 343.941 74.0882 308.74L326.496 291C368.496 317.5 421.629 451.5 334.996 518.659M392.995 177C416.742 215.305 494.025 289.015 613.182 277.409M374.496 217.568C398.242 255.874 473.007 335.106 592.163 323.5M353.55 263.5C377.296 301.805 454.579 375.515 573.736 363.909M120.496 305.947C153.902 341.147 200.788 437.209 110.496 505.061M172.996 302.786C206.402 337.987 255.288 441.145 164.996 508.998M220.496 298.45C265.496 334.781 306.788 444.358 216.496 512.21M275.996 294.549C320.996 330.881 366.288 447.729 275.996 515.582\\\"', \\n            '             stroke=\\\"black\\\" fill-opacity=\\\"0\\\" stroke-width=\\\"8\\\" />', \\n            '     </g>'\\n        ));\\n      }\\n}\",\"keccak256\":\"0xbf33a32f2c9ad762714e9c7fa55f1356abcee58e6bc240e1a83a5163442bee23\",\"license\":\"MIT\"},\"contracts/SockPattern/Patterns/StarPattern.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\n// Defining Library\\n\\nlibrary StarPattern {\\n      function pattern() public pure returns(string memory){\\n        return  string(abi.encodePacked(\\n            '         <g transform=\\\"translate(230, 310)\\\">', \\n            '             <mask id=\\\"mask0_109_112\\\" style=\\\"mask-type:alpha\\\" maskUnits=\\\"userSpaceOnUse\\\" x=\\\"60\\\" y=\\\"95\\\" width=\\\"576\\\"', \\n            '                 height=\\\"417\\\">', \\n            '                 <path', \\n            '                     d=\\\"M412.599 511.123C427.084 407.789 504.42 393.741 541.278 399.634L598.118 274.99L635.107 193.878C518.709 205.216 443.215 133.212 420.018 95.7931L407.793 122.602L353.106 242.524C340.789 269.533 314.529 287.502 284.892 289.2L157.513 296.497L115.02 298.931L74.6788 301.242C73.8289 301.29 73.4002 302.291 73.9757 302.918C106.421 338.282 147.654 422.791 60.7515 488.097C65.5205 490.92 121.854 495.313 193.167 499.698C263.434 504.018 348.245 508.329 412.599 511.123Z\\\"', \\n            '                     fill=\\\"black\\\" />', \\n            '             </mask>', \\n            '             <g mask=\\\"url(#mask0_109_112)\\\">', \\n            '                 <path', \\n            '                     d=\\\"M592.541 285.996C574.311 285.258 536.855 295.362 532.871 341.676L546.764 347.337C546.936 345.391 547.232 343.219 547.67 340.898L566.645 346.588C566.805 344.42 567.062 342.123 567.438 339.761L585.113 344.581C582.372 337.394 581.205 318.804 598.468 301.936L589.228 305.164L590.885 295.58L592.541 285.996Z\\\"', \\n            '                     fill=\\\"#FFF066\\\" />', \\n            '                 <path', \\n            '                     d=\\\"M589.228 305.164L590.885 295.58M589.228 305.164C575.506 310.921 569.567 326.381 567.438 339.761M589.228 305.164L598.468 301.936M607.708 298.707L598.468 301.936M590.885 295.58L592.541 285.996C574.311 285.258 536.855 295.362 532.871 341.676L546.764 347.337C546.936 345.391 547.232 343.219 547.67 340.898M590.885 295.58C562.826 296.24 551.046 323.008 547.67 340.898M567.438 339.761L585.113 344.581C582.372 337.394 581.205 318.804 598.468 301.936M567.438 339.761C567.062 342.123 566.805 344.42 566.645 346.588L547.67 340.898\\\"', \\n            '                     stroke=\\\"black\\\" stroke-width=\\\"8\\\" fill-opacity=\\\"0\\\" />', \\n            '                 <path', \\n            '                     d=\\\"M579.709 280.24L587.512 290.228L588.602 291.624L588.302 293.369L586.653 302.946L586.155 305.839L589.003 304.85L598.257 301.634L599.9 301.063L601.439 301.876L612.776 307.87L612.35 295.307L612.289 293.518L613.583 292.28L622.669 283.594L610.372 279.956L608.703 279.462L607.927 277.905L602.212 266.439L595.031 276.857L594.026 278.315L592.27 278.551L579.709 280.24Z\\\"', \\n            '                     fill=\\\"#FFF066\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '                 <path', \\n            '                     d=\\\"M386.574 384.851C404.804 384.114 442.26 394.217 446.245 440.531L432.352 446.193C432.18 444.247 431.883 442.075 431.445 439.753L412.471 445.443C412.31 443.276 412.053 440.978 411.678 438.616L394.003 443.436C396.744 436.25 397.91 417.659 380.647 400.791L389.888 404.02L388.231 394.435L386.574 384.851Z\\\"', \\n            '                     fill=\\\"#FFF066\\\" />', \\n            '                 <path', \\n            '                     d=\\\"M389.888 404.02L388.231 394.435M389.888 404.02C403.609 409.777 409.549 425.237 411.678 438.616M389.888 404.02L380.647 400.791M371.407 397.563L380.647 400.791M388.231 394.435L386.574 384.851C404.804 384.114 442.26 394.217 446.245 440.531L432.352 446.193C432.18 444.247 431.883 442.075 431.445 439.753M388.231 394.435C416.289 395.096 428.07 421.864 431.445 439.753M411.678 438.616L394.003 443.436C396.744 436.25 397.91 417.659 380.647 400.791M411.678 438.616C412.053 440.978 412.31 443.276 412.471 445.443L431.445 439.753\\\"', \\n            '                     stroke=\\\"black\\\" fill-opacity=\\\"0\\\" stroke-width=\\\"8\\\" />', \\n            '                 <path', \\n            '                     d=\\\"M399.406 379.096L391.603 389.083L390.513 390.479L390.814 392.225L392.462 401.801L392.96 404.695L390.112 403.705L380.859 400.489L379.215 399.918L377.676 400.732L366.339 406.725L366.765 394.163L366.826 392.373L365.532 391.136L356.446 382.449L368.743 378.812L370.412 378.318L371.188 376.76L376.903 365.294L384.084 375.713L385.09 377.171L386.845 377.407L399.406 379.096Z\\\"', \\n            '                     fill=\\\"#FFF066\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '                 <path', \\n            '                     d=\\\"M216.697 298.04C234.928 297.302 272.384 307.406 276.368 353.72L262.475 359.381C262.303 357.435 262.006 355.263 261.568 352.942L242.594 358.632C242.434 356.464 242.177 354.167 241.801 351.805L224.126 356.625C226.867 349.438 228.034 330.848 210.771 313.98L220.011 317.208L218.354 307.624L216.697 298.04Z\\\"', \\n            '                     fill=\\\"#FFF066\\\" />', \\n            '                 <path', \\n            '                     d=\\\"M220.011 317.208L218.354 307.624M220.011 317.208C233.733 322.965 239.672 338.425 241.801 351.805M220.011 317.208L210.771 313.98M201.53 310.751L210.771 313.98M218.354 307.624L216.697 298.04C234.928 297.302 272.384 307.406 276.368 353.72L262.475 359.381C262.303 357.435 262.006 355.263 261.568 352.942M218.354 307.624C246.412 308.284 258.193 335.052 261.568 352.942M241.801 351.805L224.126 356.625C226.867 349.438 228.034 330.848 210.771 313.98M241.801 351.805C242.177 354.167 242.434 356.464 242.594 358.632L261.568 352.942\\\"', \\n            '                     stroke=\\\"black\\\" fill-opacity=\\\"0\\\" stroke-width=\\\"8\\\" />', \\n            '                 <path', \\n            '                     d=\\\"M229.53 292.284L221.727 302.272L220.636 303.668L220.937 305.413L222.585 314.99L223.083 317.883L220.235 316.894L210.982 313.678L209.338 313.107L207.799 313.92L196.463 319.914L196.889 307.351L196.949 305.562L195.655 304.324L186.569 295.638L198.866 292L200.535 291.506L201.312 289.949L207.026 278.483L214.208 288.901L215.213 290.359L216.968 290.595L229.53 292.284Z\\\"', \\n            '                     fill=\\\"#FFF066\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '                 <path', \\n            '                     d=\\\"M424.864 196.305C406.634 195.568 369.178 205.671 365.194 251.985L379.087 257.647C379.259 255.701 379.555 253.529 379.993 251.207L398.968 256.897C399.128 254.73 399.385 252.432 399.761 250.07L417.436 254.89C414.695 247.704 413.528 229.113 430.791 212.245L421.551 215.474L423.208 205.89L424.864 196.305Z\\\"', \\n            '                     fill=\\\"#FFF066\\\" />', \\n            '                 <path', \\n            '                     d=\\\"M421.551 215.474L423.208 205.89M421.551 215.474C407.829 221.231 401.89 236.691 399.761 250.07M421.551 215.474L430.791 212.245M440.031 209.017L430.791 212.245M423.208 205.89L424.864 196.305C406.634 195.568 369.178 205.671 365.194 251.985L379.087 257.647C379.259 255.701 379.555 253.529 379.993 251.207M423.208 205.89C395.149 206.55 383.369 233.318 379.993 251.207M399.761 250.07L417.436 254.89C414.695 247.704 413.528 229.113 430.791 212.245M399.761 250.07C399.385 252.432 399.128 254.73 398.968 256.897L379.993 251.207\\\"', \\n            '                     stroke=\\\"black\\\" fill-opacity=\\\"0\\\" stroke-width=\\\"8\\\" />', \\n            '                 <path', \\n            '                     d=\\\"M412.032 190.55L419.835 200.537L420.925 201.933L420.625 203.679L418.976 213.255L418.478 216.149L421.326 215.159L430.58 211.944L432.223 211.372L433.762 212.186L445.099 218.179L444.673 205.617L444.612 203.827L445.906 202.59L454.992 193.904L442.695 190.266L441.026 189.772L440.25 188.214L434.535 176.748L427.354 187.167L426.349 188.625L424.593 188.861L412.032 190.55Z\\\"', \\n            '                     fill=\\\"#FFF066\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '                 <path', \\n            '                     d=\\\"M562.574 419.851C580.804 419.114 618.26 429.217 622.245 475.531L608.352 481.193C608.18 479.247 607.883 477.075 607.445 474.753L588.471 480.443C588.31 478.276 588.053 475.978 587.678 473.616L570.003 478.436C572.744 471.25 573.91 452.659 556.647 435.791L565.888 439.02L564.231 429.435L562.574 419.851Z\\\"', \\n            '                     fill=\\\"#FFF066\\\" />', \\n            '                 <path', \\n            '                     d=\\\"M565.888 439.02L564.231 429.435M565.888 439.02C579.609 444.777 585.549 460.237 587.678 473.616M565.888 439.02L556.647 435.791M547.407 432.563L556.647 435.791M564.231 429.435L562.574 419.851C580.804 419.114 618.26 429.217 622.245 475.531L608.352 481.193C608.18 479.247 607.883 477.075 607.445 474.753M564.231 429.435C592.289 430.096 604.07 456.864 607.445 474.753M587.678 473.616L570.003 478.436C572.744 471.25 573.91 452.659 556.647 435.791M587.678 473.616C588.053 475.978 588.31 478.276 588.471 480.443L607.445 474.753\\\"', \\n            '                     stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '                 <path', \\n            '                     d=\\\"M575.407 414.096L567.604 424.083L566.513 425.479L566.814 427.225L568.462 436.801L568.96 439.695L566.112 438.705L556.859 435.489L555.215 434.918L553.676 435.732L542.34 441.725L542.766 429.163L542.826 427.373L541.532 426.136L532.446 417.449L544.743 413.812L546.412 413.318L547.188 411.76L552.903 400.294L560.085 410.713L561.09 412.171L562.845 412.407L575.407 414.096Z\\\"', \\n            '                     fill=\\\"#FFF066\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '                 <path', \\n            '                     d=\\\"M224.864 454.002C206.634 453.264 169.178 463.368 165.194 509.682L179.086 515.343C179.259 513.397 179.555 511.225 179.993 508.904L198.968 514.593C199.128 512.426 199.385 510.129 199.761 507.767L217.436 512.587C214.695 505.4 213.528 486.81 230.791 469.942L221.551 473.17L223.207 463.586L224.864 454.002Z\\\"', \\n            '                     fill=\\\"#FFF066\\\" />', \\n            '                 <path', \\n            '                     d=\\\"M221.551 473.17L223.207 463.586M221.551 473.17C207.829 478.927 201.889 494.387 199.761 507.767M221.551 473.17L230.791 469.942M240.031 466.713L230.791 469.942M223.207 463.586L224.864 454.002C206.634 453.264 169.178 463.368 165.194 509.682L179.086 515.343C179.259 513.397 179.555 511.225 179.993 508.904M223.207 463.586C195.149 464.246 183.369 491.014 179.993 508.904M199.761 507.767L217.436 512.587C214.695 505.4 213.528 486.81 230.791 469.942M199.761 507.767C199.385 510.129 199.128 512.426 198.968 514.593L179.993 508.904\\\"', \\n            '                     stroke=\\\"black\\\" fill-opacity=\\\"0\\\" stroke-width=\\\"8\\\" />', \\n            '                 <path', \\n            '                     d=\\\"M212.032 448.246L219.835 458.234L220.925 459.629L220.625 461.375L218.976 470.951L218.478 473.845L221.326 472.855L230.58 469.64L232.223 469.069L233.762 469.882L245.099 475.876L244.673 463.313L244.612 461.523L245.906 460.286L254.992 451.6L242.695 447.962L241.026 447.468L240.25 445.911L234.535 434.445L227.354 444.863L226.349 446.321L224.593 446.557L212.032 448.246Z\\\"', \\n            '                     fill=\\\"#FFF066\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />', \\n            '             </g>', \\n            '         </g>'\\n        ));\\n      }\\n}\",\"keccak256\":\"0x56123babcbae1c3fca8345fe7414df66b0b93dca84e0b00efc25d1f8e26c18d7\",\"license\":\"MIT\"},\"contracts/SockPattern/Patterns/StripePattern.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\n// Defining Library\\n\\nlibrary StripePattern {\\n      function pattern() public pure returns(string memory){\\n        return  string(abi.encodePacked(\\n            '     <g transform=\\\"translate(275, 388)\\\">', \\n            '         <path', \\n            '             d=\\\"M43.5928 249.741L261.708 236.611C291.257 234.833 317.408 216.883 329.69 189.949L398.729 38.556M58.8361 291.5L286.729 281.5C316.278 279.722 340.718 246.674 353.001 219.741L421.001 62.5002M60.348 330L300.501 330C348.501 323.5 355.851 297.934 368.133 271L455.024 80.3154M43.5928 373.394L329.69 382.5C359.239 380.722 381.501 362 404.001 311L499.862 96.5002M546.404 108.966L455.024 322.233M7.94603 410.158C17.6386 415.896 235.392 427.967 368.133 433.73C382.961 327.947 462.13 313.566 499.862 319.598L595.915 108.966C476.758 120.572 399.475 46.8616 375.728 8.5558L306.755 159.805C294.438 186.815 268.178 204.783 238.542 206.481L22.1524 218.877C21.3025 218.925 20.8735 219.925 21.4492 220.552C54.669 256.732 96.9391 343.281 7.94603 410.158Z\\\"', \\n            '             stroke=\\\"#000\\\" fill-opacity=\\\"0\\\" stroke-width=\\\"8\\\" />', \\n            '     </g>'\\n        ));\\n      }\\n}\",\"keccak256\":\"0x3162ded4dc83fa11b10aed7d3f98f74b07ecf5eb3b7b95c9cded8f4037e7871c\",\"license\":\"MIT\"},\"contracts/SockPattern/Patterns/UfoPattern.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\n\\nlibrary UfoPattern {\\n      function pattern() public pure returns(string memory){\\n        return  string(abi.encodePacked(\\n   '     <g transform=\\\"translate(230, 310)\\\">', \\n   '<mask id=\\\"mask0_109_75\\\" style=\\\"mask-type:alpha\\\" maskUnits=\\\"userSpaceOnUse\\\" x=\\\"60\\\" y=\\\"95\\\" width=\\\"576\\\" height=\\\"417\\\">', \\n   '    <path', \\n   '        d=\\\"M412.599 511.123C427.084 407.789 504.42 393.741 541.278 399.634L598.118 274.99L635.107 193.878C518.709 205.216 443.215 133.212 420.018 95.7931L407.793 122.602L353.106 242.524C340.789 269.533 314.529 287.502 284.892 289.2L157.513 296.497L115.02 298.931L74.6788 301.242C73.8289 301.29 73.4002 302.291 73.9757 302.918C106.421 338.282 147.654 422.791 60.7515 488.097C65.5205 490.92 121.854 495.313 193.167 499.698C263.434 504.018 348.245 508.329 412.599 511.123Z\\\"', \\n   '        fill=\\\"black\\\" />', \\n   '</mask>', \\n   '<g mask=\\\"url(#mask0_109_75)\\\">', \\n   '    <mask id=\\\"path-2-inside-1_109_75\\\" fill=\\\"white\\\">', \\n   '        <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\"', \\n   '   d=\\\"M596.162 258.679C613.45 260.021 626 264.036 626 268.781C626 273.708 612.472 277.848 594.158 279.025C591.341 281.719 587.523 283.373 583.318 283.373C579.099 283.373 575.27 281.708 572.45 278.999C554.336 277.789 541 273.673 541 268.781C541 264.071 553.363 260.08 570.452 258.71C573.288 254.653 577.993 252 583.318 252C588.629 252 593.324 254.64 596.162 258.679Z\\\" />', \\n   '    </mask>', \\n   '    <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\"', \\n   '        d=\\\"M596.162 258.679C613.45 260.021 626 264.036 626 268.781C626 273.708 612.472 277.848 594.158 279.025C591.341 281.719 587.523 283.373 583.318 283.373C579.099 283.373 575.27 281.708 572.45 278.999C554.336 277.789 541 273.673 541 268.781C541 264.071 553.363 260.08 570.452 258.71C573.288 254.653 577.993 252 583.318 252C588.629 252 593.324 254.64 596.162 258.679Z\\\"', \\n   '        fill=\\\"#D9D9D9\\\" />', \\n   '    <path', \\n   '        d=\\\"M596.162 258.679L592.889 260.979L593.973 262.521L595.853 262.667L596.162 258.679ZM594.158 279.025L593.901 275.033L592.447 275.127L591.393 276.134L594.158 279.025ZM572.45 278.999L575.222 276.115L574.171 275.106L572.717 275.008L572.45 278.999ZM570.452 258.71L570.772 262.697L572.65 262.546L573.73 261.001L570.452 258.71ZM595.853 262.667C604.314 263.324 611.422 264.624 616.3 266.249C618.764 267.069 620.43 267.899 621.398 268.611C622.459 269.392 622 269.492 622 268.781H630C630 265.698 627.973 263.517 626.14 262.168C624.215 260.751 621.663 259.603 618.828 258.659C613.11 256.754 605.299 255.376 596.471 254.691L595.853 262.667ZM622 268.781C622 268.047 622.483 268.186 621.29 269.029C620.215 269.789 618.392 270.655 615.738 271.496C610.482 273.162 602.87 274.457 593.901 275.033L594.415 283.017C603.76 282.416 612.069 281.052 618.156 279.122C621.173 278.165 623.876 276.999 625.91 275.56C627.826 274.205 630 271.979 630 268.781H622ZM591.393 276.134C589.291 278.145 586.452 279.373 583.318 279.373V287.373C588.593 287.373 593.391 285.293 596.923 281.916L591.393 276.134ZM583.318 279.373C580.173 279.373 577.326 278.137 575.222 276.115L569.679 281.884C573.213 285.28 578.025 287.373 583.318 287.373V279.373ZM572.717 275.008C563.847 274.415 556.333 273.119 551.152 271.461C548.535 270.623 546.742 269.765 545.688 269.014C544.522 268.182 545 268.051 545 268.781H537C537 271.957 539.145 274.174 541.045 275.529C543.058 276.963 545.731 278.126 548.713 279.08C554.728 281.005 562.939 282.373 572.184 282.991L572.717 275.008ZM545 268.781C545 269.487 544.546 269.394 545.582 268.626C546.53 267.923 548.165 267.101 550.593 266.285C555.399 264.668 562.409 263.368 570.772 262.697L570.132 254.722C561.406 255.422 553.69 256.803 548.043 258.702C545.243 259.643 542.72 260.788 540.816 262.201C538.999 263.548 537 265.72 537 268.781H545ZM573.73 261.001C575.85 257.97 579.354 256 583.318 256V248C576.632 248 570.725 251.337 567.173 256.418L573.73 261.001ZM583.318 256C587.271 256 590.768 257.96 592.889 260.979L599.435 256.38C595.88 251.32 589.987 248 583.318 248V256Z\\\"', \\n   '        fill=\\\"black\\\" mask=\\\"url(#path-2-inside-1_109_75)\\\" />', \\n   '    <mask id=\\\"path-4-inside-2_109_75\\\" fill=\\\"white\\\">', \\n   '        <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\"', \\n   '   d=\\\"M455.764 154.453C454.604 137.152 456.772 124.155 461.468 123.472C466.343 122.763 472.387 135.555 476.187 153.508C479.258 155.908 481.445 159.449 482.05 163.61C482.657 167.785 481.56 171.814 479.285 174.994C480.694 193.094 478.539 206.883 473.699 207.587C469.038 208.265 463.31 196.605 459.494 179.891C455.072 177.669 451.769 173.394 451.003 168.125C450.239 162.869 452.175 157.843 455.764 154.453Z\\\" />', \\n   '    </mask>', \\n   '    <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\"', \\n   '        d=\\\"M455.764 154.453C454.604 137.152 456.772 124.155 461.468 123.472C466.343 122.763 472.387 135.555 476.187 153.508C479.258 155.908 481.445 159.449 482.05 163.61C482.657 167.785 481.56 171.814 479.285 174.994C480.694 193.094 478.539 206.883 473.699 207.587C469.038 208.265 463.31 196.605 459.494 179.891C455.072 177.669 451.769 173.394 451.003 168.125C450.239 162.869 452.175 157.843 455.764 154.453Z\\\"', \\n   '        fill=\\\"#D9D9D9\\\" />', \\n   '    <path', \\n   '        d=\\\"M455.764 154.453L458.511 157.361L459.882 156.066L459.755 154.185L455.764 154.453ZM476.187 153.508L472.274 154.337L472.575 155.763L473.724 156.66L476.187 153.508ZM479.285 174.994L476.032 172.666L475.184 173.851L475.297 175.304L479.285 174.994ZM459.494 179.891L463.394 179.001L462.974 177.163L461.29 176.317L459.494 179.891ZM459.755 154.185C459.187 145.718 459.451 138.497 460.357 133.435C460.815 130.879 461.396 129.111 461.961 128.05C462.581 126.889 462.747 127.328 462.043 127.43L460.892 119.513C457.841 119.957 455.974 122.277 454.903 124.285C453.778 126.394 453.009 129.085 452.482 132.026C451.421 137.959 451.181 145.887 451.773 154.721L459.755 154.185ZM462.043 127.43C461.316 127.536 461.384 127.038 462.39 128.097C463.298 129.051 464.416 130.731 465.631 133.237C468.036 138.198 470.413 145.545 472.274 154.337L480.1 152.68C478.161 143.518 475.615 135.492 472.83 129.747C471.449 126.898 469.905 124.391 468.189 122.586C466.572 120.884 464.056 119.053 460.892 119.513L462.043 127.43ZM473.724 156.66C476.016 158.451 477.64 161.084 478.091 164.186L486.008 163.035C485.249 157.814 482.5 153.365 478.65 150.357L473.724 156.66ZM478.091 164.186C478.544 167.298 477.73 170.293 476.032 172.666L482.538 177.321C485.39 173.335 486.77 168.272 486.008 163.035L478.091 164.186ZM475.297 175.304C475.987 184.167 475.785 191.789 474.89 197.156C474.438 199.866 473.846 201.763 473.254 202.914C472.6 204.188 472.401 203.734 473.123 203.629L474.274 211.546C477.417 211.089 479.303 208.647 480.369 206.571C481.499 204.373 482.265 201.56 482.781 198.473C483.82 192.244 483.992 183.921 483.273 174.683L475.297 175.304ZM473.123 203.629C473.822 203.527 473.795 203.99 472.886 203.075C472.054 202.239 471.005 200.738 469.848 198.454C467.557 193.93 465.261 187.18 463.394 179.001L455.594 180.781C457.543 189.316 460.019 196.753 462.711 202.068C464.046 204.703 465.541 207.035 467.213 208.717C468.808 210.32 471.245 211.986 474.274 211.546L473.123 203.629ZM461.29 176.317C457.985 174.656 455.532 171.472 454.961 167.549L447.045 168.7C448.007 175.317 452.159 180.681 457.698 183.465L461.29 176.317ZM454.961 167.549C454.392 163.637 455.828 159.894 458.511 157.361L453.018 151.545C448.522 155.791 446.085 162.1 447.045 168.7L454.961 167.549Z\\\"', \\n   '        fill=\\\"black\\\" mask=\\\"url(#path-4-inside-2_109_75)\\\" />', \\n   '    <mask id=\\\"path-6-inside-3_109_75\\\" fill=\\\"white\\\">', \\n   '        <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\"', \\n   '   d=\\\"M366.72 260.447C382.233 252.699 395.06 249.683 397.502 253.751C400.038 257.975 390.57 268.488 375.474 278.923C374.445 282.682 372.023 286.066 368.417 288.23C364.801 290.401 360.66 290.945 356.849 290.073C340.695 298.358 327.142 301.693 324.625 297.499C322.201 293.461 330.747 283.676 344.693 273.706C345.036 268.768 347.705 264.072 352.27 261.331C356.824 258.598 362.208 258.445 366.72 260.447Z\\\" />', \\n   '    </mask>', \\n   '    <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\"', \\n   '        d=\\\"M366.72 260.447C382.233 252.699 395.06 249.683 397.502 253.751C400.038 257.975 390.57 268.488 375.474 278.923C374.445 282.682 372.023 286.066 368.417 288.23C364.801 290.401 360.66 290.945 356.849 290.073C340.695 298.358 327.142 301.693 324.625 297.499C322.201 293.461 330.747 283.676 344.693 273.706C345.036 268.768 347.705 264.072 352.27 261.331C356.824 258.598 362.208 258.445 366.72 260.447Z\\\"', \\n   '        fill=\\\"#D9D9D9\\\" />', \\n   '    <path', \\n   '        d=\\\"M366.72 260.447L365.098 264.103L366.821 264.868L368.508 264.026L366.72 260.447ZM375.474 278.923L373.199 275.632L372 276.461L371.616 277.867L375.474 278.923ZM356.849 290.073L357.741 286.174L356.32 285.849L355.023 286.514L356.849 290.073ZM344.693 273.706L347.019 276.96L348.552 275.864L348.683 273.983L344.693 273.706ZM368.508 264.026C376.1 260.234 382.863 257.69 387.882 256.572C390.417 256.008 392.272 255.861 393.469 255.974C394.78 256.097 394.439 256.42 394.073 255.81L400.932 251.693C399.345 249.049 396.484 248.222 394.218 248.009C391.838 247.785 389.059 248.114 386.143 248.764C380.26 250.074 372.854 252.913 364.933 256.869L368.508 264.026ZM394.073 255.81C393.695 255.18 394.18 255.051 393.592 256.388C393.061 257.593 391.943 259.273 390.101 261.361C386.452 265.494 380.592 270.522 373.199 275.632L377.748 282.213C385.452 276.888 391.873 271.442 396.099 266.655C398.193 264.282 399.911 261.89 400.914 259.61C401.86 257.462 402.578 254.434 400.932 251.693L394.073 255.81ZM371.616 277.867C370.848 280.673 369.046 283.187 366.359 284.801L370.476 291.66C374.999 288.944 378.042 284.691 379.332 279.978L371.616 277.867ZM366.359 284.801C363.663 286.419 360.585 286.824 357.741 286.174L355.957 293.973C360.735 295.065 365.938 294.384 370.476 291.66L366.359 284.801ZM355.023 286.514C347.114 290.571 340.004 293.327 334.708 294.572C332.033 295.201 330.054 295.387 328.764 295.286C327.336 295.173 327.679 294.815 328.054 295.44L321.195 299.558C322.83 302.281 325.81 303.078 328.136 303.261C330.6 303.455 333.491 303.076 336.538 302.36C342.686 300.915 350.43 297.861 358.674 293.632L355.023 286.514ZM328.054 295.44C328.418 296.046 327.981 296.199 328.473 295.008C328.924 293.917 329.903 292.371 331.564 290.422C334.853 286.562 340.195 281.839 347.019 276.96L342.366 270.452C335.245 275.543 329.34 280.698 325.475 285.233C323.56 287.481 321.986 289.761 321.08 291.952C320.216 294.042 319.62 296.933 321.195 299.558L328.054 295.44ZM348.683 273.983C348.94 270.293 350.93 266.801 354.329 264.761L350.211 257.902C344.479 261.343 341.132 267.244 340.702 273.428L348.683 273.983ZM354.329 264.761C357.719 262.726 361.725 262.606 365.098 264.103L368.343 256.791C362.691 254.283 355.93 254.469 350.211 257.902L354.329 264.761Z\\\"', \\n   '        fill=\\\"black\\\" mask=\\\"url(#path-6-inside-3_109_75)\\\" />', \\n   '    <mask id=\\\"path-8-inside-4_109_75\\\" fill=\\\"white\\\">', \\n   '        <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\"', \\n   '   d=\\\"M121.509 296.35C106.122 288.354 93.3459 285.132 90.8386 289.16C88.2355 293.343 97.5335 304.006 112.46 314.682C113.428 318.458 115.796 321.88 119.366 324.102C122.947 326.331 127.079 326.941 130.903 326.13C146.923 334.674 160.42 338.226 163.004 334.073C165.493 330.074 157.105 320.153 143.321 309.96C143.057 305.018 140.464 300.279 135.943 297.466C131.434 294.659 126.053 294.42 121.509 296.35Z\\\" />', \\n   '    </mask>', \\n   '    <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\"', \\n   '        d=\\\"M121.509 296.35C106.122 288.354 93.3459 285.132 90.8386 289.16C88.2355 293.343 97.5335 304.006 112.46 314.682C113.428 318.458 115.796 321.88 119.366 324.102C122.947 326.331 127.079 326.941 130.903 326.13C146.923 334.674 160.42 338.226 163.004 334.073C165.493 330.074 157.105 320.153 143.321 309.96C143.057 305.018 140.464 300.279 135.943 297.466C131.434 294.659 126.053 294.42 121.509 296.35Z\\\"', \\n   '        fill=\\\"#D9D9D9\\\" />', \\n   '    <path', \\n   '        d=\\\"M121.509 296.35L123.073 300.031L121.337 300.768L119.664 299.899L121.509 296.35ZM112.46 314.682L114.787 311.429L115.973 312.277L116.335 313.689L112.46 314.682ZM130.903 326.13L130.074 322.217L131.5 321.915L132.786 322.601L130.903 326.13ZM143.321 309.96L140.943 313.177L139.427 312.056L139.327 310.174L143.321 309.96ZM119.664 299.899C112.134 295.986 105.412 293.334 100.412 292.136C97.8864 291.531 96.034 291.354 94.8356 291.448C93.5228 291.55 93.859 291.878 94.2347 291.274L87.4426 287.047C89.0719 284.429 91.9453 283.649 94.2142 283.472C96.5974 283.286 99.3708 283.66 102.276 284.356C108.137 285.761 115.497 288.718 123.353 292.8L119.664 299.899ZM94.2347 291.274C94.6227 290.65 94.1395 290.513 94.7062 291.859C95.2173 293.073 96.308 294.771 98.1167 296.888C101.698 301.08 107.478 306.201 114.787 311.429L110.133 317.936C102.516 312.488 96.1828 306.939 92.0347 302.085C89.9784 299.678 88.2999 297.26 87.3332 294.964C86.4223 292.8 85.7529 289.762 87.4426 287.047L94.2347 291.274ZM116.335 313.689C117.057 316.506 118.818 319.05 121.48 320.706L117.252 327.498C112.773 324.71 109.799 320.409 108.585 315.676L116.335 313.689ZM121.48 320.706C124.149 322.367 127.22 322.822 130.074 322.217L131.732 330.044C126.937 331.059 121.746 330.294 117.252 327.498L121.48 320.706ZM132.786 322.601C140.629 326.784 147.694 329.654 152.97 330.984C155.634 331.656 157.609 331.874 158.901 331.793C160.33 331.704 159.994 331.34 159.608 331.959L166.4 336.186C164.722 338.883 161.729 339.632 159.4 339.778C156.934 339.932 154.05 339.507 151.014 338.742C144.89 337.198 137.197 334.02 129.021 329.66L132.786 322.601ZM159.608 331.959C159.235 332.559 159.669 332.72 159.196 331.52C158.763 330.423 157.809 328.86 156.179 326.885C152.953 322.973 147.688 318.164 140.943 313.177L145.699 306.744C152.738 311.949 158.559 317.198 162.351 321.794C164.23 324.073 165.767 326.378 166.638 328.584C167.468 330.687 168.018 333.588 166.4 336.186L159.608 331.959ZM139.327 310.174C139.129 306.48 137.195 302.956 133.83 300.862L138.057 294.07C143.733 297.603 146.984 303.556 147.315 309.747L139.327 310.174ZM133.83 300.862C130.473 298.773 126.469 298.589 123.073 300.031L119.945 292.668C125.637 290.251 132.394 290.546 138.057 294.07L133.83 300.862Z\\\"', \\n   '        fill=\\\"black\\\" mask=\\\"url(#path-8-inside-4_109_75)\\\" />', \\n   '    <mask id=\\\"path-10-inside-5_109_75\\\" fill=\\\"white\\\">', \\n   '        <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\"', \\n   '   d=\\\"M209.459 424.246C224.845 416.25 237.622 413.028 240.129 417.057C242.732 421.24 233.434 431.903 218.508 442.579C217.54 446.354 215.172 449.777 211.602 451.998C208.02 454.227 203.889 454.837 200.064 454.027C184.045 462.571 170.548 466.122 167.964 461.969C165.475 457.971 173.863 448.05 187.647 437.857C187.911 432.915 190.504 428.176 195.025 425.362C199.534 422.556 204.915 422.316 209.459 424.246Z\\\" />', \\n   '    </mask>', \\n   '    <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\"', \\n   '        d=\\\"M209.459 424.246C224.845 416.25 237.622 413.028 240.129 417.057C242.732 421.24 233.434 431.903 218.508 442.579C217.54 446.354 215.172 449.777 211.602 451.998C208.02 454.227 203.889 454.837 200.064 454.027C184.045 462.571 170.548 466.122 167.964 461.969C165.475 457.971 173.863 448.05 187.647 437.857C187.911 432.915 190.504 428.176 195.025 425.362C199.534 422.556 204.915 422.316 209.459 424.246Z\\\"', \\n   '        fill=\\\"#D9D9D9\\\" />', \\n   '    <path', \\n   '        d=\\\"M209.459 424.246L207.895 427.928L209.63 428.665L211.303 427.796L209.459 424.246ZM218.508 442.579L216.181 439.325L214.995 440.173L214.633 441.585L218.508 442.579ZM200.064 454.027L200.893 450.114L199.468 449.812L198.182 450.498L200.064 454.027ZM187.647 437.857L190.025 441.073L191.541 439.952L191.641 438.07L187.647 437.857ZM211.303 427.796C218.834 423.882 225.555 421.23 230.556 420.032C233.081 419.427 234.934 419.251 236.132 419.344C237.445 419.446 237.109 419.774 236.733 419.17L243.525 414.943C241.896 412.325 239.022 411.545 236.754 411.368C234.37 411.183 231.597 411.556 228.692 412.252C222.83 413.657 215.47 416.614 207.614 420.697L211.303 427.796ZM236.733 419.17C236.345 418.547 236.828 418.41 236.262 419.756C235.751 420.969 234.66 422.668 232.851 424.784C229.269 428.976 223.49 434.097 216.181 439.325L220.835 445.832C228.452 440.384 234.785 434.836 238.933 429.981C240.989 427.575 242.668 425.156 243.635 422.86C244.546 420.697 245.215 417.658 243.525 414.943L236.733 419.17ZM214.633 441.585C213.911 444.403 212.15 446.946 209.488 448.602L213.715 455.395C218.194 452.607 221.169 448.305 222.382 443.572L214.633 441.585ZM209.488 448.602C206.819 450.264 203.748 450.719 200.893 450.114L199.235 457.94C204.03 458.956 209.222 458.191 213.715 455.395L209.488 448.602ZM198.182 450.498C190.338 454.681 183.274 457.551 177.998 458.881C175.334 459.552 173.358 459.77 172.067 459.69C170.637 459.6 170.974 459.236 171.36 459.856L164.568 464.083C166.246 466.779 169.238 467.528 171.567 467.674C174.034 467.828 176.918 467.403 179.954 466.638C186.077 465.094 193.771 461.917 201.947 457.556L198.182 450.498ZM171.36 459.856C171.733 460.455 171.298 460.616 171.772 459.417C172.205 458.319 173.159 456.757 174.789 454.781C178.015 450.87 183.28 446.061 190.025 441.073L185.268 434.641C178.23 439.846 172.409 445.094 168.617 449.691C166.738 451.969 165.201 454.274 164.33 456.48C163.5 458.584 162.95 461.484 164.568 464.083L171.36 459.856ZM191.641 438.07C191.839 434.376 193.773 430.853 197.138 428.758L192.911 421.966C187.235 425.499 183.983 431.453 183.653 437.643L191.641 438.07ZM197.138 428.758C200.495 426.669 204.499 426.485 207.895 427.928L211.023 420.565C205.331 418.147 198.573 418.442 192.911 421.966L197.138 428.758Z\\\"', \\n   '        fill=\\\"black\\\" mask=\\\"url(#path-10-inside-5_109_75)\\\" />', \\n   '    <mask id=\\\"path-12-inside-6_109_75\\\" fill=\\\"white\\\">', \\n   '        <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\"', \\n   '   d=\\\"M409.781 405.227C421.006 418.444 426.996 430.18 423.627 433.523C420.13 436.993 407.663 430.306 393.927 418.136C390.031 418.034 386.167 416.489 383.205 413.504C380.233 410.51 378.718 406.619 378.655 402.71C366.755 388.998 360.283 376.633 363.755 373.188C367.098 369.87 378.639 375.835 391.649 386.999C396.526 386.155 401.724 387.626 405.474 391.405C409.216 395.176 410.649 400.368 409.781 405.227Z\\\" />', \\n   '    </mask>', \\n   '    <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\"', \\n   '        d=\\\"M409.781 405.227C421.006 418.444 426.996 430.18 423.627 433.523C420.13 436.993 407.663 430.306 393.927 418.136C390.031 418.034 386.167 416.489 383.205 413.504C380.233 410.51 378.718 406.619 378.655 402.71C366.755 388.998 360.283 376.633 363.755 373.188C367.098 369.87 378.639 375.835 391.649 386.999C396.526 386.155 401.724 387.626 405.474 391.405C409.216 395.176 410.649 400.368 409.781 405.227Z\\\"', \\n   '        fill=\\\"#D9D9D9\\\" />', \\n   '    <path', \\n   '        d=\\\"M409.781 405.227L405.843 404.524L405.511 406.38L406.732 407.817L409.781 405.227ZM393.927 418.136L396.58 415.142L395.489 414.176L394.032 414.137L393.927 418.136ZM378.655 402.71L382.654 402.645L382.631 401.188L381.676 400.088L378.655 402.71ZM391.649 386.999L389.044 390.035L390.475 391.262L392.332 390.94L391.649 386.999ZM406.732 407.817C412.226 414.285 416.309 420.246 418.592 424.854C419.746 427.181 420.33 428.947 420.507 430.136C420.7 431.439 420.305 431.184 420.81 430.683L426.445 436.362C428.634 434.19 428.754 431.215 428.42 428.964C428.07 426.599 427.087 423.979 425.761 421.302C423.085 415.901 418.561 409.386 412.829 402.638L406.732 407.817ZM420.81 430.683C421.331 430.166 421.573 430.606 420.134 430.354C418.837 430.127 416.938 429.442 414.472 428.151C409.587 425.594 403.306 421.102 396.58 415.142L391.274 421.13C398.284 427.341 405.104 432.277 410.762 435.238C413.566 436.706 416.298 437.803 418.752 438.234C421.064 438.639 424.175 438.614 426.445 436.362L420.81 430.683ZM394.032 414.137C391.124 414.061 388.252 412.912 386.044 410.687L380.366 416.322C384.082 420.066 388.938 422.007 393.822 422.135L394.032 414.137ZM386.044 410.687C383.829 408.455 382.701 405.563 382.654 402.645L374.655 402.774C374.734 407.675 376.638 412.565 380.366 416.322L386.044 410.687ZM381.676 400.088C375.849 393.374 371.476 387.128 369.003 382.281C367.755 379.834 367.102 377.956 366.892 376.679C366.661 375.266 367.091 375.513 366.573 376.027L360.938 370.348C358.683 372.585 358.62 375.67 358.998 377.973C359.397 380.411 360.455 383.128 361.877 385.917C364.747 391.542 369.561 398.334 375.634 405.331L381.676 400.088ZM366.573 376.027C366.071 376.524 365.818 376.137 367.093 376.331C368.259 376.508 369.995 377.09 372.284 378.238C376.817 380.511 382.678 384.571 389.044 390.035L394.254 383.964C387.611 378.263 381.196 373.758 375.87 371.087C373.23 369.763 370.64 368.778 368.296 368.422C366.06 368.081 363.11 368.192 360.938 370.348L366.573 376.027ZM392.332 390.94C395.977 390.309 399.843 391.409 402.635 394.223L408.314 388.588C403.604 383.842 397.075 382 390.967 383.058L392.332 390.94ZM402.635 394.223C405.42 397.029 406.492 400.892 405.843 404.524L413.718 405.931C414.806 399.844 413.011 393.322 408.314 388.588L402.635 394.223Z\\\"', \\n   '        fill=\\\"black\\\" mask=\\\"url(#path-12-inside-6_109_75)\\\" />', \\n   '</g>', \\n   '     </g>'\\n        ));\\n      }\\n}\",\"keccak256\":\"0x9e3dcd790742fcd721f76c5878f38daa5914cffa211167c1ed5db19a0a8385b3\",\"license\":\"MIT\"},\"contracts/SockPin/PinLibrary.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\n// GET LISTED ON OPENSEA: https://testnets.opensea.io/get-listed/step-two\\n\\n// Defining Library\\nlibrary PinLibrary {\\n\\n\\n    function GetPin(uint256 currentPin) public pure returns(string memory){\\n      if (currentPin == 0) {\\n        // Lightning\\n        return  string(abi.encodePacked( \\n               '<g transform=\\\"translate(590, 254)\\\">',\\n               '<path',\\n               '    d=\\\"M88.8426 20.2693L59.0795 4.9411L21.0086 40.9829L33.9179 47.6312L3.15136 80.9425L68.0041 46.6364L54.7363 39.8033L88.8426 20.2693Z\\\" fill=\\\"#FFF066\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>'\\n               '</g>'\\n          ));\\n      }\\n      else if (currentPin == 1) {\\n        // Alien\\n        return string(abi.encodePacked(\\n            '<g transform=\\\"translate(590, 250)\\\">',\\n            '     <path d=\\\"M29.7081 93.5393C40.2096 98.6588 52.7676 95.2633 63.0806 89.1762C73.5261 83.0109 82.9144 73.3983 87.5508 63.8877C96.9893 44.5267 88.9456 21.1801 69.5846 11.7416C50.2236 2.30309 26.877 10.3469 17.4385 29.7079C12.8021 39.2185 11.0122 52.5353 12.5893 64.5616C14.1464 76.4354 19.2067 88.4199 29.7081 93.5393Z\\\" fill=\\\"#B4E847\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n            '     <ellipse cx=\\\"37.7803\\\" cy=\\\"43.6872\\\" rx=\\\"12.5\\\" ry=\\\"9.5\\\" transform=\\\"rotate(74.2525 37.7803 43.6872)\\\" />', \\n            '     <ellipse rx=\\\"12.5\\\" ry=\\\"9.5\\\" transform=\\\"matrix(-0.925382 0.379036 0.379036 0.925382 64.7465 56.8328)\\\" />', \\n            '     <circle cx=\\\"38.1128\\\" cy=\\\"39.7865\\\" r=\\\"2\\\" transform=\\\"rotate(25.9893 38.1128 39.7865)\\\" fill=\\\"#D9D9D9\\\"/>', \\n            '     <circle cx=\\\"63.2807\\\" cy=\\\"52.056\\\" r=\\\"2\\\" transform=\\\"rotate(25.9893 63.2807 52.056)\\\" fill=\\\"#D9D9D9\\\"/>', \\n            '     <circle cx=\\\"41.1855\\\" cy=\\\"65.1851\\\" r=\\\"1.74906\\\" transform=\\\"rotate(17.0548 41.1855 65.1851)\\\" />', \\n            '     <circle cx=\\\"46.7598\\\" cy=\\\"66.8951\\\" r=\\\"1.74906\\\" transform=\\\"rotate(17.0548 46.7598 66.8951)\\\" />', \\n            '</g>'\\n        ));\\n      }\\n      else if (currentPin == 2) {\\n        // Alien\\n        return string(abi.encodePacked(\\n            '<g transform=\\\"translate(590, 250)\\\">',\\n            '<path ',\\n            '   d=\\\"M29.7081 93.5393C40.2096 98.6588 52.7676 95.2633 63.0806 89.1762C73.5261 83.0109 82.9144 73.3983 87.5508 63.8877C96.9893 44.5267 88.9456 21.1801 69.5846 11.7416C50.2236 2.30309 26.877 10.3469 17.4385 29.7079C12.8021 39.2185 11.0122 52.5353 12.5893 64.5616C14.1464 76.4354 19.2067 88.4199 29.7081 93.5393Z\\\"'\\n            '   fill=\\\"#B4E847\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"',\\n            '/>',\\n            '<ellipse cx=\\\"37.7803\\\" cy=\\\"43.6872\\\" rx=\\\"12.5\\\" ry=\\\"9.5\\\" transform=\\\"rotate(74.2525 37.7803 43.6872)\\\"  />',\\n            '<ellipse rx=\\\"12.5\\\" ry=\\\"9.5\\\" transform=\\\"matrix(-0.925382 0.379036 0.379036 0.925382 64.7465 56.8328)\\\"  />',\\n            '<circle cx=\\\"38.1128\\\" cy=\\\"39.7865\\\" r=\\\"2\\\" transform=\\\"rotate(25.9893 38.1128 39.7865)\\\" fill=\\\"#D9D9D9\\\" />',\\n            '<circle cx=\\\"63.2807\\\" cy=\\\"52.056\\\" r=\\\"2\\\" transform=\\\"rotate(25.9893 63.2807 52.056)\\\" fill=\\\"#D9D9D9\\\" />',\\n            '<circle cx=\\\"41.1855\\\" cy=\\\"65.1851\\\" r=\\\"1.74906\\\" transform=\\\"rotate(17.0548 41.1855 65.1851)\\\"  />',\\n            '<circle cx=\\\"46.7598\\\" cy=\\\"66.8951\\\" r=\\\"1.74906\\\" transform=\\\"rotate(17.0548 46.7598 66.8951)\\\"  />',\\n            '</g>'\\n        ));\\n      }\\n      else if(currentPin == 3) {\\n          // Cloud\\n            return  string(abi.encodePacked(\\n                '<g transform=\\\"translate(560, 260)\\\">',\\n                '   <path d=\\\"M106.728 33.9123L105.181 37.7282L109.04 39.1645C118.923 42.8428 124.987 53.4045 122.786 64.2925C120.351 76.3417 108.76 84.0783 96.9789 81.6971L22.4197 66.6271C10.6385 64.2458 2.9622 52.6148 5.39763 40.5656C7.83305 28.5163 19.424 20.7797 31.2052 23.1609L31.2081 23.1615L35.069 23.9419L35.9086 20.0934C38.1898 9.63692 48.3175 2.96989 58.5999 5.04822C63.2088 5.97977 67.0906 8.50443 69.8108 11.9603L72.5348 15.4209L75.7181 12.3775C80.1475 8.14282 86.4306 6.09598 92.7866 7.38067C103.169 9.47916 109.943 19.7325 107.794 30.3647C107.544 31.604 107.184 32.7888 106.728 33.9123Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />',\\n                '</g>'\\n            ));\\n      }\\n      else if(currentPin == 4){\\n          // Heart\\n         return string(abi.encodePacked(\\n            '<g transform=\\\"translate(560, 240)\\\">',\\n            '  <path d=\\\"M96.5897 50.9757C100.864 37.753 93.8077 23.9809 80.9685 19.8308C70.6011 16.4796 59.5213 20.7899 53.3964 29.4733C53.5101 18.8482 46.9696 9.1155 36.6021 5.76429C23.7604 1.61331 10.0841 8.35624 5.80832 21.5839C3.65086 28.2584 4.78503 33.8332 7.43234 40.2624L33.084 92.3863L84.3475 65.1246C90.2609 61.4626 94.4339 57.6451 96.5897 50.9757Z\\\" fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />',\\n            '</g>'\\n         ));\\n      }\\n\\n      else if(currentPin == 5) {\\n         //Flower\\n         return string(abi.encodePacked(\\n            '<g transform=\\\"translate(560, 230)\\\">',\\n            '<path d=\\\"M62.2247 103.528C61.4863 102.507 60.8336 101.367 60.2579 100.151C59.6921 101.363 59.0444 102.502 58.3024 103.527L58.3023 103.528C50.8756 113.79 36.5564 116.072 26.3249 108.609C16.1029 101.152 13.844 86.8002 21.2636 76.547C21.9876 75.5465 22.8642 74.6178 23.8436 73.7575C22.4994 73.5423 21.2218 73.2468 20.0405 72.8614C8.01247 68.9376 1.45168 55.9809 5.35008 43.9344L5.35009 43.9344C9.25076 31.8814 22.1584 25.2633 34.1935 29.1894C35.3873 29.5789 36.5933 30.1385 37.7894 30.8211C37.5085 29.5113 37.3472 28.2145 37.3472 26.9613C37.3472 14.2952 47.5782 3.99993 60.2327 3.99993C72.8873 3.99993 83.1183 14.2952 83.1183 26.9613C83.1183 28.2074 82.9587 29.4966 82.6808 30.7988C83.8638 30.1305 85.0628 29.5797 86.2591 29.1894L87.4997 32.9922L86.2592 29.1894C98.2945 25.2633 111.202 31.8814 115.103 43.9344L111.297 45.166L115.103 43.9344C119.001 55.9809 112.44 68.9376 100.412 72.8614C99.2488 73.241 97.9938 73.5036 96.6869 73.6729C97.658 74.5767 98.5312 75.5357 99.263 76.5471C106.683 86.8002 104.424 101.152 94.2019 108.609C83.9703 116.072 69.6511 113.791 62.2247 103.528ZM62.2247 103.528L65.4652 101.183L62.2247 103.528ZM61.5772 63.466C61.3499 63.5924 61.1267 63.7313 60.9092 63.8838L60.7404 63.7807C60.2416 63.4761 59.7047 63.2599 59.1698 63.1057C59.4242 62.3455 59.5425 61.5768 59.5744 60.8416C59.7847 60.869 60.0046 60.8849 60.2327 60.8849C60.5827 60.8849 60.9134 60.8476 61.2193 60.7884C61.2171 61.6984 61.3246 62.5988 61.5772 63.466Z\\\"',\\n            ' fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />'\\n            '<circle cx=\\\"59.7266\\\" cy=\\\"62.5\\\" r=\\\"23.5\\\" fill=\\\"#FDED5E\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />',\\n            '</g>'));\\n      }\\n      else if(currentPin == 6){\\n        // Star\\n        return string(abi.encodePacked(\\n            '<g transform=\\\"translate(590, 250)\\\">',\\n            '   <path d=\\\"M46.2266 7.94755L58.2876 28.6551L59.1748 30.1783L60.8975 30.5513L84.3187 35.6231L68.3517 53.4929L67.1772 54.8073L67.3548 56.561L69.7688 80.4031L47.8396 70.7396L46.2266 70.0288L44.6136 70.7396L22.6843 80.4031L25.0983 56.561L25.2759 54.8073L24.1014 53.4929L8.13442 35.6231L31.5556 30.5513L33.2783 30.1783L34.1655 28.6551L46.2266 7.94755Z\\\" fill=\\\"#FDED5E\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" />',\\n            '</g>'));\\n      }\\n      else if(currentPin == 7){\\n        //Skull\\n        return string(abi.encodePacked(\\n            '<g transform=\\\"translate(570, 250)\\\">',\\n            '     <path d=\\\"M58.0915 93.8046C60.0253 94.3978 61.9696 94.8376 63.9114 95.1308M63.9114 95.1308C83.2387 98.049 102.311 86.4477 108.222 67.1817C114.726 45.9802 102.827 23.5251 81.645 17.027C80.4816 16.6701 63.973 11.6624 62.8048 11.4151C42.7042 7.15984 22.3203 18.9064 16.1734 38.9435C11.9616 52.6727 15.4667 66.9276 24.2124 77.0348L18.4818 88.1507C20.775 90.5559 24.4587 93.6654 29.1343 96.5428M63.9114 95.1308L63.9854 103.967C56.9801 105.389 50.205 104.793 44.0582 103.114M29.1343 96.5428L32.3929 85.9209M29.1343 96.5428C33.3881 99.1607 38.4628 101.586 44.0582 103.114M44.0582 103.114L47.225 92.7915\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" fill=\\\"#FDFFBC\\\"/>', \\n            '     <path d=\\\"M60.3543 48.4399C56.8607 56.8824 59.7427 65.2297 65.6042 67.6553C71.4657 70.0809 79.4034 66.2108 82.897 57.7683C86.3907 49.3258 83.5086 40.9784 77.6471 38.5529C71.7856 36.1273 63.8479 39.9973 60.3543 48.4399Z\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\" fill=\\\"#FDFFBC\\\"/>', \\n            '     <path d=\\\"M31.2449 36.394C27.7513 44.8365 30.6333 53.1838 36.4948 55.6094C42.3563 58.035 50.294 54.1649 53.7877 45.7224C57.2813 37.2799 54.3993 28.9325 48.5377 26.507C42.6762 24.0814 34.7385 27.9514 31.2449 36.394Z\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\" fill=\\\"#FDFFBC\\\"/>', \\n            '     <path d=\\\"M83.9143 58.2674C80.7069 66.0181 74.2227 70.694 69.4313 68.7113C65.6343 67.14 64.0399 61.8587 65.1379 55.8769L71.7808 56.5338L66.5632 51.0873C69.7705 43.3365 76.2548 38.6606 81.0461 40.6434C85.8375 42.6261 87.1216 50.5166 83.9143 58.2674Z\\\" />', \\n            '     <path d=\\\"M54.5725 45.0506C51.3651 52.8013 44.8809 57.4772 40.0895 55.4945C36.2925 53.9232 34.6981 48.6419 35.7961 42.6601L42.439 43.317L37.2214 37.8705C40.4287 30.1197 46.913 25.4438 51.7043 27.4266C56.4957 29.4093 57.7798 37.2998 54.5725 45.0506Z\\\" />', \\n            '     <circle cx=\\\"42.2129\\\" cy=\\\"68.2806\\\" r=\\\"1.99664\\\" transform=\\\"rotate(17.0548 42.2129 68.2806)\\\" />', \\n            '     <circle cx=\\\"48.5762\\\" cy=\\\"70.2327\\\" r=\\\"1.99664\\\" transform=\\\"rotate(17.0548 48.5762 70.2327)\\\" />', \\n            '</g>'\\n        ));\\n      }\\n      else if(currentPin == 8){\\n        // Frog\\n        return string(abi.encodePacked(\\n          '<g transform=\\\"translate(560, 240)\\\">',\\n          '     <path d=\\\"M45.9289 5.26326C34.7615 1.75155 22.887 8.0221 19.3715 19.2015C18.0339 23.4553 18.0963 27.8206 19.2999 31.7857C11.2235 38.9004 3.1217 50.3726 5.11448 63.355C7.33421 77.816 21.5963 91.4101 54.6278 101.651C87.5688 112.153 107.021 109.145 117.087 98.5219C126.12 88.9894 126.009 74.9214 123.453 64.4665C126.678 61.9079 129.203 58.3825 130.532 54.1569C134.047 42.9775 127.899 31.0394 116.731 27.5277C107.378 24.5864 97.5281 28.5076 92.5096 36.4279C81.1808 28.4047 68.828 26.3004 60.7012 26.3393C61.0799 17.0037 55.2542 8.19568 45.9289 5.26326Z\\\" fill=\\\"#B4E847\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n          '     <path d=\\\"M24.8808 52.2439C21.2469 59.9578 22.1528 74.9755 56.3831 86.3972C99.8373 100.897 102.614 82.9118 106.565 79.5029\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\" stroke-linecap=\\\"round\\\"/>', \\n          '     <circle cx=\\\"39.3517\\\" cy=\\\"26.2306\\\" r=\\\"10.048\\\" transform=\\\"rotate(6.3946 39.3517 26.2306)\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n          '     <circle cx=\\\"110.136\\\" cy=\\\"47.6446\\\" r=\\\"10.048\\\" transform=\\\"rotate(6.3946 110.136 47.6446)\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n          '</g>'\\n        ));\\n      }\\n      else if(currentPin == 9) {\\n        // Bear\\n        return string(abi.encodePacked(\\n          '<g transform=\\\"translate(572, 240)\\\">',\\n          '     <path d=\\\"M78.1321 35.5307C76.9687 35.1738 60.4601 30.166 59.2919 29.9187L60.399 22.464C60.399 13.0751 52.7879 5.46399 43.399 5.46399C34.0102 5.46399 26.399 13.0752 26.399 22.464C26.399 27.069 28.23 31.2463 31.2037 34.3077C22.6098 39.1935 15.79 47.2459 12.6605 57.4471C8.4487 71.1764 11.9538 85.4313 20.6995 95.5384C26.0863 100.686 40.4036 111.247 54.5785 112.308C56.5124 112.901 58.4567 113.341 60.3985 113.634C79.7258 116.553 98.7984 104.951 104.709 85.6854C106.977 78.2901 107.007 70.7422 105.185 63.7723C105.923 63.8703 106.677 63.9209 107.443 63.9209C116.832 63.9209 124.443 56.3097 124.443 46.9209C124.443 37.5321 116.832 29.9209 107.443 29.9209C99.6643 29.9209 93.1061 35.1449 91.0851 42.2758C87.3242 39.3317 82.9703 37.0149 78.1321 35.5307Z\\\" fill=\\\"#FDA2F4\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n          '     <path d=\\\"M56.8406 66.9428C53.347 75.3853 56.229 83.7327 62.0905 86.1582C67.952 88.5838 75.8897 84.7138 79.3834 76.2712C82.877 67.8287 79.995 59.4813 74.1335 57.0558C68.272 54.6302 60.3342 58.5002 56.8406 66.9428Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"/>', \\n          '     <path d=\\\"M27.7322 54.8979C24.2386 63.3404 27.1206 71.6877 32.9821 74.1133C38.8436 76.5389 46.7813 72.6689 50.275 64.2263C53.7686 55.7838 50.8866 47.4364 45.0251 45.0109C39.1636 42.5853 31.2258 46.4553 27.7322 54.8979Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"/>', \\n          '     <path d=\\\"M80.4016 76.7713C77.1942 84.522 70.71 89.1979 65.9186 87.2152C62.1216 85.6439 60.5272 80.3626 61.6252 74.3808L68.2681 75.0377L63.0505 69.5912C66.2578 61.8404 72.7421 57.1645 77.5334 59.1473C82.3248 61.13 83.6089 69.0205 80.4016 76.7713Z\\\" />', \\n          '     <path d=\\\"M51.0598 63.5545C47.8524 71.3052 41.3682 75.9811 36.5768 73.9984C32.7798 72.4271 31.1854 67.1458 32.2834 61.164L38.9263 61.8209L33.7087 56.3744C36.916 48.6237 43.4003 43.9477 48.1917 45.9305C52.983 47.9132 54.2671 55.8037 51.0598 63.5545Z\\\" />', \\n          '     <circle cx=\\\"38.7002\\\" cy=\\\"86.7845\\\" r=\\\"1.99664\\\" transform=\\\"rotate(17.0548 38.7002 86.7845)\\\" />', \\n          '     <circle cx=\\\"45.0635\\\" cy=\\\"88.7366\\\" r=\\\"1.99664\\\" transform=\\\"rotate(17.0548 45.0635 88.7366)\\\" />', \\n          '     <path d=\\\"M78.1321 35.5307C76.9687 35.1738 60.4601 30.166 59.2919 29.9187L60.399 22.464C60.399 13.0751 52.7879 5.46399 43.399 5.46399C34.0102 5.46399 26.399 13.0752 26.399 22.464C26.399 27.069 28.23 31.2463 31.2037 34.3077C22.6098 39.1935 15.79 47.2459 12.6605 57.4471C8.4487 71.1764 11.9538 85.4313 20.6995 95.5384C26.0863 100.686 40.4036 111.247 54.5785 112.308C56.5124 112.901 58.4567 113.341 60.3985 113.634C79.7258 116.553 98.7984 104.951 104.709 85.6854C106.977 78.2901 107.007 70.7422 105.185 63.7723C105.923 63.8703 106.677 63.9209 107.443 63.9209C116.832 63.9209 124.443 56.3097 124.443 46.9209C124.443 37.5321 116.832 29.9209 107.443 29.9209C99.6643 29.9209 93.1061 35.1449 91.0851 42.2758C87.3242 39.3317 82.9703 37.0149 78.1321 35.5307Z\\\" fill=\\\"#FDA2F4\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n          '     <path d=\\\"M56.8406 66.9428C53.347 75.3853 56.229 83.7327 62.0905 86.1582C67.952 88.5838 75.8897 84.7138 79.3834 76.2712C82.877 67.8287 79.995 59.4813 74.1335 57.0558C68.272 54.6302 60.3342 58.5002 56.8406 66.9428Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"/>', \\n          '     <path d=\\\"M27.7322 54.8979C24.2386 63.3404 27.1206 71.6877 32.9821 74.1133C38.8436 76.5389 46.7813 72.6689 50.275 64.2263C53.7686 55.7838 50.8866 47.4364 45.0251 45.0109C39.1636 42.5853 31.2258 46.4553 27.7322 54.8979Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"/>', \\n          '     <path d=\\\"M80.4016 76.7713C77.1942 84.522 70.71 89.1979 65.9186 87.2152C62.1216 85.6439 60.5272 80.3626 61.6252 74.3808L68.2681 75.0377L63.0505 69.5912C66.2578 61.8404 72.7421 57.1645 77.5334 59.1473C82.3248 61.13 83.6089 69.0205 80.4016 76.7713Z\\\" />', \\n          '     <path d=\\\"M51.0598 63.5545C47.8524 71.3052 41.3682 75.9811 36.5768 73.9984C32.7798 72.4271 31.1854 67.1458 32.2834 61.164L38.9263 61.8209L33.7087 56.3744C36.916 48.6237 43.4003 43.9477 48.1917 45.9305C52.983 47.9132 54.2671 55.8037 51.0598 63.5545Z\\\" />', \\n          '     <circle cx=\\\"38.7002\\\" cy=\\\"86.7845\\\" r=\\\"1.99664\\\" transform=\\\"rotate(17.0548 38.7002 86.7845)\\\" />', \\n          '     <circle cx=\\\"45.0635\\\" cy=\\\"88.7366\\\" r=\\\"1.99664\\\" transform=\\\"rotate(17.0548 45.0635 88.7366)\\\" />', \\n          '</g>'\\n        ));\\n      }\\n      else if((currentPin == 10)) {\\n        //Chilli\\n        return string(abi.encodePacked(\\n          '<g transform=\\\"translate(570, 228)\\\">',\\n          '     <path d=\\\"M68.8545 59.5278C45.368 96.4659 17.426 91.0877 6.39078 83.7813C17.3765 122.64 90.6687 136.77 100.319 98.0561C101.149 94.7248 101.596 91.6637 101.714 88.8532C102.387 72.8422 92.4099 64.9667 82.1317 61.6209C77.4409 60.094 72.6873 59.5105 68.8545 59.5278Z\\\" fill=\\\"#EB4545\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"/>', \\n          '     <path d=\\\"M102.395 90.1588C98.6854 68.0345 82.7469 60.1372 67.7059 58.5314C75.1917 55.7845 86.1193 54.1814 93.9199 58.6391C101.746 56.3044 116.171 48.1315 111.262 34.1172L120.871 36.6786C121.541 41.8861 117.856 54.1663 97.7545 61.6269C102.56 66.6514 105 75.4931 102.395 90.1588Z\\\" fill=\\\"#B4E847\\\"/>', \\n          '     <path d=\\\"M93.9199 58.6391C86.1193 54.1814 75.1917 55.7845 67.7059 58.5314C82.7469 60.1372 98.6854 68.0345 102.395 90.1588C105 75.4931 102.56 66.6514 97.7545 61.6269M93.9199 58.6391C101.746 56.3044 116.171 48.1315 111.262 34.1172L120.871 36.6786C121.541 41.8861 117.856 54.1663 97.7545 61.6269M93.9199 58.6391C95.3097 59.4333 96.6003 60.42 97.7545 61.6269\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"/>', \\n          '</g>'\\n          ));\\n      }\\n      else if(currentPin == 11){\\n         // Shark\\n        return string(abi.encodePacked(\\n          '<g transform=\\\"translate(570, 260)\\\">',\\n            '     <path d=\\\"M99.085 29.4517C83.8972 28.6888 61.085 64.4512 32.585 60.4512C6.18476 55.6515 8.9185 49.9518 5.08541 40.9517C2.08515 36.9517 -3.71354 33.3521 17.0865 20.9522C22.9158 17.477 29.2478 15.4392 35.585 14.4051C33.585 5.45246 52.085 -2.04872 56.585 4.45172C53.4183 6.48597 48.185 11.1942 52.585 13.7531C62.4001 14.4774 70.9853 16.8653 76.0865 18.9521C84.5865 21.6188 102.486 25.3521 106.086 18.9521C110.586 10.9521 125.586 13.4521 121.086 17.4521C116.586 21.4521 124.586 54.9521 121.086 52.9521C118.286 51.3521 115.167 43.6667 114.5 41C115 36.5 110 30 99.085 29.4517Z\\\" fill=\\\"#D9D9D9\\\" stroke=\\\"black\\\" stroke-width=\\\"3\\\"/>', \\n            '     <path d=\\\"M106.086 18.9521C110.586 10.9521 125.586 13.4521 121.086 17.4521C118.588 27.453 125.085 51.4512 121.086 52.9512C117.888 54.1512 114.753 42.4512 113.585 36.4512C111.752 31.2848 92.0988 30.0008 90.5 32C88.5015 34.499 58.4713 36.4002 63.5 30C74.5 16 49.6662 30.6667 43 29C38.3333 31 32.1 36.1 26.5 34.5C20.9 32.9 8.75192 37.4515 5.08541 40.9517C2.08515 36.9517 -3.71354 33.3521 17.0865 20.9522C22.9158 17.477 29.2478 15.4392 35.585 14.4051C33.585 5.45246 52.085 -2.04872 56.585 4.45172C53.4183 6.48597 48.185 11.1942 52.585 13.7531C62.4001 14.4774 70.9853 16.8653 76.0865 18.9521C84.5865 21.6188 102.486 25.3521 106.086 18.9521Z\\\" fill=\\\"#93969F\\\" stroke=\\\"black\\\" stroke-width=\\\"3\\\"/>', \\n            '     <path d=\\\"M9.68247 49.7595C9.59357 49.7051 9.55378 49.6671 9.5389 49.6507L9.53364 49.6349L6.67485 41.0585C6.97146 40.5953 7.48161 39.9694 8.26214 39.2511C9.59212 38.0271 11.9219 37.0426 15.4566 36.0411L15.6132 35.9967L15.7743 35.9519C17.6141 35.4401 19.7248 34.9322 22.1139 34.3802H27.085H27.1165L27.148 34.3782C29.738 34.2148 33.2482 33.5064 37.9092 31.909C39.62 31.3227 41.4886 30.6157 43.5266 29.7703C44.7491 33.2723 44.4897 37.1039 42.4196 40.4218C40.8458 42.9442 38.1884 45.2312 34.208 46.851C32.148 47.6893 29.7341 48.3483 26.9374 48.7655C26.4601 48.8366 25.9717 48.9008 25.4721 48.9576C20.4108 49.5327 17.416 49.9615 15.5468 50.2292C15.3234 50.2612 15.1161 50.2909 14.9233 50.3182C13.0488 50.5841 12.7275 50.5884 12.3446 50.4855C12.1737 50.4395 11.9213 50.3917 11.6788 50.3458C11.6103 50.3328 11.5427 50.32 11.4779 50.3074C11.1477 50.2433 10.7957 50.1691 10.4648 50.0733C10.1258 49.9751 9.86014 49.8684 9.68247 49.7595Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"2\\\"/>', \\n            '     <circle cx=\\\"29.5\\\" cy=\\\"24.5\\\" r=\\\"3.5\\\" />', \\n          '</g>'\\n        ));\\n      }\\n      else if(currentPin == 12) {\\n        // Devil\\n        return string(abi.encodePacked(\\n            '<g transform=\\\"translate(572, 240)\\\">',\\n            '     <path d=\\\"M82.8403 67.3863C82.8403 89.1574 65.1913 106.806 43.4202 106.806C21.649 106.806 4 89.1574 4 67.3863C4 55.5014 9.25955 44.8449 17.5781 37.6175C14.9949 35.6058 11.9039 31.5264 10.9256 25.7761C9.98209 20.2297 11.0042 13.1289 16.3435 4.82993C16.8085 4.10709 17.9034 4.30556 18.134 5.13358C19.3368 9.453 21.3863 15.2351 24.1057 20.0821C26.6484 24.6142 29.7768 28.3286 33.3461 29.2651C36.5618 28.4175 39.9383 27.9661 43.4202 27.9661C56.317 27.9661 67.7673 34.1594 74.9592 43.7342C77.4836 44.3606 81.7058 44.4396 86.3444 42.7224C89.057 41.7183 91.912 40.0999 94.6531 37.6175C96.4777 35.965 98.2519 33.9298 99.9 31.438C100.402 30.6794 101.569 30.87 101.693 31.771C102.697 39.0606 101.598 50.2108 92.9144 56.9411C90.2107 59.0366 86.7718 60.7037 82.4321 61.6923C82.7011 63.5514 82.8403 65.4526 82.8403 67.3863Z\\\" fill=\\\"#FB4A4A\\\"/>', \\n            '     <path d=\\\"M17.5781 37.6175C9.25955 44.8449 4 55.5014 4 67.3863C4 89.1574 21.649 106.806 43.4202 106.806C65.1913 106.806 82.8403 89.1574 82.8403 67.3863C82.8403 65.4526 82.7011 63.5514 82.4321 61.6923M17.5781 37.6175C14.9949 35.6058 11.9039 31.5264 10.9256 25.7761M17.5781 37.6175C17.5781 37.6175 21.2525 34.8332 24.1057 33.2221C27.418 31.3518 33.3461 29.2651 33.3461 29.2651M33.3461 29.2651C36.5618 28.4175 39.9383 27.9661 43.4202 27.9661C56.317 27.9661 67.7673 34.1594 74.9592 43.7342M33.3461 29.2651C29.7768 28.3286 26.6484 24.6142 24.1057 20.0821M74.9592 43.7342C77.4836 44.3606 81.7058 44.4396 86.3444 42.7224M74.9592 43.7342C77.334 47.0922 82.1534 55.385 82.4321 61.6923M82.4321 61.6923C86.7718 60.7037 90.2107 59.0366 92.9144 56.9411M86.3444 42.7224C86.9284 46.3163 89.06 54.1914 92.9144 56.9411M86.3444 42.7224C89.057 41.7183 91.912 40.0999 94.6531 37.6175C96.4777 35.965 98.2519 33.9298 99.9 31.438C100.402 30.6794 101.569 30.87 101.693 31.771C102.697 39.0606 101.598 50.2108 92.9144 56.9411M10.9256 25.7761C9.98209 20.2297 11.0042 13.1289 16.3435 4.82993C16.8085 4.10709 17.9034 4.30556 18.134 5.13358C19.3368 9.453 21.3863 15.2351 24.1057 20.0821M10.9256 25.7761C14.1369 26.6521 21.2686 26.7397 24.1057 20.0821\\\" fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n            '     <path d=\\\"M45.9608 89.3262C48.1423 88.9241 50.3814 88.2652 52.6507 87.2906C53.3949 86.9711 54.2306 87.5829 54.11 88.3838L53.011 95.6804C52.8799 96.5508 51.7694 96.8394 51.231 96.1431L45.9608 89.3262ZM45.9608 89.3262C39.0775 90.5949 32.7681 89.3065 27.8951 87.3072M27.8951 87.3072C25.1855 86.1955 22.9199 84.8639 21.2468 83.6299C20.6824 83.2136 19.8557 83.4387 19.6221 84.1L16.9174 91.7586C16.6062 92.6398 17.5662 93.4283 18.3702 92.9519L27.8951 87.3072Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"/>', \\n            '     <path d=\\\"M46.9278 60.6561C43.8989 67.9756 46.4293 75.1111 51.3924 77.1649C56.3555 79.2187 63.1881 75.9577 66.217 68.6382C69.2459 61.3187 66.7155 54.1831 61.7524 52.1293C56.7893 50.0756 49.9567 53.3366 46.9278 60.6561Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"/>', \\n            '     <path d=\\\"M21.4288 50.1043C18.3999 57.4238 20.9303 64.5594 25.8934 66.6131C30.8564 68.6669 37.6891 65.4059 40.718 58.0864C43.7469 50.7669 41.2164 43.6314 36.2534 41.5776C31.2903 39.5238 24.4577 42.7848 21.4288 50.1043Z\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"/>', \\n            '     <path d=\\\"M67.3385 69.1717C64.5288 75.9614 58.8486 80.0575 54.6513 78.3206C51.3252 76.9442 49.9284 72.3177 50.8903 67.0777L56.7095 67.6531L52.1389 62.882C54.9485 56.0923 60.6287 51.9962 64.826 53.733C69.0232 55.4699 70.1481 62.3821 67.3385 69.1717Z\\\" />', \\n            '     <path d=\\\"M41.6344 57.5936C38.8247 64.3833 33.1445 68.4794 28.9472 66.7425C25.6211 65.3661 24.2243 60.7396 25.1861 55.4995L31.0054 56.075L26.4348 51.3038C29.2444 44.5142 34.9246 40.418 39.1219 42.1549C43.3191 43.8918 44.444 50.8039 41.6344 57.5936Z\\\" />', \\n            '     <ellipse cx=\\\"27.1233\\\" cy=\\\"76.7549\\\" rx=\\\"5.57755\\\" ry=\\\"1.37771\\\" transform=\\\"rotate(1.09864 27.1233 76.7549)\\\" />', \\n            '     <ellipse rx=\\\"5.57755\\\" ry=\\\"1.37771\\\" transform=\\\"matrix(-0.892204 -0.451633 -0.451633 0.892204 40.2589 80.7707)\\\" />', \\n            '     <circle cx=\\\"33.3408\\\" cy=\\\"73.0757\\\" r=\\\"1.74906\\\" transform=\\\"rotate(17.0548 33.3408 73.0757)\\\" />', \\n            '     <circle cx=\\\"38.915\\\" cy=\\\"74.7857\\\" r=\\\"1.74906\\\" transform=\\\"rotate(17.0548 38.915 74.7857)\\\" />',\\n            '</g>'\\n        ));\\n      }\\n      else if( currentPin == 13) {\\n        //Fire\\n        return string (abi.encodePacked(\\n            '<g transform=\\\"translate(572, 240)\\\">',\\n            '     <path d=\\\"M44.9741 21.9402C12.4588 36.3461 7.64411 60.0251 13.7983 81.1875C22.2387 99.1338 43.7985 105.598 52.0622 105.619C103.39 103.307 109.318 57.9705 87.7567 20.6988C81.9799 42.2108 70.6308 59.1406 52.6079 53.0737C38.1896 48.2201 41.5111 30.2957 44.9741 21.9402Z\\\" fill=\\\"#FF8A01\\\" stroke=\\\"black\\\" stroke-width=\\\"8\\\"/>', \\n            '     <path d=\\\"M40.1317 62.5768C22.1274 68.8144 20.1037 80.5169 24.2235 91.2875C29.5436 100.517 41.9591 104.394 46.6446 104.651C75.6747 105.024 77.684 82.52 64.3493 63.2311C61.7155 73.8209 55.7861 81.9522 45.3876 78.3797C37.0688 75.5218 38.4175 66.6536 40.1317 62.5768Z\\\" fill=\\\"#FB4A4A\\\" stroke=\\\"black\\\" stroke-width=\\\"4\\\"/>', \\n            '</g>'\\n        ));\\n      }\\n      else {\\n        return \\\"\\\";\\n      }\\n    }\\n}\\n\",\"keccak256\":\"0xd291e0ad99068b243f302be8d5ecb2d27ab14c9be248e7244caa45a4428f4c70\",\"license\":\"MIT\"},\"contracts/SockPin/PinLibraryMetadata.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n//SPDX-License-Identifier: MIT\\n\\n// GET LISTED ON OPENSEA: https://testnets.opensea.io/get-listed/step-two\\n\\n// Defining Library\\nlibrary PinMetadataLibrary {\\n    function GetPinMetadata(\\n        uint256 currentPin\\n    ) public pure returns (string memory) {\\n        string memory pinProperty = '{\\\"trait_type\\\":\\\"Pin\\\", \\\"value\\\":\\\"';\\n        if (currentPin == 0) {\\n            //Lighting\\n            return string(abi.encodePacked(pinProperty, 'Lighting\\\"}'));\\n        } else if (currentPin == 1) {\\n            // Alien\\n            return string(abi.encodePacked(pinProperty, 'Alien\\\"}'));\\n        } else if (currentPin == 2) {\\n            // Alien\\n            return string(abi.encodePacked(pinProperty, 'Alien\\\"}'));\\n        } else if (currentPin == 3) {\\n            // Cloud\\n            return string(abi.encodePacked(pinProperty, 'Cloud\\\"}'));\\n        } else if (currentPin == 4) {\\n            // Heart\\n            return string(abi.encodePacked(pinProperty, 'Heart\\\"}'));\\n        } else if (currentPin == 5) {\\n            //Flower\\n            return string(abi.encodePacked(pinProperty, 'Flower\\\"}'));\\n        } else if (currentPin == 6) {\\n            // Star\\n            return string(abi.encodePacked(pinProperty, 'Star\\\"}'));\\n        } else if (currentPin == 7) {\\n            //Skull\\n            return string(abi.encodePacked(pinProperty, 'Skull\\\"}'));\\n        } else if (currentPin == 8) {\\n            // Frog\\n            return string(abi.encodePacked(pinProperty, 'Frog\\\"}'));\\n        } else if (currentPin == 9) {\\n            // Bear\\n            return string(abi.encodePacked(pinProperty, 'Bear\\\"}'));\\n        } else if ((currentPin == 10)) {\\n            //Chilli\\n            return string(abi.encodePacked(pinProperty, 'Chilli\\\"}'));\\n        } else if (currentPin == 11) {\\n            // Shark\\n            return string(abi.encodePacked(pinProperty, 'Shark\\\"}'));\\n        } else if (currentPin == 12) {\\n            // Devil\\n            return string(abi.encodePacked(pinProperty, 'Devil\\\"}'));\\n        } else if (currentPin == 13) {\\n            //Fire\\n            return string(abi.encodePacked(pinProperty, 'Fire\\\"}'));\\n        } else {\\n            return string(abi.encodePacked(pinProperty, 'None\\\"}'));\\n        }\\n    }\\n\\n    function GetPinText(\\n        uint256 currentPin\\n    ) public pure returns (string memory) {\\n        if (currentPin == 0) {\\n            //Lighting\\n            return \\\"Lighting\\\";\\n        } else if (currentPin == 1) {\\n            // Alien\\n            return \\\"Alien\\\";\\n        } else if (currentPin == 2) {\\n            // Alien\\n            return \\\"Alien\\\";\\n        } else if (currentPin == 3) {\\n            // Cloud\\n            return \\\"Cloud\\\";\\n        } else if (currentPin == 4) {\\n            // Heart\\n            return \\\"Heart\\\";\\n        } else if (currentPin == 5) {\\n            //Flower\\n            return \\\"Flower\\\";\\n        } else if (currentPin == 6) {\\n            // Star\\n            return \\\"Star\\\";\\n        } else if (currentPin == 7) {\\n            //Skull\\n            return \\\"Skull\\\";\\n        } else if (currentPin == 8) {\\n            // Frog\\n            return \\\"Frog\\\";\\n        } else if (currentPin == 9) {\\n            // Bear\\n            return \\\"Bear\\\";\\n        } else if ((currentPin == 10)) {\\n            //Chilli\\n            return \\\"Chilli\\\";\\n        } else if (currentPin == 11) {\\n            // Shark\\n            return \\\"Shark\\\";\\n        } else if (currentPin == 12) {\\n            // Devil\\n            return \\\"Devil\\\";\\n        } else if (currentPin == 13) {\\n            //Fire\\n            return \\\"Fire\\\";\\n        } else {\\n            return \\\"No\\\";\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x92c50ba738c2fb445a669885b569f6af8f40ff3485492e49b6ea14588f64f4ed\",\"license\":\"MIT\"},\"contracts/StyleLibrary.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\n// GET LISTED ON OPENSEA: https://testnets.opensea.io/get-listed/step-two\\n\\n// Defining Library\\nlibrary StyleLibrary {\\n    function GetStyle() public pure returns (string memory) {\\n        string memory style = string(\\n            abi.encodePacked(\\\"\\\")\\n        );\\n        return style;\\n    }\\n\\n    function HideBackClipStyle() public pure returns(string memory){\\n        string memory style = string(\\n            abi.encodePacked(\\n            '     <defs>', \\n            '         <style>', \\n            '             .backClip {', \\n            '                 opacity: 0;', \\n            '             }', \\n            '         </style>', \\n            '     </defs>'\\n            ));\\n        return style;\\n    }\\n\\n     function ShowBackClipStyle() public pure returns(string memory){\\n        string memory style = string(\\n            abi.encodePacked(\\n            '     <defs>', \\n            '         <style>', \\n            '             .backClip {', \\n            '                 opacity: 1;', \\n            '             }', \\n            '         </style>', \\n            '     </defs>'\\n            ));\\n        return style;\\n    }\\n}\\n\",\"keccak256\":\"0x9341e905a3b39f764a302d02fe1a08c3705eba8c30c67c99333074e3e6930a51\",\"license\":\"MIT\"},\"contracts/ThisSocks.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\n\\nimport \\\"./StyleLibrary.sol\\\";\\nimport \\\"./SockPin/PinLibrary.sol\\\";\\nimport \\\"./SockPin/PinLibraryMetadata.sol\\\";\\nimport \\\"./SockLayoutLibrary.sol\\\";\\nimport \\\"./SockBackground/BackgroundLibrary.sol\\\";\\nimport \\\"./SockBackground/BackgroundMetadataLibrary.sol\\\";\\nimport \\\"./SockPattern/PatternLibrary.sol\\\";\\nimport \\\"./SockPattern/PatternMetadataLibrary.sol\\\";\\n\\n// GET LISTED ON OPENSEA: https://testnets.opensea.io/get-listed/step-two\\n\\ncontract ThisSocks is ERC721Enumerable, Ownable {\\n    using Strings for uint256;\\n    using Strings for uint160;\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIds;\\n\\n    uint256 mintDeadline = block.timestamp + 3650 days;\\n\\n    // all funds go to buidlguidl.eth\\n    address payable public constant recipient =\\n        payable(0x54179E1770a780F2F541f23CB21252De12977d3c);\\n\\n    uint256 public constant limit = 3728;\\n    uint256 public constant curve = 1002; // price increase 0,4% with each purchase\\n    uint256 public price = 0.001 ether;\\n    // the 1154th optimistic parrot cost 0.01 ETH, the 2306th cost 0.1ETH, the 3459th cost 1 ETH and the last ones cost 1.7 ETH\\n\\n    // create some DS that gives color set number and then color set number gives color values\\n    // YOUR_STORAGE_DS_HERE\\n\\n    //Pin By token Id\\n    mapping(uint256 => uint256) tokenPin;\\n    mapping(uint256 => uint256[]) sockColors;\\n    mapping(uint256 => uint256) sockBackgroundColor;\\n    mapping(uint256 => uint256) sockBackgroundType;\\n    mapping(uint256 => uint256) sockPatterns;\\n\\n    constructor() ERC721(\\\"ThisSock\\\", \\\"THS\\\") {}\\n\\n    function mintItem() public payable returns (uint256) {\\n        require(block.timestamp < mintDeadline, \\\"DONE MINTING\\\");\\n        require(msg.value >= price, \\\"NOT ENOUGH\\\");\\n\\n        price = (price * curve) / 1000;\\n\\n        _tokenIds.increment();\\n\\n        uint256 id = _tokenIds.current();\\n        _mint(msg.sender, id);\\n\\n        bytes32 predictableRandom = keccak256(\\n            abi.encodePacked(\\n                id,\\n                blockhash(block.number - 1),\\n                msg.sender,\\n                address(this)\\n            )\\n        );\\n\\n        tokenPin[id] = getPredicableRandomNumber(predictableRandom, 5, 6, 20);\\n        sockColors[id] = [\\n            getPredicableRandomNumber(predictableRandom, 1, 2, 12),\\n            getPredicableRandomNumber(predictableRandom, 8, 9, 12),\\n            getPredicableRandomNumber(predictableRandom, 20, 30, 12)\\n        ];\\n        sockBackgroundColor[id] = getPredicableRandomNumber(\\n            predictableRandom,\\n            27,\\n            31,\\n            11\\n        );\\n        sockBackgroundType[id] = getPredicableRandomNumber(\\n            predictableRandom,\\n            20,\\n            22,\\n            31\\n        );\\n        sockPatterns[id] = getPredicableRandomNumber(\\n            predictableRandom,\\n            10,\\n            30,\\n            25\\n        );\\n\\n        (bool success, ) = recipient.call{value: msg.value}(\\\"\\\");\\n        require(success, \\\"could not send\\\");\\n\\n        return id;\\n    }\\n\\n    function tokenURI(uint256 id) public view override returns (string memory) {\\n        require(_exists(id), \\\"!exist\\\");\\n\\n        string memory name = string(abi.encodePacked(\\\"Sock #\\\", id.toString()));\\n\\n        string memory base = string(\\\"Sock\\\");\\n\\n        string memory image = Base64.encode(bytes(generateSVGofTokenById(id)));\\n\\n        (uint256 color1, uint256 color2, uint256 color3) = getColorsByTokenId(\\n            id\\n        );\\n\\n        string memory description = string(\\n            abi.encodePacked(\\n                \\\"This Socks has \\\",\\n                BackgroundMetadataLibrary.GetBackgroundTypeText(\\n                    getBackgroundTypeByTokenId(id)\\n                ),\\n                \\\" background, \\\",\\n                BackgroundMetadataLibrary.GetBackgroundColorText(\\n                    getBackgroundTypeByTokenId(id)\\n                ),\\n                \\\" background color, \\\",\\n                PatternMetadataLibrary.GetPatternText(getPinByTokenId(id)),\\n                \\\" pattern, \\\",\\n                PinMetadataLibrary.GetPinText(getPinByTokenId(id)),\\n                \\\"  pin. \\\",\\n                \\\"And has \\\",\\n                SockLayoutLibrary.GetColorName(color1),\\n                \\\",\\\",\\n                SockLayoutLibrary.GetColorName(color2),\\n                \\\",\\\",\\n                SockLayoutLibrary.GetColorName(color3),\\n                \\\" colors\\\"\\n            )\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"',\\n                                name,\\n                                '\\\",\\\"description\\\":\\\"',\\n                                description,\\n                                '\\\",\\\"external_url\\\":\\\"https://thissocks.com/token/',\\n                                id.toString(),\\n                                '\\\", \\\"owner\\\":\\\"',\\n                                (uint160(ownerOf(id))).toHexString(20),\\n                                '\\\",\\\"image\\\": \\\"',\\n                                \\\"data:image/svg+xml;base64,\\\",\\n                                image,\\n                                '\\\",',\\n                                '\\\"attributes\\\":[',\\n                                BackgroundMetadataLibrary\\n                                    .GetBackgroundColorMetadata(\\n                                        getBackgroundByTokenId(id)\\n                                    ),\\n                                \\\",\\\",\\n                                BackgroundMetadataLibrary\\n                                    .GetBackgroundTypeMetadata(\\n                                        getBackgroundTypeByTokenId(id)\\n                                    ),\\n                                \\\",\\\",\\n                                SockLayoutLibrary.GetLayoutMetadata(\\n                                    color1,\\n                                    color2,\\n                                    color3\\n                                ),\\n                                \\\",\\\",\\n                                PinMetadataLibrary.GetPinMetadata(\\n                                    getPinByTokenId(id)\\n                                ),\\n                                \\\",\\\",\\n                                PatternMetadataLibrary.GetPatternMetadata(\\n                                    getPatternByTokenId(id)\\n                                ),\\n                                \\\"]\\\",\\n                                \\\"}\\\"\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    // function generateSVGofTokenById(uint256 id) internal view returns (string memory) {\\n    function generateSVGofTokenById(\\n        uint256 id\\n    ) internal view returns (string memory) {\\n        string memory svg = string(\\n            abi.encodePacked(\\n                '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"1080\\\" height=\\\"1080\\\" viewBox=\\\"0 0 1080 1080\\\">',\\n                renderTokenById(id),\\n                \\\"</svg>\\\"\\n            )\\n        );\\n        return svg;\\n    }\\n\\n    // Visibility is `public` to enable it being called by other contracts for composition.\\n    function renderTokenById(uint256 id) public view returns (string memory) {\\n        (uint256 color1, uint256 color2, uint256 color3) = getColorsByTokenId(\\n            id\\n        );\\n        uint256 backgroundType = getBackgroundTypeByTokenId(id);\\n        uint256 patternType = getPatternByTokenId(id);\\n        string memory render = string(\\n            abi.encodePacked(\\n                BackgroundLibrary.GetBackground(\\n                    backgroundType,\\n                    BackgroundLibrary.GetBackgroundColor(\\n                        getBackgroundByTokenId(id)\\n                    )\\n                ),\\n                '<g transform=\\\"translate(180, 130)\\\">',\\n                BackgroundLibrary.BackClip(backgroundType),\\n                SockLayoutLibrary.GetLayout(\\n                    SockLayoutLibrary.GetColor(color1),\\n                    SockLayoutLibrary.GetColor(color2),\\n                    SockLayoutLibrary.GetColor(color3)\\n                ),\\n                PinLibrary.GetPin(getPinByTokenId(id)),\\n                \\\"</g>\\\",\\n                BackgroundLibrary.FrontClip(backgroundType),\\n                PatternLibrary.GetPattern(patternType)\\n            )\\n        );\\n        // we want tail to render first so\\n        // we list the order in which item should render so that no one hides other\\n        return render;\\n    }\\n\\n    function getPinByTokenId(uint256 id) private view returns (uint256) {\\n        return tokenPin[id];\\n    }\\n\\n    function getBackgroundByTokenId(uint256 id) private view returns (uint256) {\\n        return sockBackgroundColor[id];\\n    }\\n\\n    function getBackgroundTypeByTokenId(\\n        uint256 id\\n    ) private view returns (uint256) {\\n        return sockBackgroundType[id];\\n    }\\n\\n    function getColorsByTokenId(\\n        uint256 id\\n    ) private view returns (uint256 color1, uint256 color2, uint256 color3) {\\n        require(_exists(id), \\\"!exist\\\");\\n        color1 = sockColors[id][0];\\n        color2 = sockColors[id][1];\\n        color3 = sockColors[id][2];\\n    }\\n\\n    function getPatternByTokenId(uint256 id) private view returns (uint256) {\\n        require(_exists(id), \\\"!exist\\\");\\n        return sockPatterns[id];\\n    }\\n\\n    function getPredicableRandomNumber(\\n        bytes32 data,\\n        uint256 minByte,\\n        uint256 maxByte,\\n        uint8 maxNumber\\n    ) private pure returns (uint256) {\\n        return\\n            uint256(\\n                ((uint8(data[minByte]) << maxNumber) | uint8(data[maxByte])) %\\n                    maxNumber\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xc30c6afd728addfe2bf390325751423635b915af7a481dedb09b01176bd3ffa0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052346200018b5762000014620001a7565b60206754686973536f636b60c01b8183015262000030620001dc565b6254485360e81b8282015282519091906001600160401b0381116200017b575b6000916200006a826200006485546200023d565b6200027a565b80601f8311600114620000ed57508190620000a1958492620000e1575b50508160011b916000199060031b1c19161790556200032e565b620000ac3362000430565b620000c0620000bb4262000211565b600c55565b620000d166038d7ea4c68000600d55565b60405161327d90816200047f8239f35b01519050388062000087565b600080529194601f1986167f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639385905b82821062000162575050916001939187620000a198941062000148575b505050811b0190556200032e565b015160001960f88460031b161c191690553880806200013a565b806001869782949787015181550196019401906200011d565b6200018562000190565b62000050565b600080fd5b50634e487b7160e01b600052604160045260246000fd5b60408051919082016001600160401b03811183821017620001cc575b60405260088252565b620001d662000190565b620001c3565b60408051919082016001600160401b0381118382101762000201575b60405260038252565b6200020b62000190565b620001f8565b6312cc030019811162000227576312cc03000190565b634e487b7160e01b600052601160045260246000fd5b90600182811c921680156200026f575b60208310146200025957565b634e487b7160e01b600052602260045260246000fd5b91607f16916200024d565b601f811162000287575050565b60009081805260208220906020601f850160051c83019410620002c7575b601f0160051c01915b828110620002bb57505050565b818155600101620002ae565b9092508290620002a5565b90601f8211620002e0575050565b60019160009083825260208220906020601f850160051c8301941062000323575b601f0160051c01915b828110620003185750505050565b81815583016200030a565b909250829062000301565b80519091906001600160401b03811162000420575b6001906200035d816200035784546200023d565b620002d2565b602080601f83116001146200039b5750819293946000926200038f575b5050600019600383901b1c191690821b179055565b0151905038806200037a565b6001600052601f198316959091907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b888210620004085750508385969710620003ee575b505050811b019055565b015160001960f88460031b161c19169055388080620003e4565b808785968294968601518155019501930190620003cf565b6200042a62000190565b62000343565b600a80546001600160a01b039283166001600160a01b031982168117909255604051919216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a356fe60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461020757806306fdde03146101fe578063081812fc146101f5578063095ea7b3146101ec57806318160ddd146101e357806323b872dd146101da5780632f745c59146101d157806342842e0e146101c85780634f6ccce7146101bf5780636352211e146101b657806366d003ac146101ad57806370a08231146101a4578063715018a61461019b5780637165485d146101925780638da5cb5b1461018957806395d89b4114610180578063a035b1fe14610177578063a22cb4651461016e578063a2d6c6da14610165578063a4d66daf1461015c578063b88d4fde14610153578063c87b56dd1461014a578063e985e9c514610141578063eb93406b146101385763f2fde38b1461013057600080fd5b61000e611822565b5061000e611630565b5061000e6115d2565b5061000e610c07565b5061000e610b7e565b5061000e610ab7565b5061000e610a83565b5061000e61099a565b5061000e61097b565b5061000e6108b9565b5061000e61088f565b5061000e610871565b5061000e61080c565b5061000e6107e0565b5061000e6107b0565b5061000e610791565b5061000e6106e5565b5061000e61069e565b5061000e6105ea565b5061000e6105c0565b5061000e61056c565b5061000e61047c565b5061000e61041f565b5061000e610319565b5061000e610222565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e57602060043561024281610210565b63ffffffff60e01b1663780e9d6360e01b8114908115610268575b506040519015158152f35b6380ac58cd60e01b81149150811561029a575b8115610289575b503861025d565b6301ffc9a760e01b14905038610282565b635b5e139f60e01b8114915061027b565b918091926000905b8282106102cb5750116102c4575050565b6000910152565b915080602091830151818601520182916102b3565b906020916102f9815180928185528580860191016102ab565b601f01601f1916010190565b9060206103169281815201906102e0565b90565b503461000e5760008060031936011261041c57604051908080549060019180831c92808216928315610412575b60209283861085146103fe5785885260208801949081156103e2575060011461038a575b6103868761037a81890382610b14565b60405191829182610305565b0390f35b6000805294509192917f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b8386106103d1575050509101905061037a82610386388061036a565b8054858701529482019481016103b5565b60ff1916855250505001915061037a905082610386388061036a565b634e487b7160e01b82526022600452602482fd5b93607f1693610346565b80fd5b503461000e57602036600319011261000e57602061043e600435611aaf565b6040516001600160a01b039091168152f35b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57604036600319011261000e57610496610450565b6024356104a2816119ca565b916001600160a01b03808416908216811461051d576104d4936104cf9133149081156104d6575b50611a42565b611fc2565b005b6001600160a01b0316600090815260056020526040902061051791506105109033905b9060018060a01b0316600052602052604060002090565b5460ff1690565b386104c9565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b503461000e57600036600319011261000e576020600854604051908152f35b606090600319011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e576104d46105d23661058b565b916105e56105e08433611c81565b611b32565b611e25565b503461000e57604036600319011261000e57610604610450565b6024359061061181611952565b821015610645576001600160a01b031660009081526006602090815260408083209383529281529082902054915191825290f35b60405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608490fd5b503461000e576104d46106b03661058b565b9060405192602084018481106001600160401b038211176106d8575b60405260008452611bc9565b6106e0610ad5565b6106cc565b503461000e57602036600319011261000e576004356008548110156107375760086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30154604051908152602090f35b60405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608490fd5b503461000e57602036600319011261000e57602061043e6004356119ca565b503461000e57600036600319011261000e5760206040517354179e1770a780f2f541f23cb21252de12977d3c8152f35b503461000e57602036600319011261000e5760206108046107ff610450565b611952565b604051908152f35b503461000e5760008060031936011261041c57600a546001600160a01b038116906108383383146118b9565b6001600160a01b031916600a556040519082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e57600036600319011261000e5760206040516103ea8152f35b503461000e57600036600319011261000e57600a546040516001600160a01b039091168152602090f35b503461000e5760008060031936011261041c576040519080600190815480831c92808216928315610971575b60209283861085146103fe5785885260208801949081156103e25750600114610918576103868761037a81890382610b14565b600160005294509192917fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b838610610960575050509101905061037a82610386388061036a565b805485870152948201948101610944565b93607f16936108e5565b503461000e57600036600319011261000e576020600d54604051908152f35b503461000e57604036600319011261000e576109b4610450565b602435801515810361000e576001600160a01b03821691338314610a4257816109ff610a109233600052600560205260406000209060018060a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606490fd5b503461000e57602036600319011261000e57610386610aa3600435612c6c565b6040519182916020835260208301906102e0565b503461000e57600036600319011261000e576020604051610e908152f35b50634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b03821117610b0757604052565b610b0f610ad5565b604052565b90601f801991011681019081106001600160401b03821117610b0757604052565b60405190606082018281106001600160401b03821117610b0757604052565b6020906001600160401b038111610b71575b601f01601f19160190565b610b79610ad5565b610b66565b503461000e57608036600319011261000e57610b98610450565b610ba0610466565b606435916001600160401b03831161000e573660238401121561000e57826004013591610bcc83610b54565b92610bda6040519485610b14565b808452366024828701011161000e5760208160009260246104d49801838801378501015260443591611bc9565b503461000e57602036600319011261000e57610c2c610c27600435611c64565b6126e1565b610d33610c5f610c6d610c4060043561283f565b60405165536f636b202360d01b60208201529283916026830190612716565b03601f198101835282610b14565b610c75612729565b50610c89610c84600435612b66565b612a7d565b610c94600435613190565b9092610cd16000610cb16004356000526011602052604060002090565b5460405180938192630353b07760e01b8352600483019190602083019252565b0381735a91980Bec7bE5c2A9ef352AB3320acE93671daD5af49081156115c5575b6000916115aa575b506000610d136004356000526011602052604060002090565b5460405180998192631e5833e960e11b8352600483019190602083019252565b0381735a91980Bec7bE5c2A9ef352AB3320acE93671daD5af496871561159d575b600097611580575b50610d986000610d78600435600052600e602052604060002090565b5460405180938192636aabd94360e11b8352600483019190602083019252565b038173AC328Cd835BD716f74eA57159308C64d4B9C61625af4908115611573575b600091611558575b50610dfd6000610ddd600435600052600e602052604060002090565b5460405180938192630c52312760e01b8352600483019190602083019252565b038173Adcd149C6d927a3ec0993F3E4b316614535c59485af490811561154b575b600091611530575b506040516357734f6b60e01b81526004810187905260008160248173DA7991CB363e76C33cE5dBa42c6ea28B4e8A5ECc5af4908115611523575b600091611508575b506040516357734f6b60e01b8152600481018990529160008360248173DA7991CB363e76C33cE5dBa42c6ea28B4e8A5ECc5af49283156114fb575b6000936114de575b506040516357734f6b60e01b8152600481018890529360008560248173DA7991CB363e76C33cE5dBa42c6ea28B4e8A5ECc5af49485156114d1575b6000956114b4575b506040516e02a3434b99029b7b1b5b9903430b99608d1b60208201529b8c96602f8801610f1a91612716565b6c0103130b1b5b3b937bab732161609d1b8152600d01610f3991612716565b720103130b1b5b3b937bab7321031b7b637b9161606d1b8152601301610f5e91612716565b690103830ba3a32b93716160b51b8152600a01610f7a91612716565b66010103834b717160cd1b815260070167020b732103430b9960c51b8152600801610fa491612716565b610fad906127a7565b610fb691612716565b610fbf906127a7565b610fc891612716565b6620636f6c6f727360c81b815260070103601f1981018752610fea9087610b14565b610ff560043561283f565b6110006004356119ca565b611012906001600160a01b0316612951565b9160043561102a906000526010602052604060002090565b5460405163a81f66ed60e01b8152600481019190915292735a91980Bec7bE5c2A9ef352AB3320acE93671daD846024815a93600094f49283159761116b976110b6966111c19a6114a7575b60009661148a575b5060006110966004356000526011602052604060002090565b546040518099819263e28b34df60e01b8352600483019190602083019252565b0381735a91980Bec7bE5c2A9ef352AB3320acE93671daD5af496871561147d575b60009761145c575b5060405163357c470d60e21b815260048101919091526024810191909152604481019690965260008660648173DA7991CB363e76C33cE5dBa42c6ea28B4e8A5ECc5af495861561144f575b600096611432575b50600061114b600435600052600e602052604060002090565b54604051809981926326549a8f60e11b8352600483019190602083019252565b038173Adcd149C6d927a3ec0993F3E4b316614535c59485af4968715611425575b600097611408575b5060006111a260043561322a565b604051809a8192635cb9c28560e01b8352600483019190602083019252565b038173AC328Cd835BD716f74eA57159308C64d4B9C61625af49788156113fb575b6000986113d6575b50604051683d913730b6b2911d1160b91b6020820152998a9960298b0161121091612716565b701116113232b9b1b934b83a34b7b7111d1160791b815260110161123391612716565b7f222c2265787465726e616c5f75726c223a2268747470733a2f2f74686973736f81526d636b732e636f6d2f746f6b656e2f60901b6020820152602e0161127991612716565b6b1116101137bbb732b9111d1160a11b8152600c0161129791612716565b6b11161134b6b0b3b2911d101160a11b8152600c017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152601a016112db91612716565b61088b60f21b81526002016d2261747472696275746573223a5b60901b8152600e0161130691612716565b61130f906127a7565b61131891612716565b611321906127a7565b61132a91612716565b611333906127a7565b61133c91612716565b611345906127a7565b61134e91612716565b605d60f81b8152600101607d60f81b815260010103601f19810182526113749082610b14565b61137d90612a7d565b6040517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000006020820152908190603d82016113b691612716565b03601f19810182526113c89082610b14565b604051610386819282610305565b6113f49198503d806000833e6113ec8183610b14565b810190612749565b96386111ea565b61140361206e565b6111e2565b61141e9197503d806000833e6113ec8183610b14565b9538611194565b61142d61206e565b61118c565b6114489196503d806000833e6113ec8183610b14565b9438611132565b61145761206e565b61112a565b600092919750611475903d8085833e6113ec8183610b14565b9690916110df565b61148561206e565b6110d7565b6114a09196503d806000833e6113ec8183610b14565b943861107d565b6114af61206e565b611075565b6114ca9195503d806000833e6113ec8183610b14565b9338610eee565b6114d961206e565b610ee6565b6114f49193503d806000833e6113ec8183610b14565b9138610eab565b61150361206e565b610ea3565b61151d91503d806000833e6113ec8183610b14565b38610e68565b61152b61206e565b610e60565b61154591503d806000833e6113ec8183610b14565b38610e26565b61155361206e565b610e1e565b61156d91503d806000833e6113ec8183610b14565b38610dc1565b61157b61206e565b610db9565b6115969197503d806000833e6113ec8183610b14565b9538610d5c565b6115a561206e565b610d54565b6115bf91503d806000833e6113ec8183610b14565b38610cfa565b6115cd61206e565b610cf2565b503461000e57604036600319011261000e57602060ff6116246115f3610450565b6115fb610466565b6001600160a01b0391821660009081526005865260408082209290931681526020919091522090565b54166040519015158152f35b5060008060031936011261041c5761038690611812600c9161165483544210612465565b61167e611679611671600d5461166c813410156124a0565b6124d9565b6103e8900490565b600d55565b61168c6001600b5401600b55565b600b549261169a84336125ca565b60196116a543611dcc565b60408051602081018881529240918101919091526bffffffffffffffffffffffff1933606090811b82168184015230901b1660748201526116e98160888101610c5f565b5190209160ff83816014819660061a828460051a831b1617061661171789600052600e602052604060002090565b5581601f611723610b35565b9482818560021a828760011a831b16170616865282818560091a828760081a831b16170616602087015261178284601e1a96848660141a93898286831b16170616604082015261177d8d600052600f602052604060002090565b612521565b82600b8186168287601b1a831b161706166117a78c6000526010602052604060002090565b55828460161a91831b161706166117c8896000526011602052604060002090565b55600a1a831b161706166117e6846000526012602052604060002090565b558080604051347354179e1770a780f2f541f23cb21252de12977d3c5af161180c61207b565b5061258d565b6040519081529081906020820190565b503461000e57602036600319011261000e5761183c610450565b600a546001600160a01b039061185590821633146118b9565b811615611865576104d490611904565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b156118c057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600a80546001600160a01b039283166001600160a01b031982168117909255604051919216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3565b6001600160a01b0316801561197257600052600360205260406000205490565b60405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608490fd5b6000908152600260205260409020546001600160a01b031680156119eb5790565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608490fd5b15611a4957565b60405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b6064820152608490fd5b611ab881611c64565b15611ad8576000908152600460205260409020546001600160a01b031690565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b15611b3957565b60405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608490fd5b60405190602082018281106001600160401b03821117611bbc575b60405260008252565b611bc4610ad5565b611bb3565b90611bed939291611bdd6105e08433611c81565b611be8838383611e25565b6120ab565b15611bf457565b60405162461bcd60e51b815280611c0d60048201611c11565b0390fd5b60809060208152603260208201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60608201520190565b6000908152600260205260409020546001600160a01b0316151590565b611c8a82611c64565b15611d0357611c98826119ca565b6001600160a01b038281168282168114949091908515611ceb575b5050508215611cc157505090565b6001600160a01b0316600090815260056020526040902060ff9250611ce691906104f9565b541690565b611cf89192939550611aaf565b161491388080611cb3565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b15611d6457565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b50634e487b7160e01b600052601160045260246000fd5b60018110611ddc575b6000190190565b611de4611db5565b611dd5565b6001906001198111611df9570190565b611e01611db5565b0190565b6002906002198111611df9570190565b6020906020198111611df9570190565b90611e2f836119ca565b6001600160a01b038381169290918216839003611f1557611e89611eec92821694611e5b861515611d5d565b611e668784836121b2565b611e6f87611f6c565b6001600160a01b0316600090815260036020526040902090565b611e938154611dcc565b90556001600160a01b0381166000908152600360205260409020611eb78154611de9565b9055611ecd856000526002602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608490fd5b600081815260046020526040812080546001600160a01b03191690556001600160a01b03611f99836119ca565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92582604051a4565b600082815260046020526040902080546001600160a01b0319166001600160a01b0383161790556001600160a01b0380611ffb846119ca565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256000604051a4565b9081602091031261000e575161031681610210565b6001600160a01b039182168152911660208201526040810191909152608060608201819052610316929101906102e0565b506040513d6000823e3d90fd5b3d156120a6573d9061208c82610b54565b9161209a6040519384610b14565b82523d6000602084013e565b606090565b92909190823b15612165576120de926020926000604051809681958294630a85bd0160e11b9a8b8552336004860161203d565b03926001600160a01b03165af160009181612135575b506121275761210161207b565b805190816121225760405162461bcd60e51b815280611c0d60048201611c11565b602001fd5b6001600160e01b0319161490565b61215791925060203d811161215e575b61214f8183610b14565b810190612028565b90386120f4565b503d612145565b50505050600190565b50634e487b7160e01b600052603260045260246000fd5b9061218f8161230f565b6001600160a01b0382166121a9576121a79150612383565b565b6121a7916122d7565b9091906001600160a01b0380821691826121ec57506121d08361230f565b8316806121e35750506121a79150612383565b036121a9575050565b81851683036121fc575b506121d0565b61227061220882611952565b600181106122ca575b6000190161226160009387855260076020526040852054838103612277575b5084612246896000526007602052604060002090565b556001600160a01b0316600090815260066020526040902090565b90600052602052604060002090565b55386121f6565b8786526006602052604086208487526020526122c36040872054806122b2846122618760018060a01b03166000526006602052604060002090565b556000526007602052604060002090565b5538612230565b6122d2611db5565b612211565b6040906122e381611952565b9260009160018060a01b0316825260066020528282208483526020528083832055815260076020522055565b60085481600052600960205280604060002055600160401b811015612376575b6001810180600855811015612369575b60086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61237161216e565b61233f565b61237e610ad5565b61232f565b60086123f981549260018410612458575b6000918183928352600960205260408320546123e86000199780898101101561244b575b8786528881602088200101549083101561243e575b87865280836020882001556000526009602052604060002090565b556000526009602052604060002090565b55815492831561242a57808401938085101561241d575b8383526020832001015555565b61242561216e565b612410565b634e487b7160e01b82526031600452602482fd5b61244661216e565b6123cd565b61245361216e565b6123b8565b612460611db5565b612394565b1561246c57565b60405162461bcd60e51b815260206004820152600c60248201526b444f4e45204d494e54494e4760a01b6044820152606490fd5b156124a757565b60405162461bcd60e51b815260206004820152600a60248201526909c9ea8408a9c9eaa8e960b31b6044820152606490fd5b6103ea9080600019048211811515166124f0570290565b6124f8611db5565b0290565b6001600160fe1b038111600116612514575b60021b90565b61251c611db5565b61250e565b805491600392838355808410612564575b50906000526020806000206000925b84841061254f575050505050565b60018382829351855501920193019290612541565b6000838152846020822092830192015b828110612582575050612532565b818155600101612574565b1561259457565b60405162461bcd60e51b815260206004820152600e60248201526d18dbdd5b19081b9bdd081cd95b9960921b6044820152606490fd5b6001600160a01b03811690811561269d576125e483611c64565b61265857806125f68461262e93612185565b6001600160a01b03811660009081526003602052604090206126188154611de9565b9055611ecd846000526002602052604060002090565b60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef81604051a4565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b156126e857565b60405162461bcd60e51b815260206004820152600660248201526508595e1a5cdd60d21b6044820152606490fd5b90611e01602092828151948592016102ab565b6040519061273682610aec565b6004825263536f636b60e01b6020830152565b60208183031261000e578051906001600160401b03821161000e570181601f8201121561000e57805161277b81610b54565b926127896040519485610b14565b8184526020828401011161000e5761031691602080850191016102ab565b600b60fa1b815260010190565b60405190606082018281106001600160401b038211176127e1575b604052602a8252604082602036910137565b6127e9610ad5565b6127cf565b906127f882610b54565b6128056040519182610b14565b8281528092612816601f1991610b54565b0190602036910137565b90602091805182101561283257010190565b61283a61216e565b010190565b80156128db576000818181805b6128b1575061285a816127ee565b935b6128665750505090565b61286f90611dcc565b90600a906030828206801982116128a4575b0160f81b6001600160f81b031916841a61289b8487612820565b5304908161285c565b6128ac611db5565b612881565b91506001600a9160001981146128ce575b0191048084929161284c565b6128d6611db5565b6128c2565b506040516128e881610aec565b60018152600360fc1b602082015290565b8015611ddc576000190190565b1561290d57565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b6129596127b4565b908151156129f3575b6030602083015381516001908110156129e6575b90607860218401536029915b8083116129955750610316915015612906565b9080600f6129d2921660108110156129d9575b6f181899199a1a9b1b9c1cb0b131b232b360811b901a6129c88587612820565b5360041c926128f9565b9190612982565b6129e161216e565b6129a8565b6129ee61216e565b612976565b6129fb61216e565b612962565b60405190606082018281106001600160401b03821117612a70575b604052604082527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f6040837f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208201520152565b612a78610ad5565b612a1b565b805115612b5d57612a8c612a00565b612aa8612aa3612a9c8451611e05565b6003900490565b6124fc565b91612aba612ab584611e15565b6127ee565b92835280815182019060208501935b828210612b0b57505050600390510680600114612afa57600214612aeb575090565b603d60f81b6000199091015290565b50613d3d60f01b6001199091015290565b9091936004906003809401938451600190603f9082828260121c16880101518553828282600c1c16880101518386015382828260061c1688010151600286015316850101519082015301939190612ac9565b50610316611b98565b612b6f90612c6c565b610316608160405180937f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060208301527f30302f737667222077696474683d223130383022206865696768743d2231303860408301527f30222076696577426f783d2230203020313038302031303830223e00000000006060830152612bff815180926020607b860191016102ab565b8101651e17b9bb339f60d11b607b820152036061810184520182610b14565b6040906103169392815281602082015201906102e0565b91612c5e90612c5061031695936060865260608601906102e0565b9084820360208601526102e0565b9160408184039101526102e0565b612d1d612c7882613190565b9193612c8e816000526011602052604060002090565b5490612c998161322a565b9173feeea43f4D4251BD883b9433762e9101380c6D70612cc3836000526010602052604060002090565b549260409586519763749e421b60e01b89526000898181819c612cef60049b8c83019190602083019252565b0381895af4908115613183575b8291613169575b508951809c819263132ffe9960e31b8352898b8401612c1e565b0381875af4998a1561315c575b899a613140575b5087519a630f500e3b60e41b8c52898c80612d53898b83019190602083019252565b0381885af49b8c15613133575b8a9c6130f4575b5093612e8b97938a612e148b612dea612e449b9784612ed59f9c98819c73DA7991CB363e76C33cE5dBa42c6ea28B4e8A5ECc958051948d858780612dbd6313f89b4360e31b978883528583019190602083019252565b03818c5af49687156130e7575b86976130c7575b5082518481529081019182529685918891829160200190565b03818a5af49586156130ba575b849661309e575b5051968792839283528d83019190602083019252565b0381865af4938415613091575b8594613075575b508b51635a8289c960e01b81529c8d94859384938c8501612c35565b03915af4978815613068575b8698613046575b50612e6d8691600052600e602052604060002090565b548751809a8192630c0d0b6560e41b83528783019190602083019252565b03817305482875e24Bd0FCf6a94dA6480680eCb4D8113D5af4978815613039575b8598613019575b50908491865180809b819463c9e3104760e01b83528783019190602083019252565b03915af496871561300c575b8397612fe8575b508351630722ef8960e01b81529081019182529190829081906020015b0381734Baf7A213EeB9398bA7f191623335a24f768b4185af4958615612fdb575b8096612fbe575b50505195869560208701612f4091612716565b7f3c67207472616e73666f726d3d227472616e736c617465283138302c2031333081526214911f60e91b6020820152602301612f7b91612716565b612f8491612716565b612f8d91612716565b631e17b39f60e11b8152600401612fa391612716565b612fac91612716565b03601f19810182526103169082610b14565b612fd39296503d8091833e6113ec8183610b14565b933880612f2d565b612fe361206e565b612f26565b612f059392919750613003903d8085833e6113ec8183610b14565b96909192612ee8565b61301461206e565b612ee1565b8592919850613031903d8085833e6113ec8183610b14565b979091612eb3565b61304161206e565b612eac565b86919850613060612e6d913d8085833e6113ec8183610b14565b989150612e57565b61307061206e565b612e50565b61308a9194503d8087833e6113ec8183610b14565b9238612e28565b61309961206e565b612e21565b6130b39196503d8086833e6113ec8183610b14565b9438612dfe565b6130c261206e565b612df7565b86929197506130df903d8085833e6113ec8183610b14565b969091612dd1565b6130ef61206e565b612dca565b899c50938a809995928197939b989499959b3d8084833e6131158183610b14565b810161312091612749565b9e50929650509397989296919598612d67565b61313b61206e565b612d60565b613155919a503d808b833e6113ec8183610b14565b9838612d31565b61316461206e565b612d2a565b61317d91503d8084833e6113ec8183610b14565b38612d03565b61318b61206e565b612cfc565b61319c610c2782611c64565b600091818352600f6020526040832080541561321d575b8352600260208085205494848152600f825260408120805460011015613210575b81526131f16001838320015495600052600f602052604060002090565b8054841015613203575b815220015490565b61320b61216e565b6131fb565b61321861216e565b6131d4565b61322561216e565b6131b3565b613236610c2782611c64565b60005260126020526040600020549056fea264697066735822122027cde362c073a41c05d4d18f4d45f070deedf9ca0cb5165592c7316cf8ded80464736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461020757806306fdde03146101fe578063081812fc146101f5578063095ea7b3146101ec57806318160ddd146101e357806323b872dd146101da5780632f745c59146101d157806342842e0e146101c85780634f6ccce7146101bf5780636352211e146101b657806366d003ac146101ad57806370a08231146101a4578063715018a61461019b5780637165485d146101925780638da5cb5b1461018957806395d89b4114610180578063a035b1fe14610177578063a22cb4651461016e578063a2d6c6da14610165578063a4d66daf1461015c578063b88d4fde14610153578063c87b56dd1461014a578063e985e9c514610141578063eb93406b146101385763f2fde38b1461013057600080fd5b61000e611822565b5061000e611630565b5061000e6115d2565b5061000e610c07565b5061000e610b7e565b5061000e610ab7565b5061000e610a83565b5061000e61099a565b5061000e61097b565b5061000e6108b9565b5061000e61088f565b5061000e610871565b5061000e61080c565b5061000e6107e0565b5061000e6107b0565b5061000e610791565b5061000e6106e5565b5061000e61069e565b5061000e6105ea565b5061000e6105c0565b5061000e61056c565b5061000e61047c565b5061000e61041f565b5061000e610319565b5061000e610222565b6001600160e01b031981160361000e57565b503461000e57602036600319011261000e57602060043561024281610210565b63ffffffff60e01b1663780e9d6360e01b8114908115610268575b506040519015158152f35b6380ac58cd60e01b81149150811561029a575b8115610289575b503861025d565b6301ffc9a760e01b14905038610282565b635b5e139f60e01b8114915061027b565b918091926000905b8282106102cb5750116102c4575050565b6000910152565b915080602091830151818601520182916102b3565b906020916102f9815180928185528580860191016102ab565b601f01601f1916010190565b9060206103169281815201906102e0565b90565b503461000e5760008060031936011261041c57604051908080549060019180831c92808216928315610412575b60209283861085146103fe5785885260208801949081156103e2575060011461038a575b6103868761037a81890382610b14565b60405191829182610305565b0390f35b6000805294509192917f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b8386106103d1575050509101905061037a82610386388061036a565b8054858701529482019481016103b5565b60ff1916855250505001915061037a905082610386388061036a565b634e487b7160e01b82526022600452602482fd5b93607f1693610346565b80fd5b503461000e57602036600319011261000e57602061043e600435611aaf565b6040516001600160a01b039091168152f35b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57604036600319011261000e57610496610450565b6024356104a2816119ca565b916001600160a01b03808416908216811461051d576104d4936104cf9133149081156104d6575b50611a42565b611fc2565b005b6001600160a01b0316600090815260056020526040902061051791506105109033905b9060018060a01b0316600052602052604060002090565b5460ff1690565b386104c9565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b503461000e57600036600319011261000e576020600854604051908152f35b606090600319011261000e576001600160a01b0390600435828116810361000e5791602435908116810361000e579060443590565b503461000e576104d46105d23661058b565b916105e56105e08433611c81565b611b32565b611e25565b503461000e57604036600319011261000e57610604610450565b6024359061061181611952565b821015610645576001600160a01b031660009081526006602090815260408083209383529281529082902054915191825290f35b60405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608490fd5b503461000e576104d46106b03661058b565b9060405192602084018481106001600160401b038211176106d8575b60405260008452611bc9565b6106e0610ad5565b6106cc565b503461000e57602036600319011261000e576004356008548110156107375760086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30154604051908152602090f35b60405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608490fd5b503461000e57602036600319011261000e57602061043e6004356119ca565b503461000e57600036600319011261000e5760206040517354179e1770a780f2f541f23cb21252de12977d3c8152f35b503461000e57602036600319011261000e5760206108046107ff610450565b611952565b604051908152f35b503461000e5760008060031936011261041c57600a546001600160a01b038116906108383383146118b9565b6001600160a01b031916600a556040519082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e57600036600319011261000e5760206040516103ea8152f35b503461000e57600036600319011261000e57600a546040516001600160a01b039091168152602090f35b503461000e5760008060031936011261041c576040519080600190815480831c92808216928315610971575b60209283861085146103fe5785885260208801949081156103e25750600114610918576103868761037a81890382610b14565b600160005294509192917fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b838610610960575050509101905061037a82610386388061036a565b805485870152948201948101610944565b93607f16936108e5565b503461000e57600036600319011261000e576020600d54604051908152f35b503461000e57604036600319011261000e576109b4610450565b602435801515810361000e576001600160a01b03821691338314610a4257816109ff610a109233600052600560205260406000209060018060a01b0316600052602052604060002090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606490fd5b503461000e57602036600319011261000e57610386610aa3600435612c6c565b6040519182916020835260208301906102e0565b503461000e57600036600319011261000e576020604051610e908152f35b50634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b03821117610b0757604052565b610b0f610ad5565b604052565b90601f801991011681019081106001600160401b03821117610b0757604052565b60405190606082018281106001600160401b03821117610b0757604052565b6020906001600160401b038111610b71575b601f01601f19160190565b610b79610ad5565b610b66565b503461000e57608036600319011261000e57610b98610450565b610ba0610466565b606435916001600160401b03831161000e573660238401121561000e57826004013591610bcc83610b54565b92610bda6040519485610b14565b808452366024828701011161000e5760208160009260246104d49801838801378501015260443591611bc9565b503461000e57602036600319011261000e57610c2c610c27600435611c64565b6126e1565b610d33610c5f610c6d610c4060043561283f565b60405165536f636b202360d01b60208201529283916026830190612716565b03601f198101835282610b14565b610c75612729565b50610c89610c84600435612b66565b612a7d565b610c94600435613190565b9092610cd16000610cb16004356000526011602052604060002090565b5460405180938192630353b07760e01b8352600483019190602083019252565b038173__$772a75894d036a7365d3d456d63c619b1e$__5af49081156115c5575b6000916115aa575b506000610d136004356000526011602052604060002090565b5460405180998192631e5833e960e11b8352600483019190602083019252565b038173__$772a75894d036a7365d3d456d63c619b1e$__5af496871561159d575b600097611580575b50610d986000610d78600435600052600e602052604060002090565b5460405180938192636aabd94360e11b8352600483019190602083019252565b038173__$74f2c8579a45ff0cd4ba0b2f14fdf61d51$__5af4908115611573575b600091611558575b50610dfd6000610ddd600435600052600e602052604060002090565b5460405180938192630c52312760e01b8352600483019190602083019252565b038173__$45d2f044cbc76663f5d423dd998b62c3f2$__5af490811561154b575b600091611530575b506040516357734f6b60e01b81526004810187905260008160248173__$1a9ce43643d07b5d2d447f788b54f84bee$__5af4908115611523575b600091611508575b506040516357734f6b60e01b8152600481018990529160008360248173__$1a9ce43643d07b5d2d447f788b54f84bee$__5af49283156114fb575b6000936114de575b506040516357734f6b60e01b8152600481018890529360008560248173__$1a9ce43643d07b5d2d447f788b54f84bee$__5af49485156114d1575b6000956114b4575b506040516e02a3434b99029b7b1b5b9903430b99608d1b60208201529b8c96602f8801610f1a91612716565b6c0103130b1b5b3b937bab732161609d1b8152600d01610f3991612716565b720103130b1b5b3b937bab7321031b7b637b9161606d1b8152601301610f5e91612716565b690103830ba3a32b93716160b51b8152600a01610f7a91612716565b66010103834b717160cd1b815260070167020b732103430b9960c51b8152600801610fa491612716565b610fad906127a7565b610fb691612716565b610fbf906127a7565b610fc891612716565b6620636f6c6f727360c81b815260070103601f1981018752610fea9087610b14565b610ff560043561283f565b6110006004356119ca565b611012906001600160a01b0316612951565b9160043561102a906000526010602052604060002090565b5460405163a81f66ed60e01b815260048101919091529273__$772a75894d036a7365d3d456d63c619b1e$__846024815a93600094f49283159761116b976110b6966111c19a6114a7575b60009661148a575b5060006110966004356000526011602052604060002090565b546040518099819263e28b34df60e01b8352600483019190602083019252565b038173__$772a75894d036a7365d3d456d63c619b1e$__5af496871561147d575b60009761145c575b5060405163357c470d60e21b815260048101919091526024810191909152604481019690965260008660648173__$1a9ce43643d07b5d2d447f788b54f84bee$__5af495861561144f575b600096611432575b50600061114b600435600052600e602052604060002090565b54604051809981926326549a8f60e11b8352600483019190602083019252565b038173__$45d2f044cbc76663f5d423dd998b62c3f2$__5af4968715611425575b600097611408575b5060006111a260043561322a565b604051809a8192635cb9c28560e01b8352600483019190602083019252565b038173__$74f2c8579a45ff0cd4ba0b2f14fdf61d51$$d8604f29f747a182d7154cbbe3703d0759$__612cc3836000526010602052604060002090565b549260409586519763749e421b60e01b89526000898181819c612cef60049b8c83019190602083019252565b0381895af4908115613183575b8291613169575b508951809c819263132ffe9960e31b8352898b8401612c1e565b0381875af4998a1561315c575b899a613140575b5087519a630f500e3b60e41b8c52898c80612d53898b83019190602083019252565b0381885af49b8c15613133575b8a9c6130f4575b5093612e8b97938a612e148b612dea612e449b9784612ed59f9c98819c73__$1a9ce43643d07b5d2d447f788b54f84bee$__958051948d858780612dbd6313f89b4360e31b978883528583019190602083019252565b03818c5af49687156130e7575b86976130c7575b5082518481529081019182529685918891829160200190565b03818a5af49586156130ba575b849661309e575b5051968792839283528d83019190602083019252565b0381865af4938415613091575b8594613075575b508b51635a8289c960e01b81529c8d94859384938c8501612c35565b03915af4978815613068575b8698613046575b50612e6d8691600052600e602052604060002090565b548751809a8192630c0d0b6560e41b83528783019190602083019252565b038173__$468c35549c0d3f0dce3a9aae9298ebcb6b$__5af4978815613039575b8598613019575b50908491865180809b819463c9e3104760e01b83528783019190602083019252565b03915af496871561300c575b8397612fe8575b508351630722ef8960e01b81529081019182529190829081906020015b038173__$b2b9e644a8ce45a89368405a64b815a752$__5af4958615612fdb575b8096612fbe575b50505195869560208701612f4091612716565b7f3c67207472616e73666f726d3d227472616e736c617465283138302c2031333081526214911f60e91b6020820152602301612f7b91612716565b612f8491612716565b612f8d91612716565b631e17b39f60e11b8152600401612fa391612716565b612fac91612716565b03601f19810182526103169082610b14565b612fd39296503d8091833e6113ec8183610b14565b933880612f2d565b612fe361206e565b612f26565b612f059392919750613003903d8085833e6113ec8183610b14565b96909192612ee8565b61301461206e565b612ee1565b8592919850613031903d8085833e6113ec8183610b14565b979091612eb3565b61304161206e565b612eac565b86919850613060612e6d913d8085833e6113ec8183610b14565b989150612e57565b61307061206e565b612e50565b61308a9194503d8087833e6113ec8183610b14565b9238612e28565b61309961206e565b612e21565b6130b39196503d8086833e6113ec8183610b14565b9438612dfe565b6130c261206e565b612df7565b86929197506130df903d8085833e6113ec8183610b14565b969091612dd1565b6130ef61206e565b612dca565b899c50938a809995928197939b989499959b3d8084833e6131158183610b14565b810161312091612749565b9e50929650509397989296919598612d67565b61313b61206e565b612d60565b613155919a503d808b833e6113ec8183610b14565b9838612d31565b61316461206e565b612d2a565b61317d91503d8084833e6113ec8183610b14565b38612d03565b61318b61206e565b612cfc565b61319c610c2782611c64565b600091818352600f6020526040832080541561321d575b8352600260208085205494848152600f825260408120805460011015613210575b81526131f16001838320015495600052600f602052604060002090565b8054841015613203575b815220015490565b61320b61216e565b6131fb565b61321861216e565b6131d4565b61322561216e565b6131b3565b613236610c2782611c64565b60005260126020526040600020549056fea264697066735822122027cde362c073a41c05d4d18f4d45f070deedf9ca0cb5165592c7316cf8ded80464736f6c634300080d0033",
  "libraries": {
    "SockLayoutLibrary": "0xDA7991CB363e76C33cE5dBa42c6ea28B4e8A5ECc",
    "BackgroundLibrary": "0xfeeea43f4D4251BD883b9433762e9101380c6D70",
    "BackgroundMetadataLibrary": "0x5a91980Bec7bE5c2A9ef352AB3320acE93671daD",
    "PinLibrary": "0x05482875e24Bd0FCf6a94dA6480680eCb4D8113D",
    "PinMetadataLibrary": "0xAdcd149C6d927a3ec0993F3E4b316614535c5948",
    "StyleLibrary": "0x07B6009e05Ce1F3FbfBb33b677BB646Daa4504a5",
    "PatternLibrary": "0x4Baf7A213EeB9398bA7f191623335a24f768b418",
    "PatternMetadataLibrary": "0xAC328Cd835BD716f74eA57159308C64d4B9C6162"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 132,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 136,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 140,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 144,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 150,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1084,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1088,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1091,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1095,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 5392,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Counter)1790_storage"
      },
      {
        "astId": 5398,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "mintDeadline",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5413,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "price",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5417,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "tokenPin",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5422,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "sockColors",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5426,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "sockBackgroundColor",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5430,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "sockBackgroundType",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5434,
        "contract": "contracts/ThisSocks.sol:ThisSocks",
        "label": "sockPatterns",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1790_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1789,
            "contract": "contracts/ThisSocks.sol:ThisSocks",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}